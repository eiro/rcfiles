# vim: ft=zsh sw=4 fdm=marker path+=~/bin,~/src/unistra/bin

DEBIAN_PREVENT_KEYBOARD_CHANGES= # fuck you, debian!
skip_global_compinit= # also:  fuck you, debian!
export TEXMFHOME=~/local/texmf
export EMAIL=khatar@phear.org # used by some tools (debian devscripts, mutt, ...)
export EDITOR=vim
export PAGER=less
export LC_ALL=
export LANGUAGE=
# export LC_ALL=en_US.utf8 # locale -a to list available
export ZSHDOT=~/local/etc/zsh
export DOKUWIKI_CLIENT_BASE=https://di.u-strasbg.fr/
export DOKUWIKI_CLIENT_MACHINE=unistra

export VIM_SCRATCHPAD_ROOT=~/local/var/scratchpad

setopt pathdirs
path=( ~/bin ~/node_modules/*/bin(N) $path )

. uze/uze
. uze/eiro/env/more
. uze/eiro/env/homebrew
. uze/unistra/annuaire

# PIP installed!
path=( ~/.local/bin(N) $path )

export LOCAL_DEBIAN_REPO=~/www/packages/rt

hash -d debrepo=$HOME/local/debs
# ~u for UNISTRA.  TODO: split, document, push ...
hash -d u=~/bin/u
. ~u/helpers

export RT_WORKSPACE=~/todo/bt
. uze/rt

hash -d p5=~/src/perl/5/lib
. uze/p5/env
p5/env/local
p5/env/dev

glob_zshenv_files="$ZSHDOT/env/*.zsh(N)"
glob_zshrc_files="$ZSHDOT/rc/*.zsh(N)"

for f ( $~glob_zshenv_files ) source $f

. uze/whence
alias b=whence/readlink

mailsync () {
    cd ~/local/mail && yes |
        shush2 mbsync -qa
}

mailpath+=( '/var/spool/mail/mc?new local mail' )
function () {
    local f
    for f { mailpath+=( "$f?new $f:t mail" ) }
}   ~/local/mail/*(N/)

# add to prompt
has_cabal_sandbox () {
    local f
    for f ( .cabal*(N) ) {
        [[ -f .cabal.sandbox.config ]] &&
            print '(Cabal - sandbox)' ||
            print '(Cabal)'
        last
    }
}

. uze/muML
alias M=muML/T_/to

export -UT M4PATH m4path
m4path=( ~/src/m4/*/lib(N) $m4path )

# if $VIM_EXTRA_PATH set in vim, make them available from the shell
export -UT VIM_EXTRA_PATH vim_extra_path
path=( $vim_extra_path $path )

. uze/eiro/blog
bloge () {eiro/blog/entry "$@"}

netrw/sympa- () {
    local srv=${1?ssh server hosting sympa}
    sed 's#^#sympa/list/path #' | sz $srv |
        sed "s#.*#scp://$srv/&/config#"
}

netrw/sympa () { netrw/sympa- $1 <<< ${2?sympa/list/path compliant list} }

alias z=zsh

uzu ldap

l/q () {
    : ${1:=-}
    m4 ldapquery "$@" |
    ldap/filter/minify
}

lq () { ldapvi "$( l/q "$@" )" }
l/m () { ldapvi --ldapmodify }

# udcrud: Unistra Directory CRUD ? ok ... i'm tired!
#udq () { f=ldap/filter/minify ldapvi/_q "$@" }
# well... 9base could be a good idea at some point
# but ENOTIME
#path=( $( shush2 dpkg -L 9base | grep '/bin$' ) $path )
# accept local environments used from vim apps
# for security reasons, DO NOT USE IT ON SERVERS
# for REPLY (.v/env(N)) . $REPLY

gfv () { xargs -n1 perl ~p5/get-flash-videos/bin/get_flash_videos }

js/minify () {
    perl -MLWP::Simple -MJavaScript::Minifier=minify -wE'
        print minify input => get shift
    ' $1
}

js/minify- () {
    perl -MJavaScript::Minifier=minify -0 -nwE'print minify input => $_'
}

uzu eiro/env/more
e() { date -f- +'REM %A %Y-%m-%d AT %R DURATION x MSG x' }

# read the RT tickets from mutt
# adding the line
#    macro index,pager ,t '|zsh -c mutt/-edit/rttk|vim -<enter>'
# in your .muttrc, you can now open a ticket from the pager and the index
# by typing ,t

# mex is for "mail extraction"
# rttk is of RT Ticket

mex/rttk/id () { perl -nE'
    exit print $1 if /^Subject:.*?#(\d+)/;
' }

mutt/-edit/rttk () {
    rt show $( mex/rttk/id )
    test -n $REPLY &&
        rt show $REPLY ||
        print "no ticket found"
}

# helpers for plfarm tests
r   () { sudo -iu rt4 "$@" }
rz  () { r zsh }
rti () {
    rz <<< 'rm -rf  ~/* ~/.*'
    rz
}

l  () { print -l "$@" }
# lg () { print -l "$~@(N)" }


# ttm: this tmux session
# r  : rename
alias ttmr='tmux rename-session'

: <<'=cut'

=head1 spm/pendings

pendings list the current list of pending validations.

=head1 spm/prefix/change

for a spm/pendings as input, generate a pending

=cut

spm/pendings () { curl -sL ramirez.u-strasbg.fr/pendings.txt }

spm/prefix/change () {
    local from=${1?old prefix} to=${2?new prefix}
    while {read cmd list owner} {
        [[ $list == $from(-*)# ]] &&
            print sympa/list/mv $list $to${list#$from}
    }
}

test-suite/spm () {
    local is=is

    got=$( spm/prefix/change old new <<< "clueless old-truc@example.com" )
    expected="sympa/list/path old-truc@example.com new-truc@example.com"
    $is "$got" "$expected" "change a prefixed list"

    got=$( spm/prefix/change old new <<< "clueless old@example.com" )
    expected="sympa/list/path old-truc@example.com new@example.com"

    $is "$got" "$expected" "change top level list"
}

5     () { perl -CSD -MEnv "$@" }
5we   () { 5 -wE   "$@" }
5wen  () { 5 -lnE  "$@" }
5wep  () { 5 -lpE  "$@" }
5wan  () { 5 -lnF  "$@" }
5wap  () { 5 -lpF  "$@" }

# used by mutt macros for spm
mex/words () {
    5wen 'if ( /^$/../^-- / ) {
        map say, split /\s+/
    }'
}

win () {
    # what is next ?
    g s | awk '
        !/^ M po/ &&
        !/^[?][?]/
    '
}

# sympa like it
perl5lib+=src/lib

export PROOT=/tmp/promises
mkdir -p $PROOT

# TODO: was 'promise' overkill?
# minimalist one right there
# uzu promise

promise/tmux/tailf/open () {
    tmux split-window -d  -p 20 'tail -f ${PROMOUT:=/tmp/promise.mix}'
}

# examples (only if alias p=promise/new):
#    | p sort -u
#    | p z
#    | p sz s

promise/new () {
    { (( $+1 )) && "$@" || zsh
    } &>> ${PROMOUT:=/tmp/promise.mix} &
}

alias p=promise/new

# TODO: must be as a macro in tmux instead
p/o () {promise/tmux/tailf/open}
p/c () {promise/tmux/tailf/close}

uzu sympa

tapprouve () {
    # tapprouve t/*.tap > t.html
    prove -m -Q \
    --formatter=TAP::Formatter::HTML \
    --source File "$@"
}

