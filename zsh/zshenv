# vim: ft=zsh sw=4 fdm=marker path+=~/bin,~/src/unistra/bin

DEBIAN_PREVENT_KEYBOARD_CHANGES= # fuck you, debian!
skip_global_compinit= # also:  fuck you, debian!
export TEXMFHOME=~/local/texmf
export EMAIL=khatar@phear.org # used by some tools (debian devscripts, mutt, ...)
export EDITOR=vim
export PAGER=less
export LC_ALL=
export LANGUAGE=
# export LC_ALL=en_US.utf8 # locale -a to list available
export ZSHDOT=~/local/etc/zsh
export DOKUWIKI_CLIENT_BASE=https://di.u-strasbg.fr/
export DOKUWIKI_CLIENT_MACHINE=unistra

export VIM_SCRATCHPAD_ROOT=~/local/var/scratchpad

setopt pathdirs
path=( ~/bin ~/node_modules/*/bin(N) $path )

. uze/uze
. uze/eiro/env/more
. uze/eiro/env/homebrew
. uze/unistra/annuaire

# PIP installed!
path=( ~/.local/bin(N) $path )

export LOCAL_DEBIAN_REPO=~/www/packages/rt

hash -d debrepo=$HOME/local/debs
# ~u for UNISTRA.  TODO: split, document, push ...
hash -d u=~/bin/u
. ~u/helpers

export RT_WORKSPACE=~/todo/bt
. uze/rt

hash -d p5=~/src/perl/5/lib
. uze/p5/env
p5/env/local
p5/env/dev

glob_zshenv_files="$ZSHDOT/env/*.zsh(N)"
glob_zshrc_files="$ZSHDOT/rc/*.zsh(N)"

for f ( $~glob_zshenv_files ) source $f

. uze/whence
alias b=whence/readlink

mailsync () {
    cd ~/local/mail && yes |
        shush2 mbsync -qa
}

mailpath+=( '/var/spool/mail/mc?new local mail' )
function () {
    local f
    for f { mailpath+=( "$f?new $f:t mail" ) }
}   ~/local/mail/*(N/)

5 () { perl -wsCSDE "$@" }

# add to prompt
has_cabal_sandbox () {
    local f
    for f ( .cabal*(N) ) {
        [[ -f .cabal.sandbox.config ]] &&
            print '(Cabal - sandbox)' ||
            print '(Cabal)'
        last
    }
}

. uze/muML
alias M=muML/T_/to

export -UT M4PATH m4path
m4path=( ~/src/m4/*/lib(N) $m4path )

# if $VIM_EXTRA_PATH set in vim, make them available from the shell
export -UT VIM_EXTRA_PATH vim_extra_path
path=( $vim_extra_path $path )

. uze/eiro/blog
bloge () {eiro/blog/entry "$@"}

netrw/sympa- () {
    local srv=${1?ssh server hosting sympa}
    sed 's#^#sympa/list/path #' | sz $srv |
        sed "s#.*#scp://$srv/&/config#"
}

netrw/sympa () { netrw/sympa- $1 <<< ${2?sympa/list/path compliant list} }

alias z=zsh

uzu ldap
lfm () {ldap/filter/minify "$@"}

ldapvi/_q () {
    local query="$( ${f?use wrappers, you fool!} )"
    ldapvi "$@" "$query" 
}

# udcrud: Unistra Directory CRUD ? ok ... i'm tired! 
udq () { f=ldap/filter/minify ldapvi/_q "$@" }


# well... 9base could be a good idea at some point
# but ENOTIME
#
#path=( $( shush2 dpkg -L 9base | grep '/bin$' ) $path )  

# accept local environments used from vim apps
# for security reasons, DO NOT USE IT ON SERVERS
for REPLY (.v/env(N)) . $REPLY

lq () { m4 ldapquery - }

gfv () { xargs -n1 perl ~p5/get-flash-videos/bin/get_flash_videos } 

js/minify () {
    perl -MLWP::Simple -MJavaScript::Minifier=minify -wE'
        print minify input => get shift
    ' $1
}

js/minify- () {
    perl -MJavaScript::Minifier=minify -0 -nwE'print minify input => $_'
}

uzu eiro/env/more
e() { date -f- +'REM %A %Y-%m-%d AT %R DURATION x MSG x' }

# read the RT tickets from mutt 
# adding the line 
#    macro index,pager ,t '|zsh -c mutt/-edit/rttk|vim -<enter>'
# in your .muttrc, you can now open a ticket from the pager and the index 
# by typing ,t

# mex is for "mail extraction"
# rttk is of RT Ticket 

mex/rttk/id () {
    perl -nE'
        /^Subject:.*?(\d+)/
            and exit print $1
    '
}

mutt/-edit/rttk () {
    rt show $( mex/rttk/id )
}

# helpers for plfarm tests
r   () { sudo -iu rt4 "$@" }
rz  () { r zsh }
rti () {
    rz <<< 'rm -rf  ~/* ~/.*'
    rz
} 

l () { print -l "$@" }

# ttm: this tmux session
# r  : rename
alias ttmr='tmux rename-session'


: <<'=cut'

=head1 spm/pendings

pendings list the current list of pending validations. 

=head1 spm/prefix/change

for a spm/pendings as input, generate a pending 

=cut

spm/pendings () { curl -sL ramirez.u-strasbg.fr/pendings.txt } 

spm/prefix/change () {
    local from=${1?old prefix} to=${2?new prefix}
    while {read cmd list owner} {
        [[ $list == $from(-*)# ]] && 
            print sympa/list/mv $list $to${list#$from}
    } 
}

test-suite/spm () {
    local is=is

    got=$( spm/prefix/change old new <<< "clueless old-truc@example.com" )
    expected="sympa/list/path old-truc@example.com new-truc@example.com"
    $is "$got" "$expected" "change a prefixed list" 

    got=$( spm/prefix/change old new <<< "clueless old@example.com" )
    expected="sympa/list/path old-truc@example.com new@example.com"

    $is "$got" "$expected" "change top level list"
}
