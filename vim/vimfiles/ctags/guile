!	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (! (ch <data-channel>) (x <top>))$/;"	f
!	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (! (ch <data-channel>))$/;"	f
!	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (! (ch <port-channel>))$/;"	f
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
#{`}#	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial #{`}# (loc args)$/;"	f
$abs	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($abs z)$/;"	f
$acos	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($acos z)$/;"	f
$acosh	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($acosh z)$/;"	f
$asin	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($asin z)$/;"	f
$asinh	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($asinh z)$/;"	f
$atan	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($atan z)$/;"	f
$atanh	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($atanh z)$/;"	f
$cos	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($cos z)$/;"	f
$cosh	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($cosh z)$/;"	f
$exp	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($exp z)$/;"	f
$expt	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($expt z1 z2)$/;"	f
$log	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($log z)$/;"	f
$sc-dispatch	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define $sc-dispatch #f)$/;"	f
$sin	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($sin z)$/;"	f
$sinh	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($sinh z)$/;"	f
$sqrt	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($sqrt z)$/;"	f
$tan	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($tan z)$/;"	f
$tanh	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define ($tanh z)$/;"	f
%	/usr/share/guile/2.0/ice-9/control.scm	/^(define-syntax %$/;"	f
%%compute-applicable-methods	/usr/share/guile/2.0/oop/goops.scm	/^(define %%compute-applicable-methods$/;"	f
%%compute-applicable-methods	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (%%compute-applicable-methods (gf <generic>) args)$/;"	f
%%copier	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define %%copier #f) ; a private syntax literal$/;"	f
%%index	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define %%index #f)  ; a private syntax literal$/;"	f
%%on-error	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define-syntax-rule (%%on-error err) err)$/;"	f
%%set-fields	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define-syntax %%set-fields$/;"	f
%%type	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define %%type #f)   ; a private syntax literal$/;"	f
%and-let*	/usr/share/guile/2.0/ice-9/and-let-star.scm	/^(define-syntax %and-let*$/;"	f
%auto-compilation-options	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define %auto-compilation-options$/;"	f
%compute-initargs	/usr/share/guile/2.0/system/base/syntax.scm	/^(define (%compute-initargs args slots)$/;"	f
%cond-expand-features	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define %cond-expand-features$/;"	f
%cond-expand-table	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define %cond-expand-table (make-hash-table 31))$/;"	f
%condition-type-vtable	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define %condition-type-vtable$/;"	f
%count-calls?	/usr/share/guile/2.0/statprof.scm	/^(define %count-calls? #t)               ; whether to catch apply-frame.$/;"	f
%create-workers!	/usr/share/guile/2.0/ice-9/futures.scm	/^(define (%create-workers!)$/;"	f
%default-trap-handler	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define %default-trap-handler (make-fluid))$/;"	f
%define-record-type	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define-syntax %define-record-type$/;"	f
%define-values-arity-error	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (%define-values-arity-error)$/;"	f
%ffi-memory-backend	/usr/share/guile/2.0/system/base/types.scm	/^(define %ffi-memory-backend$/;"	f
%future-prompt	/usr/share/guile/2.0/ice-9/futures.scm	/^(define %future-prompt$/;"	f
%futures	/usr/share/guile/2.0/ice-9/futures.scm	/^(define %futures (make-q))$/;"	f
%futures-available	/usr/share/guile/2.0/ice-9/futures.scm	/^(define %futures-available (make-condition-variable))$/;"	f
%futures-mutex	/usr/share/guile/2.0/ice-9/futures.scm	/^(define %futures-mutex (make-mutex))$/;"	f
%futures-waiting	/usr/share/guile/2.0/ice-9/futures.scm	/^(define %futures-waiting '())$/;"	f
%gdb-memory-backend	/usr/share/gdb/auto-load/libguile-2.0.so.22.7.2-gdb.scm	/^(define %gdb-memory-backend$/;"	f
%help	/usr/share/guile/2.0/scripts/help.scm	/^(define %help "$/;"	f
%http-proxy-port?	/usr/share/guile/2.0/web/http.scm	/^(define %http-proxy-port? (make-object-property))$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/frisk.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/generate-autoload.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/lint.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/list.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/punify.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/read-scheme-source.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/read-text-outline.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/snarf-guile-m4-docs.scm	/^(define %include-in-guild-list #f)$/;"	f
%include-in-guild-list	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define %include-in-guild-list #f)$/;"	f
%load-announce	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (%load-announce file)$/;"	f
%load-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(set! %load-hook %load-announce)$/;"	s
%load-verbosely	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define %load-verbosely #f)$/;"	f
%make-condition-type	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (%make-condition-type layout id parent all-fields)$/;"	f
%make-repl	/usr/share/guile/2.0/system/repl/common.scm	/^(define %make-repl make-repl)$/;"	f
%max-nesting-level	/usr/share/guile/2.0/ice-9/futures.scm	/^(define %max-nesting-level 200)$/;"	f
%mod	/usr/share/guile/2.0/scripts/help.scm	/^(define %mod (current-module))$/;"	f
%native-word-size	/usr/share/guile/2.0/system/base/target.scm	/^(define %native-word-size$/;"	f
%nesting-level	/usr/share/guile/2.0/ice-9/futures.scm	/^(define %nesting-level (make-parameter 0))$/;"	f
%nil	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define %nil #nil)$/;"	f
%number-integer-part	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define (%number-integer-part int grouping separator)$/;"	f
%options	/usr/share/guile/2.0/scripts/compile.scm	/^(define %options$/;"	f
%print-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (%print-module mod port)$/;"	f
%program-name	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define %program-name (make-fluid "guile"))$/;"	f
%record-type-error	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (%record-type-error rtd obj)  ;; private helper$/;"	f
%scm-pretty-printer	/usr/share/gdb/auto-load/libguile-2.0.so.22.7.2-gdb.scm	/^(define %scm-pretty-printer$/;"	f
%set-fields	/usr/share/guile/2.0/srfi/srfi-9/gnu.scm	/^(define-syntax %set-fields$/;"	f
%start-stack	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (%start-stack tag thunk)$/;"	f
%stream-null	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define %stream-null (cons 'stream 'null))$/;"	f
%summary	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define %summary "Show differences between two scan-api files.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define %summary "Generate snippets for use in configure.ac files.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/compile.scm	/^(define %summary "Compile a file.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/disassemble.scm	/^(define %summary "Disassemble a compiled .go file.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/display-commentary.scm	/^(define %summary "Display the Commentary section from a file or module.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define %summary "Snarf out documentation from a file.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/frisk.scm	/^(define %summary "Show dependency information for a module.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/generate-autoload.scm	/^(define %summary "Generate #:autoload clauses for a module.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/help.scm	/^(define %summary "Show a brief help message.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/lint.scm	/^(define %summary "Check for bugs and style errors in a Scheme file.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/list.scm	/^(define %summary "An alias for \\"help\\".")$/;"	f
%summary	/usr/share/guile/2.0/scripts/punify.scm	/^(define %summary "Strip comments and whitespace from a Scheme file.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define %summary "Validate an RFC822-style file.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/read-scheme-source.scm	/^(define %summary "Print a parsed representation of a Scheme file.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/read-text-outline.scm	/^(define %summary "Convert textual outlines to s-expressions.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define %summary "Generate an API description for a Guile extension.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define %summary "Transform snarfed .doc files into texinfo documentation.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/snarf-guile-m4-docs.scm	/^(define %summary "Snarf out texinfo documentation from .m4 files.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define %summary "A quaint relic of the past.")$/;"	f
%summary	/usr/share/guile/2.0/scripts/use2dot.scm	/^(define %summary "Print a module's dependencies in graphviz format.")$/;"	f
%synopsis	/usr/share/guile/2.0/scripts/help.scm	/^(define %synopsis "help\\nhelp --all\\nhelp COMMAND")$/;"	f
%target-endianness	/usr/share/guile/2.0/system/base/target.scm	/^(define %target-endianness (make-fluid (native-endianness)))$/;"	f
%target-type	/usr/share/guile/2.0/system/base/target.scm	/^(define %target-type (make-fluid %host-type))$/;"	f
%target-word-size	/usr/share/guile/2.0/system/base/target.scm	/^(define %target-word-size (make-fluid %native-word-size))$/;"	f
%tc16-bignum	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc16-bignum (+ %tc7-number (* 1 256)))$/;"	f
%tc16-complex	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc16-complex (+ %tc7-number (* 3 256)))$/;"	f
%tc16-fraction	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc16-fraction (+ %tc7-number (* 4 256)))$/;"	f
%tc16-real	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc16-real (+ %tc7-number (* 2 256)))$/;"	f
%tc2-int	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc2-int 2)$/;"	f
%tc3-cons	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc3-cons 0)$/;"	f
%tc3-imm24	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc3-imm24 4)$/;"	f
%tc3-int1	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc3-int1 %tc2-int)$/;"	f
%tc3-int2	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc3-int2 (+ %tc2-int 4))$/;"	f
%tc3-struct	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc3-struct 1)$/;"	f
%tc7-bytevector	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-bytevector 77)$/;"	f
%tc7-dynamic-state	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-dynamic-state 45)$/;"	f
%tc7-fluid	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-fluid 37)$/;"	f
%tc7-frame	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-frame 47)$/;"	f
%tc7-hashtable	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-hashtable 29)$/;"	f
%tc7-number	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-number 23)$/;"	f
%tc7-objcode	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-objcode 53)$/;"	f
%tc7-pointer	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-pointer 31)$/;"	f
%tc7-port	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-port 125)$/;"	f
%tc7-program	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-program 79)$/;"	f
%tc7-smob	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-smob 127)$/;"	f
%tc7-string	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-string 21)$/;"	f
%tc7-stringbuf	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-stringbuf 39)$/;"	f
%tc7-symbol	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-symbol 5)$/;"	f
%tc7-vector	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-vector 13)$/;"	f
%tc7-vm	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-vm 55)$/;"	f
%tc7-vm-continuation	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc7-vm-continuation 71)$/;"	f
%tc8-char	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc8-char (+ 8 %tc3-imm24))$/;"	f
%tc8-flag	/usr/share/guile/2.0/system/base/types.scm	/^(define %tc8-flag (+ %tc3-imm24 0))$/;"	f
%test-any-specifier-matches	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-any-specifier-matches list runner)$/;"	f
%test-approximate=	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-approximate= error)$/;"	f
%test-as-specifier	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-as-specifier specifier)$/;"	f
%test-begin	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-begin suite-name count)$/;"	f
%test-comp1body	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define-syntax %test-comp1body$/;"	f
%test-comp2body	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define-syntax %test-comp2body$/;"	f
%test-end	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-end suite-name line-info)$/;"	f
%test-final-report-simple	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-final-report-simple runner port)$/;"	f
%test-final-report1	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-final-report1 value label port)$/;"	f
%test-format-line	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-format-line runner)$/;"	f
%test-match-all	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-match-all . pred-list)$/;"	f
%test-match-any	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-match-any . pred-list)$/;"	f
%test-match-nth	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-match-nth n count)$/;"	f
%test-null-callback	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-null-callback runner) #f)$/;"	f
%test-on-bad-count-write	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-on-bad-count-write runner count expected-count port)$/;"	f
%test-on-test-begin	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-on-test-begin r)$/;"	f
%test-on-test-end	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-on-test-end r result)$/;"	f
%test-report-result	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-report-result)$/;"	f
%test-should-execute	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-should-execute runner)$/;"	f
%test-specifier-matches	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-specifier-matches spec runner)$/;"	f
%test-write-result1	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (%test-write-result1 pair port)$/;"	f
%thread-handler	/usr/share/guile/2.0/ice-9/threads.scm	/^(define %thread-handler thread-handler)$/;"	f
%vector-concatenate	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define (%vector-concatenate vs)$/;"	f
%vector-reverse!	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define (%vector-reverse! vec start end)$/;"	f
%vhash-assoc	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (%vhash-assoc key vhash equal? hash)$/;"	f
%vhash-fold*	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (%vhash-fold* proc init key vhash equal? hash)$/;"	f
%visited-cells	/usr/share/guile/2.0/system/base/types.scm	/^(define %visited-cells$/;"	f
%warning-passes	/usr/share/guile/2.0/language/tree-il/compile-glil.scm	/^(define %warning-passes$/;"	f
%warning-types	/usr/share/guile/2.0/system/base/message.scm	/^(define %warning-types$/;"	f
%word-size	/usr/share/guile/2.0/system/base/types.scm	/^(define %word-size$/;"	f
%worker-count	/usr/share/guile/2.0/ice-9/futures.scm	/^(define %worker-count$/;"	f
%workers	/usr/share/guile/2.0/ice-9/futures.scm	/^(define %workers '())$/;"	f
&all-effects	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define-effects &all-effects$/;"	f
&all-effects-but-bailout	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define-syntax &all-effects-but-bailout$/;"	f
&causes	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define-inlinable (&causes a)$/;"	f
&condition	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define &condition$/;"	f
&depends-on	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define-inlinable (&depends-on a)$/;"	f
&error	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define-condition-type &error &serious$/;"	f
&i/o-decoding	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define-condition-type &i\/o-decoding &i\/o-port$/;"	f
&i/o-encoding	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define-condition-type &i\/o-encoding &i\/o-port$/;"	f
&message	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define-condition-type &message &condition$/;"	f
&no-effects	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define-syntax &no-effects (identifier-syntax 0))$/;"	f
&serious	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define-condition-type &serious &condition$/;"	f
&syntax-error	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define &syntax-error$/;"	f
'	/usr/share/guile/2.0/ice-9/history.scm	/^(define-module* '(value-history))$/;"	f
*	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (* a b)$/;"	f
*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander *$/;"	f
*GPLv3+*	/usr/share/guile/2.0/ice-9/command-line.scm	/^(define *GPLv3+*$/;"	f
*LGPLv3+*	/usr/share/guile/2.0/ice-9/command-line.scm	/^(define *LGPLv3+*$/;"	f
*abbreviations*	/usr/share/guile/2.0/language/assembly.scm	/^(define *abbreviations*$/;"	f
*args*	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define *args* #f)$/;"	f
*array-prototype*	/usr/share/guile/2.0/language/ecmascript/array.scm	/^(define *array-prototype* (make <js-object> #:class "Array"$/;"	f
*array-prototype*	/usr/share/guile/2.0/language/ecmascript/array.scm	/^(define-js-method *array-prototype* (concat . rest)$/;"	f
*array-prototype*	/usr/share/guile/2.0/language/ecmascript/array.scm	/^(define-js-method *array-prototype* (join . separator)$/;"	f
*array-prototype*	/usr/share/guile/2.0/language/ecmascript/array.scm	/^(define-js-method *array-prototype* (pop)$/;"	f
*array-prototype*	/usr/share/guile/2.0/language/ecmascript/array.scm	/^(define-js-method *array-prototype* (push . args)$/;"	f
*array-prototype*	/usr/share/guile/2.0/language/ecmascript/array.scm	/^(define-js-method *array-prototype* (toString)$/;"	f
*bailout-primitive-table*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *bailout-primitive-table* (make-hash-table))$/;"	f
*bailout-primitives*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *bailout-primitives*$/;"	f
*bytecode-header-len*	/usr/share/guile/2.0/system/vm/program.scm	/^(define *bytecode-header-len* 8)$/;"	f
*c-function-name*	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define *c-function-name* #f)$/;"	f
*callers-db*	/usr/share/guile/2.0/system/xref.scm	/^(define *callers-db* #f)$/;"	f
*closure-sources-db*	/usr/share/guile/2.0/system/xref.scm	/^(define *closure-sources-db* #f)$/;"	f
*command-infos*	/usr/share/guile/2.0/system/repl/command.scm	/^(define *command-infos* (make-hash-table))$/;"	f
*command-table*	/usr/share/guile/2.0/system/repl/command.scm	/^(define *command-table*$/;"	f
*comp-module*	/usr/share/guile/2.0/language/tree-il/compile-glil.scm	/^(define *comp-module* (make-fluid))$/;"	f
*compilation-cache*	/usr/share/guile/2.0/system/base/language.scm	/^(define *compilation-cache* '())$/;"	f
*copying*	/usr/share/guile/2.0/system/repl/common.scm	/^(define *copying*$/;"	f
*current-language*	/usr/share/guile/2.0/system/base/language.scm	/^(define *current-language* (parameter-fluid current-language))$/;"	f
*current-ssax-error-port*	/usr/share/guile/2.0/sxml/ssax.scm	/^(define *current-ssax-error-port*$/;"	f
*current-warning-port*	/usr/share/guile/2.0/system/base/message.scm	/^(define *current-warning-port*$/;"	f
*current-warning-prefix*	/usr/share/guile/2.0/system/base/message.scm	/^(define *current-warning-prefix*$/;"	f
*date-in-the-past*	/usr/share/guile/2.0/web/http.scm	/^(define *date-in-the-past* (parse-date "Thu, 01 Jan 1970 00:00:00 GMT"))$/;"	f
*declared-headers*	/usr/share/guile/2.0/web/http.scm	/^(define *declared-headers* (make-hash-table))$/;"	f
*decompilation-cache*	/usr/share/guile/2.0/system/base/language.scm	/^(define *decompilation-cache* '())$/;"	f
*default-module*	/usr/share/guile/2.0/scripts/frisk.scm	/^(define *default-module* '(guile-user))$/;"	f
*default-module*	/usr/share/guile/2.0/scripts/use2dot.scm	/^(define *default-module* '(guile-user))$/;"	f
*default-ports*	/usr/share/guile/2.0/web/uri.scm	/^(define *default-ports* (make-hash-table))$/;"	f
*dispatch-module*	/usr/share/guile/2.0/oop/goops/dispatch.scm	/^(define *dispatch-module* (current-module))$/;"	f
*div-punctuation*	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define *div-punctuation*$/;"	f
*docstring*	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define *docstring* #f)$/;"	f
*effect+exception-free-primitives*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *effect+exception-free-primitives*$/;"	f
*effect+exceptions-free-primitive-table*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *effect+exceptions-free-primitive-table* (make-hash-table))$/;"	f
*effect-free-primitive-table*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *effect-free-primitive-table* (make-hash-table))$/;"	f
*effect-free-primitives*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *effect-free-primitives*$/;"	f
*eof*	/usr/share/guile/2.0/web/http.scm	/^(define *eof* (call-with-input-string "" read))$/;"	f
*eof-object*	/usr/share/guile/2.0/language/ecmascript/parse.scm	/^(define *eof-object*$/;"	f
*error-events*	/usr/share/guile/2.0/web/server/http.scm	/^(define *error-events* (logior POLLHUP POLLERR))$/;"	f
*events*	/usr/share/guile/2.0/web/server/http.scm	/^(define *events* (logior *error-events* *read-events*))$/;"	f
*expansions*	/usr/share/guile/2.0/language/assembly.scm	/^(define *expansions*$/;"	f
*file*	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define *file* #f)$/;"	f
*function-name*	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define *function-name* #f)$/;"	f
*function-prototype*	/usr/share/guile/2.0/language/ecmascript/function.scm	/^(define *function-prototype* (make <js-object> #:class "Function"$/;"	f
*function-prototype*	/usr/share/guile/2.0/language/ecmascript/function.scm	/^(define-js-method *function-prototype* (apply this-arg array)$/;"	f
*function-prototype*	/usr/share/guile/2.0/language/ecmascript/function.scm	/^(define-js-method *function-prototype* (call this-arg . args)$/;"	f
*function-prototype*	/usr/share/guile/2.0/language/ecmascript/function.scm	/^(define-js-method *function-prototype* (toString)$/;"	f
*future-reserved-words*	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define *future-reserved-words*$/;"	f
*goops-module*	/usr/share/guile/2.0/oop/goops.scm	/^(define *goops-module* (current-module))$/;"	f
*indent*	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define *indent* (make-fluid ""))$/;"	f
*interesting-primitive-names*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *interesting-primitive-names*$/;"	f
*interesting-primitive-vars*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *interesting-primitive-vars* (make-hash-table))$/;"	f
*itemizer*	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define *itemizer* (make-fluid (make-ticker "* ")))$/;"	f
*keywords*	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define *keywords*$/;"	f
*known-versions*	/usr/share/guile/2.0/web/http.scm	/^(define *known-versions* '())$/;"	f
*lalr-scm-version*	/usr/share/guile/2.0/system/base/lalr.upstream.scm	/^(define *lalr-scm-version* "2.4.1")$/;"	f
*len-len*	/usr/share/guile/2.0/language/assembly.scm	/^(define *len-len* 3)$/;"	f
*line*	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define *line* #f)$/;"	f
*logging*	/usr/share/guile/2.0/language/tree-il/cse.scm	/^(define-syntax *logging* (identifier-syntax #f))$/;"	f
*logging*	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define-syntax *logging* (identifier-syntax #f))$/;"	f
*manual-flag*	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define *manual-flag* #f)$/;"	f
*max-stack-size*	/usr/share/guile/2.0/system/base/lalr.upstream.scm	/^(define *max-stack-size* 500)$/;"	f
*module-callees-db*	/usr/share/guile/2.0/system/xref.scm	/^(define *module-callees-db* (make-hash-table))$/;"	f
*module-sources-db*	/usr/share/guile/2.0/system/xref.scm	/^(define *module-sources-db* (make-hash-table))$/;"	f
*multiply-valued-primitive-table*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *multiply-valued-primitive-table* (make-hash-table))$/;"	f
*multiply-valued-primitives*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *multiply-valued-primitives* $/;"	f
*name-help-handlers*	/usr/share/guile/2.0/ice-9/session.scm	/^(define *name-help-handlers* '())$/;"	f
*negatable-primitive-table*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *negatable-primitive-table* (make-hash-table))$/;"	f
*negatable-primitives*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *negatable-primitives*$/;"	f
*null-device*	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define *null-device* "\/dev\/null")$/;"	f
*objcode-header-len*	/usr/share/guile/2.0/system/vm/trace.scm	/^(define *objcode-header-len* 8)$/;"	f
*object-prototype*	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define *object-prototype* #f)$/;"	f
*object-prototype*	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-js-method *object-prototype* (hasOwnProperty p)$/;"	f
*object-prototype*	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-js-method *object-prototype* (isPrototypeOf v)$/;"	f
*object-prototype*	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-js-method *object-prototype* (propertyIsEnumerable p)$/;"	f
*object-prototype*	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-js-method *object-prototype* (toLocaleString . args)$/;"	f
*object-prototype*	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-js-method *object-prototype* (toString)$/;"	f
*object-prototype*	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-js-method *object-prototype* (valueOf)$/;"	f
*object-prototype*	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(set! *object-prototype* (make <js-object>))$/;"	s
*open-sockets*	/usr/share/guile/2.0/system/repl/server.scm	/^(define *open-sockets* '())$/;"	f
*primcall-ops*	/usr/share/guile/2.0/language/tree-il/compile-glil.scm	/^(define *primcall-ops* (make-hash-table))$/;"	f
*primitive-accessors*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *primitive-accessors*$/;"	f
*primitive-constructors*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *primitive-constructors*$/;"	f
*primitive-deffnx-sig-length*	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define *primitive-deffnx-sig-length* (string-length *primitive-deffnx-signature*))$/;"	f
*primitive-deffnx-signature*	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define *primitive-deffnx-signature* "@deffnx {Scheme Procedure} ")$/;"	f
*primitive-expand-table*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define *primitive-expand-table* (make-hash-table))$/;"	f
*program-alignment*	/usr/share/guile/2.0/language/assembly.scm	/^(define *program-alignment* 8)$/;"	f
*program-header-len*	/usr/share/guile/2.0/language/assembly.scm	/^(define *program-header-len* (+ 4 4))$/;"	f
*program-wrappers*	/usr/share/guile/2.0/language/ecmascript/function.scm	/^(define *program-wrappers* (make-doubly-weak-hash-table 31))$/;"	f
*punctuation*	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define *punctuation*$/;"	f
*pww*	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define *pww* "probably_wont_work")$/;"	f
*read-events*	/usr/share/guile/2.0/web/server/http.scm	/^(define *read-events* POLLIN)$/;"	f
*read-line-breaks*	/usr/share/guile/2.0/sxml/upstream/input-parse.scm	/^(define *read-line-breaks* (list char-newline char-return '*eof*))$/;"	f
*readers*	/usr/share/guile/2.0/system/foreign.scm	/^(define *readers*$/;"	f
*reason-phrases*	/usr/share/guile/2.0/web/response.scm	/^(define *reason-phrases*$/;"	f
*recognized-keys*	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define *recognized-keys* '(files-glob$/;"	f
*repl-stack*	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define *repl-stack* (make-fluid '()))$/;"	f
*sdocbook->stexi-rules*	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define *sdocbook->stexi-rules*$/;"	f
*sdocbook-block-commands*	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define *sdocbook-block-commands*$/;"	f
*show-table*	/usr/share/guile/2.0/system/repl/command.scm	/^(define *show-table*$/;"	f
*sig*	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define *sig* #f)$/;"	f
*snarf-type*	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define *snarf-type* #f)$/;"	f
*sources-db*	/usr/share/guile/2.0/system/xref.scm	/^(define *sources-db* #f)$/;"	f
*tainted-modules*	/usr/share/guile/2.0/system/xref.scm	/^(define *tainted-modules* '())$/;"	f
*tainted-sources*	/usr/share/guile/2.0/system/xref.scm	/^(define *tainted-sources* '())$/;"	f
*this*	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define *this* (make-fluid))$/;"	f
*timer*	/usr/share/guile/2.0/web/server.scm	/^(define *timer* (gettimeofday))$/;"	f
*trap-states*	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define *trap-states* (make-weak-key-hash-table))$/;"	f
*undefined*	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define *undefined* ((@@ (oop goops) make-unbound)))$/;"	f
*uninitialized*	/usr/share/guile/2.0/ice-9/optargs.scm	/^(define *uninitialized* (list 'uninitialized))$/;"	f
*uninteresting-props*	/usr/share/guile/2.0/language/assembly/disassemble.scm	/^(define *uninteresting-props* '(name))$/;"	f
*unspecified*	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax *unspecified*$/;"	f
*usage*	/usr/share/guile/2.0/ice-9/command-line.scm	/^(define *usage*$/;"	f
*value-help-handlers*	/usr/share/guile/2.0/ice-9/session.scm	/^(define *value-help-handlers*$/;"	f
*value-history-enabled?*	/usr/share/guile/2.0/ice-9/history.scm	/^(define *value-history-enabled?* #f)$/;"	f
*version*	/usr/share/guile/2.0/system/repl/common.scm	/^(define *version*$/;"	f
*warranty*	/usr/share/guile/2.0/system/repl/common.scm	/^(define *warranty*$/;"	f
*writers*	/usr/share/guile/2.0/system/foreign.scm	/^(define *writers*$/;"	f
*xref-ignored-modules*	/usr/share/guile/2.0/system/xref.scm	/^(define *xref-ignored-modules* '((value-history)))$/;"	f
+	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (+ (a <string>) (b <string>))$/;"	f
+	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (+ (a <string>) b)$/;"	f
+	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (+ a (b <string>))$/;"	f
+	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (+ a b)$/;"	f
+	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander +$/;"	f
-	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (- a b)$/;"	f
-	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander -$/;"	f
->	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define-syntax-rule (-> (type arg ...))$/;"	f
->bool	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (->bool x) (not (not x)))$/;"	f
->boolean	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (->boolean x)$/;"	f
->int32	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (->int32 x)$/;"	f
->integer	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (->integer x)$/;"	f
->number	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (->number x)$/;"	f
->object	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (->object x)$/;"	f
->primitive	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (->primitive x)$/;"	f
->string	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (->string x)$/;"	f
->string	/usr/share/guile/2.0/system/repl/common.scm	/^(define (->string x)$/;"	f
->uint16	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (->uint16 x)$/;"	f
->uint32	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (->uint32 x)$/;"	f
/	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (\/ a b)$/;"	f
/	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander \/$/;"	f
:	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :$/;"	f
:-dispatch	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define :-dispatch$/;"	f
:-dispatch-ref	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define (:-dispatch-ref)$/;"	f
:-dispatch-set!	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define (:-dispatch-set! dispatch)$/;"	f
:char-range	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :char-range$/;"	f
:dispatched	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :dispatched$/;"	f
:do	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :do$/;"	f
:generator-proc	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :generator-proc$/;"	f
:integers	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :integers$/;"	f
:let	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :let$/;"	f
:list	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :list$/;"	f
:parallel	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :parallel$/;"	f
:parallel-1	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :parallel-1  ; used as $/;"	f
:port	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :port$/;"	f
:random-source	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define-record-type :random-source$/;"	f
:range	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :range$/;"	f
:real-range	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :real-range$/;"	f
:string	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :string$/;"	f
:until	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :until$/;"	f
:until-1	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :until-1$/;"	f
:vector	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :vector$/;"	f
:while	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :while$/;"	f
:while-1	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :while-1$/;"	f
:while-2	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax :while-2$/;"	f
<	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (< (a <string>) (b <string>))$/;"	f
<	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (< a b)$/;"	f
<=	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (<= (a <string>) (b <string>))$/;"	f
<=	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (<= a b)$/;"	f
<active-class>	/usr/share/guile/2.0/oop/goops/active-slot.scm	/^(define-class <active-class> (<class>))$/;"	f
<arity-info>	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define-record-type <arity-info>$/;"	f
<binding-info>	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define-record-type <binding-info>$/;"	f
<box>	/usr/share/guile/2.0/srfi/srfi-111.scm	/^(define-record-type <box>$/;"	f
<channel>	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-class <channel> ())$/;"	f
<composite-class>	/usr/share/guile/2.0/oop/goops/composite-slot.scm	/^(define-class <composite-class> (<class>))$/;"	f
<coop-repl-server>	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define-record-type <coop-repl-server>$/;"	f
<coop-repl>	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define-record-type <coop-repl>$/;"	f
<counter>	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define-record-type <counter>$/;"	f
<coverage-data>	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define-record-type <coverage-data>$/;"	f
<data-channel>	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-class <data-channel> (<channel>)$/;"	f
<debug>	/usr/share/guile/2.0/system/repl/debug.scm	/^(define-record <debug> frames index error-message for-trap?)$/;"	f
<environment>	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-class <environment> ()$/;"	f
<future>	/usr/share/guile/2.0/ice-9/futures.scm	/^(define-record-type <future>$/;"	f
<glil>	/usr/share/guile/2.0/language/glil.scm	/^(define-type (<glil> #:printer print-glil)$/;"	f
<header-decl>	/usr/share/guile/2.0/web/http.scm	/^(define-record-type <header-decl>$/;"	f
<http-server>	/usr/share/guile/2.0/web/server/http.scm	/^(define-record-type <http-server>$/;"	f
<inferior-fluid>	/usr/share/guile/2.0/system/base/types.scm	/^(define-record-type <inferior-fluid>$/;"	f
<inferior-object>	/usr/share/guile/2.0/system/base/types.scm	/^(define-record-type <inferior-object>$/;"	f
<inferior-struct>	/usr/share/guile/2.0/system/base/types.scm	/^(define-record-type <inferior-struct>$/;"	f
<js-array-object>	/usr/share/guile/2.0/language/ecmascript/array.scm	/^(define-class <js-array-object> (<js-object>)$/;"	f
<js-global-object>	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-class <js-global-object> (<js-module-object>))$/;"	f
<js-module-object>	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-class <js-module-object> (<js-object>)$/;"	f
<js-object>	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-class <js-object> ()$/;"	f
<js-program-wrapper>	/usr/share/guile/2.0/language/ecmascript/function.scm	/^(define-class <js-program-wrapper> (<js-object>))$/;"	f
<language>	/usr/share/guile/2.0/system/base/language.scm	/^(define-record\/keywords <language>$/;"	f
<memory-backend>	/usr/share/guile/2.0/system/base/types.scm	/^(define-record-type <memory-backend>$/;"	f
<object-info>	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-class <object-info> ()$/;"	f
<operand>	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define-record-type <operand>$/;"	f
<parameter>	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define <parameter>$/;"	f
<pipe-info>	/usr/share/guile/2.0/ice-9/popen.scm	/^(define-record-type <pipe-info>$/;"	f
<poll-set>	/usr/share/guile/2.0/ice-9/poll.scm	/^(define-record-type <poll-set>$/;"	f
<port-channel>	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-class <port-channel> (<channel>)$/;"	f
<reference-graph>	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define-record-type <reference-graph>$/;"	f
<repl>	/usr/share/guile/2.0/system/repl/common.scm	/^(define-record\/keywords <repl>$/;"	f
<request>	/usr/share/guile/2.0/web/request.scm	/^(define-record-type <request>$/;"	f
<response>	/usr/share/guile/2.0/web/response.scm	/^(define-record-type <response>$/;"	f
<stringbuf>	/usr/share/guile/2.0/system/base/types.scm	/^(define-record-type <stringbuf>$/;"	f
<timer-channel>	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-class <timer-channel> (<channel>))$/;"	f
<toplevel-info>	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define-record-type <toplevel-info>$/;"	f
<trap-state>	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define-record <trap-state>$/;"	f
<trap-wrapper>	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define-record <trap-wrapper>$/;"	f
<tree-analysis>	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define-record-type <tree-analysis>$/;"	f
<tree-il>	/usr/share/guile/2.0/language/tree-il.scm	/^(define-type (<tree-il> #:common-slots (src) #:printer print-tree-il)$/;"	f
<uri>	/usr/share/guile/2.0/web/uri.scm	/^(define-record-type <uri>$/;"	f
<var>	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define-record-type <var>$/;"	f
<variable-cache-cell>	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define-record <variable-cache-cell> key)$/;"	f
<vlist>	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-record-type <vlist>$/;"	f
<warning-type>	/usr/share/guile/2.0/system/base/message.scm	/^(define-record-type <warning-type>$/;"	f
>	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (> (a <string>) (b <string>))$/;"	f
>	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (> a b)$/;"	f
>=	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (>= (a <string>) (b <string>))$/;"	f
>=	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (>= a b)$/;"	f
>>	/usr/share/guile/2.0/scripts/use2dot.scm	/^(define (>> edges)$/;"	f
>>body	/usr/share/guile/2.0/scripts/use2dot.scm	/^(define (>>body edges)$/;"	f
>>checks	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define (>>checks forms)$/;"	f
>>footer	/usr/share/guile/2.0/scripts/use2dot.scm	/^(define (>>footer)$/;"	f
>>header	/usr/share/guile/2.0/scripts/use2dot.scm	/^(define (>>header)$/;"	f
>>program	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define (>>program module progs)$/;"	f
>>programs	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define (>>programs programs)$/;"	f
>>strong	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define (>>strong modules)$/;"	f
>>summary	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define (>>summary)$/;"	f
>>weak	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define (>>weak weak-edges)$/;"	f
?	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (? (ch <data-channel>))$/;"	f
?	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (? (ch <port-channel>))$/;"	f
?	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (? (ch <timer-channel>) (t <integer>))$/;"	f
?	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (? (ch <timer-channel>))$/;"	f
??	/usr/share/guile/2.0/scripts/read-text-outline.scm	/^(define (?? symbol)$/;"	f
??-predicates	/usr/share/guile/2.0/scripts/read-text-outline.scm	/^(define (??-predicates pair)$/;"	f
@bind	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define-syntax @bind$/;"	f
@impl	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define-syntax-rule (@impl sym arg ...)$/;"	f
@implv	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define-syntax-rule (@implv sym)$/;"	f
OPEN_BOTH	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define OPEN_BOTH "r+")$/;"	f
OPEN_READ	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define OPEN_READ "r")$/;"	f
OPEN_WRITE	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define OPEN_WRITE "w")$/;"	f
SRV:send-reply	/usr/share/guile/2.0/sxml/transform.scm	/^(define (SRV:send-reply . fragments)$/;"	f
SRV:send-reply	/usr/share/guile/2.0/sxml/upstream/SXML-tree-trans.scm	/^(define (SRV:send-reply . fragments)$/;"	f
SSAX:XML->SXML	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define SSAX:XML->SXML ssax:xml->sxml)$/;"	f
THIS-MODULE	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define THIS-MODULE (current-module))$/;"	f
_	/usr/share/guile/2.0/ice-9/command-line.scm	/^(define _ gettext)$/;"	f
abandoned-mutex-exception	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define abandoned-mutex-exception (list 'abandoned-mutex-exception))$/;"	f
abandoned-mutex-exception?	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (abandoned-mutex-exception? obj) (eq? obj abandoned-mutex-exception))$/;"	f
abort	/usr/share/guile/2.0/ice-9/control.scm	/^(define (abort . args)$/;"	f
abort-counter	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (abort-counter c)$/;"	f
abort-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define abort-hook (make-hook))$/;"	f
abort-on-error	/usr/share/guile/2.0/system/repl/repl.scm	/^(define-syntax-rule (abort-on-error string exp)$/;"	f
abort-to-prompt	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (abort-to-prompt tag . args)$/;"	f
abs?	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define (abs? filename)$/;"	f
absolute-file-name?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (absolute-file-name? file-name)$/;"	f
absolute-uri?	/usr/share/guile/2.0/web/uri.scm	/^(define (absolute-uri? obj)$/;"	f
accept	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor accept '())$/;"	f
accept-charset	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor accept-charset '())$/;"	f
accept-encoding	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor accept-encoding '())$/;"	f
accept-language	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor accept-language '())$/;"	f
accept-ranges	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor accept-ranges #f)$/;"	f
access-for-each	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (access-for-each proc class)$/;"	f
access-variable	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (access-variable loc$/;"	f
accessor-method-slot-definition	/usr/share/guile/2.0/oop/goops.scm	/^(define (accessor-method-slot-definition obj)$/;"	f
accessor-primitive?	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define (accessor-primitive? prim)$/;"	f
accumulate-time	/usr/share/guile/2.0/statprof.scm	/^(define-macro (accumulate-time stop-time)$/;"	f
accumulated-time	/usr/share/guile/2.0/statprof.scm	/^(define accumulated-time #f)            ; total so far.$/;"	f
acons	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander acons (x y z)$/;"	f
activate-readline	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-public (activate-readline)$/;"	f
adapt-response-version	/usr/share/guile/2.0/web/response.scm	/^(define (adapt-response-version response version)$/;"	f
add-callees	/usr/share/guile/2.0/system/xref.scm	/^(define (add-callees callees mod-name)$/;"	f
add-caller	/usr/share/guile/2.0/system/xref.scm	/^(define (add-caller callee caller mod-name)$/;"	f
add-control	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define (add-control chr)$/;"	f
add-duration	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (add-duration t duration)$/;"	f
add-duration!	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (add-duration! t duration)$/;"	f
add-ephemeral-stepping-trap!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (add-ephemeral-stepping-trap! frame handler$/;"	f
add-ephemeral-trap-at-frame-finish!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (add-ephemeral-trap-at-frame-finish! frame handler$/;"	f
add-group-name!	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define (add-group-name! x name)$/;"	f
add-interesting-primitive!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define (add-interesting-primitive! name)$/;"	f
add-meta-command!	/usr/share/guile/2.0/system/repl/command.scm	/^(define (add-meta-command! name category proc argument-reader)$/;"	f
add-method!	/usr/share/guile/2.0/oop/goops.scm	/^(define-generic add-method!)$/;"	f
add-method!	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (add-method! (pg <primitive-generic>) (m <method>))$/;"	f
add-method!	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (add-method! (proc <procedure>) (m <method>))$/;"	f
add-method!	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (add-method! obj (m <method>))$/;"	f
add-method-in-classes!	/usr/share/guile/2.0/oop/goops.scm	/^(define (add-method-in-classes! m)$/;"	f
add-monetary-sign+currency	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define (add-monetary-sign+currency amount figure intl? locale)$/;"	f
add-name-help-handler!	/usr/share/guile/2.0/ice-9/session.scm	/^(define (add-name-help-handler! proc)$/;"	f
add-open-socket!	/usr/share/guile/2.0/system/repl/server.scm	/^(define (add-open-socket! s force-close)$/;"	f
add-patcher!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (add-patcher! patcher env)$/;"	f
add-props	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define (add-props object . args)$/;"	f
add-ref-resolver!	/usr/share/guile/2.0/texinfo/html.scm	/^(define (add-ref-resolver! proc)$/;"	f
add-source	/usr/share/guile/2.0/system/xref.scm	/^(define (add-source proc file line db)$/;"	f
add-sources	/usr/share/guile/2.0/system/xref.scm	/^(define (add-sources proc mod-name db)$/;"	f
add-to-load-path	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (add-to-load-path elt)$/;"	f
add-trace-at-procedure-call!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (add-trace-at-procedure-call! proc$/;"	f
add-trap!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (add-trap! trap name #:optional (trap-state (the-trap-state)))$/;"	f
add-trap-at-procedure-call!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (add-trap-at-procedure-call! proc #:optional (trap-state (the-trap-state)))$/;"	f
add-trap-at-source-location!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (add-trap-at-source-location! file user-line$/;"	f
add-trap-wrapper!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (add-trap-wrapper! trap-state wrapper)$/;"	f
add-value-help-handler!	/usr/share/guile/2.0/ice-9/session.scm	/^(define (add-value-help-handler! proc)$/;"	f
addr+	/usr/share/guile/2.0/language/assembly.scm	/^(define (addr+ addr code)$/;"	f
address->inferior-struct	/usr/share/guile/2.0/system/base/types.scm	/^(define (address->inferior-struct address vtable-data-address backend)$/;"	f
addrinfo:addr	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (addrinfo:addr obj) (vector-ref obj 4))$/;"	f
addrinfo:canonname	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (addrinfo:canonname obj) (vector-ref obj 5))$/;"	f
addrinfo:fam	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (addrinfo:fam obj) (vector-ref obj 1))$/;"	f
addrinfo:flags	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (addrinfo:flags obj) (vector-ref obj 0))$/;"	f
addrinfo:protocol	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (addrinfo:protocol obj) (vector-ref obj 3))$/;"	f
addrinfo:socktype	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (addrinfo:socktype obj) (vector-ref obj 2))$/;"	f
adjoin	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (adjoin e l)$/;"	f
admin-mutex	/usr/share/guile/2.0/ice-9/serialize.scm	/^(define admin-mutex (make-mutex))$/;"	f
aft-ofs!	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define aft-ofs! (record-modifier gap-buffer 'aft-ofs))$/;"	f
aft-ofs:	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define aft-ofs: (record-accessor gap-buffer 'aft-ofs))$/;"	f
after-backtrace-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define after-backtrace-hook (make-hook))$/;"	f
after-error-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define after-error-hook (make-hook))$/;"	f
after-eval-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define after-eval-hook (make-hook 1))$/;"	f
after-print-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define after-print-hook (make-hook 1))$/;"	f
after-read-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define after-read-hook (make-hook))$/;"	f
age	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor age #f)$/;"	f
align	/usr/share/guile/2.0/system/foreign.scm	/^(define (align off alignment)$/;"	f
align-block	/usr/share/guile/2.0/language/assembly.scm	/^(define (align-block addr)$/;"	f
align-code	/usr/share/guile/2.0/language/assembly.scm	/^(define (align-code code addr alignment header-len)$/;"	f
align-program	/usr/share/guile/2.0/language/assembly.scm	/^(define (align-program prog addr)$/;"	f
alist->hash-table	/usr/share/guile/2.0/ice-9/hash-table.scm	/^(define-alist-converter alist->hash-table hash-set!)$/;"	f
alist->hash-table	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (alist->hash-table alist . mht-args)$/;"	f
alist->hashq-table	/usr/share/guile/2.0/ice-9/hash-table.scm	/^(define-alist-converter alist->hashq-table hashq-set!)$/;"	f
alist->hashv-table	/usr/share/guile/2.0/ice-9/hash-table.scm	/^(define-alist-converter alist->hashv-table hashv-set!)$/;"	f
alist->hashx-table	/usr/share/guile/2.0/ice-9/hash-table.scm	/^(define (alist->hashx-table hash assoc alist)$/;"	f
alist->vhash	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define* (alist->vhash alist #:optional (hash hash))$/;"	f
alist-cons	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define alist-cons acons)$/;"	f
alist-copy	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (alist-copy alist)$/;"	f
alist-delete	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define* (alist-delete key alist #:optional (k= equal?))$/;"	f
alist-delete!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define* (alist-delete! key alist #:optional (k= equal?))$/;"	f
all-sz!	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define all-sz!  (record-modifier gap-buffer 'all-sz))$/;"	f
all-sz:	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define all-sz:  (record-accessor gap-buffer 'all-sz))$/;"	f
allocate-instance	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (allocate-instance (class <class>) initargs)$/;"	f
allow	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor allow '())$/;"	f
allow	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor allow '())$/;"	f
alt	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-syntax alt$/;"	f
always-lexical	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define always-lexical (make-fluid))$/;"	f
analyze-identifiers	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define (analyze-identifiers ids)$/;"	f
analyze-lexicals	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define (analyze-lexicals x)$/;"	f
analyze-tree	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define (analyze-tree analyses tree env)$/;"	f
and	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax and$/;"	f
and-let*	/usr/share/guile/2.0/ice-9/and-let-star.scm	/^(define-syntax and-let*$/;"	f
and-map	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (and-map f lst)$/;"	f
and=>	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (and=> value procedure)$/;"	f
and?	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (and? . args)$/;"	f
annotate!	/usr/share/guile/2.0/scripts/read-scheme-source.scm	/^(define (annotate! form note!)$/;"	f
any	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (any pred ls . lists)$/;"	f
any-bits-set?	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define any-bits-set? logtest)$/;"	f
any1	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (any1 pred ls)$/;"	f
any?-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax any?-ec$/;"	f
api-diff	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define (api-diff . args)$/;"	f
append-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax append-ec$/;"	f
append-map	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (append-map f clist1 . rest)$/;"	f
append-map!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (append-map! f clist1 . rest)$/;"	f
apply	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (apply fun . args)$/;"	f
apply	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander apply (f a0 . args)$/;"	f
apply-generic	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (apply-generic (gf <generic>) args)$/;"	f
apply-method	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (apply-method (gf <generic>) methods build-next args)$/;"	f
apply-methods	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (apply-methods (gf <generic>) (l <list>) args)$/;"	f
apply-templates	/usr/share/guile/2.0/sxml/apply-templates.scm	/^(define (apply-templates tree templates)$/;"	f
apply-to-args	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (apply-to-args args fn)$/;"	f
apropos	/usr/share/guile/2.0/ice-9/session.scm	/^(define (apropos rgx . options)$/;"	f
apropos	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (apropos repl regexp)$/;"	f
apropos-completion-function	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-public apropos-completion-function$/;"	f
apropos-fold	/usr/share/guile/2.0/ice-9/session.scm	/^(define (apropos-fold proc init rgx folder)$/;"	f
apropos-fold-accessible	/usr/share/guile/2.0/ice-9/session.scm	/^(define (apropos-fold-accessible module)$/;"	f
apropos-fold-all	/usr/share/guile/2.0/ice-9/session.scm	/^(define apropos-fold-all$/;"	f
apropos-fold-exported	/usr/share/guile/2.0/ice-9/session.scm	/^(define apropos-fold-exported$/;"	f
apropos-hook	/usr/share/guile/2.0/ice-9/session.scm	/^(define apropos-hook (make-hook 2))$/;"	f
apropos-internal	/usr/share/guile/2.0/ice-9/session.scm	/^(define (apropos-internal rgx)$/;"	f
arg-check	/usr/share/guile/2.0/system/vm/traps.scm	/^(define-syntax arg-check$/;"	f
arg-ref	/usr/share/guile/2.0/texinfo/html.scm	/^(define (arg-ref key %-args)$/;"	f
arg-ref	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (arg-ref key %-args)$/;"	f
arg-req	/usr/share/guile/2.0/texinfo/html.scm	/^(define (arg-req key %-args)$/;"	f
arg-req	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (arg-req key %-args)$/;"	f
arglist->arguments-alist	/usr/share/guile/2.0/system/vm/program.scm	/^(define (arglist->arguments-alist arglist)$/;"	f
args-fold	/usr/share/guile/2.0/srfi/srfi-37.scm	/^(define (args-fold args options unrecognized-option-proc$/;"	f
arguments->attlist	/usr/share/guile/2.0/texinfo.scm	/^(define (arguments->attlist port args arg-names)$/;"	f
arguments-alist->lambda-list	/usr/share/guile/2.0/system/vm/program.scm	/^(define (arguments-alist->lambda-list arguments-alist)$/;"	f
arithmetic-shift	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define arithmetic-shift ash)$/;"	f
arity	/usr/share/guile/2.0/ice-9/session.scm	/^(define (arity obj)$/;"	f
arity->arguments-alist	/usr/share/guile/2.0/system/vm/program.scm	/^(define* (arity->arguments-alist prog arity$/;"	f
arity-analysis	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define arity-analysis$/;"	f
arity:allow-other-keys?	/usr/share/guile/2.0/system/vm/program.scm	/^(define (arity:allow-other-keys? a)$/;"	f
arity:end	/usr/share/guile/2.0/system/vm/program.scm	/^(define (arity:end a)$/;"	f
arity:kw	/usr/share/guile/2.0/system/vm/program.scm	/^(define (arity:kw a)$/;"	f
arity:nopt	/usr/share/guile/2.0/system/vm/program.scm	/^(define (arity:nopt a)$/;"	f
arity:nreq	/usr/share/guile/2.0/system/vm/program.scm	/^(define (arity:nreq a)$/;"	f
arity:rest?	/usr/share/guile/2.0/system/vm/program.scm	/^(define (arity:rest? a)$/;"	f
arity:start	/usr/share/guile/2.0/system/vm/program.scm	/^(define (arity:start a)$/;"	f
array-shape	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (array-shape a)$/;"	f
as-leaf	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define (as-leaf x)$/;"	f
ascii->char	/usr/share/guile/2.0/sxml/ssax.scm	/^(define ascii->char integer->char)$/;"	f
ascii->char	/usr/share/guile/2.0/sxml/ssax/input-parse.scm	/^(define ascii->char integer->char)$/;"	f
ascii-alnum-chars	/usr/share/guile/2.0/web/uri.scm	/^(define ascii-alnum-chars$/;"	f
assembly	/usr/share/guile/2.0/language/assembly/spec.scm	/^(define-language assembly$/;"	f
assembly->object	/usr/share/guile/2.0/language/assembly.scm	/^(define (assembly->object code)$/;"	f
assembly-pack	/usr/share/guile/2.0/language/assembly.scm	/^(define (assembly-pack code)$/;"	f
assembly-unpack	/usr/share/guile/2.0/language/assembly.scm	/^(define (assembly-unpack code)$/;"	f
assert	/usr/share/guile/2.0/sxml/upstream/assert.scm	/^(define-syntax assert$/;"	f
assert-curr-char	/usr/share/guile/2.0/sxml/upstream/input-parse.scm	/^(define-opt (assert-curr-char expected-chars comment$/;"	f
assert-load-verbosity	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (assert-load-verbosity v) (set! %load-verbosely v))$/;"	f
assert-nonneg-exact-integer	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define-syntax-rule (assert-nonneg-exact-integer k who)$/;"	f
assert-procedure	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define-syntax-rule (assert-procedure f who)$/;"	f
assert-repl-print-unspecified	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (assert-repl-print-unspecified v)$/;"	f
assert-repl-print-unspecified	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define (assert-repl-print-unspecified v) (set! scm-repl-print-unspecified v))$/;"	f
assert-repl-silence	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (assert-repl-silence v)$/;"	f
assert-repl-silence	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define (assert-repl-silence v) (set! scm-repl-silent v))$/;"	f
assert-repl-verbosity	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (assert-repl-verbosity v)$/;"	f
assert-repl-verbosity	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define (assert-repl-verbosity v) (set! scm-repl-verbose v))$/;"	f
assert-token	/usr/share/guile/2.0/texinfo.scm	/^(define (assert-token token kind name)$/;"	f
assert-valid-index	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define-syntax-rule (assert-valid-index i len who)$/;"	f
assert-valid-range	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define-syntax-rule (assert-valid-range start end len who)$/;"	f
assert-valid-start	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define-syntax-rule (assert-valid-start start len who)$/;"	f
assert-vector	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define-syntax-rule (assert-vector v who)$/;"	f
assert-vectors	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define-syntax-rule (assert-vectors vs who)$/;"	f
assert-vlist	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (assert-vlist val)$/;"	f
assq-proc	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (assq-proc proc alist)$/;"	f
assq-ref	/usr/share/guile/2.0/sxml/fold.scm	/^(define (assq-ref alist key default)$/;"	f
assq-values	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (assq-values val alist)$/;"	f
assure	/usr/share/guile/2.0/sxml/upstream/assert.scm	/^(define-syntax assure$/;"	f
atom?	/usr/share/guile/2.0/sxml/fold.scm	/^(define (atom? x)$/;"	f
attlist->alist	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (attlist->alist attlist) attlist)$/;"	f
attlist-add	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (attlist-add attlist name-value)$/;"	f
attlist-fold	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define attlist-fold fold)$/;"	f
attlist-null?	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define attlist-null? null?)$/;"	f
attlist-remove-top	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (attlist-remove-top attlist)$/;"	f
attribute->xml	/usr/share/guile/2.0/sxml/simple.scm	/^(define (attribute->xml attr value port)$/;"	f
attribute-value->xml	/usr/share/guile/2.0/sxml/simple.scm	/^(define (attribute-value->xml value port)$/;"	f
authority-pat	/usr/share/guile/2.0/web/uri.scm	/^(define authority-pat$/;"	f
authority-regexp	/usr/share/guile/2.0/web/uri.scm	/^(define authority-regexp$/;"	f
authorization	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor authorization #f)$/;"	f
autofrisk	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define (autofrisk . args)$/;"	f
autoload-done!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (autoload-done! p m)$/;"	f
autoload-done-or-in-progress?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (autoload-done-or-in-progress? p m)$/;"	f
autoload-in-progress!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (autoload-in-progress! p m)$/;"	f
autoload-info	/usr/share/guile/2.0/scripts/generate-autoload.scm	/^(define (autoload-info file)$/;"	f
autoloads-done	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define autoloads-done '((guile . guile)))$/;"	f
autoloads-in-progress	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define autoloads-in-progress '())$/;"	f
backtrace	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (backtrace repl #:optional count$/;"	f
bad-header	/usr/share/guile/2.0/web/http.scm	/^(define (bad-header sym val)$/;"	f
bad-header-component	/usr/share/guile/2.0/web/http.scm	/^(define (bad-header-component sym val)$/;"	f
bad-header-component-printer	/usr/share/guile/2.0/web/http.scm	/^(define (bad-header-component-printer port key args default-printer)$/;"	f
bad-header-printer	/usr/share/guile/2.0/web/http.scm	/^(define (bad-header-printer port key args default-printer)$/;"	f
bad-request	/usr/share/guile/2.0/web/http.scm	/^(define (bad-request message . args)$/;"	f
bad-request	/usr/share/guile/2.0/web/request.scm	/^(define (bad-request message . args)$/;"	f
bad-request	/usr/share/guile/2.0/web/server/http.scm	/^(define (bad-request port)$/;"	f
bad-request-printer	/usr/share/guile/2.0/web/request.scm	/^(define (bad-request-printer port key args default-printer)$/;"	f
bad-response	/usr/share/guile/2.0/web/http.scm	/^(define (bad-response message . args)$/;"	f
bad-response	/usr/share/guile/2.0/web/response.scm	/^(define (bad-response message . args)$/;"	f
bad-throw	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (bad-throw key . args)$/;"	f
bad-throw	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define (bad-throw key . args)$/;"	f
bailout-primitive?	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define (bailout-primitive? prim)$/;"	f
band	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define band logand)$/;"	f
bar	/usr/share/doc/guile-2.0-dev/examples/modules/module-0.scm	/^(define (bar)$/;"	f
bar	/usr/share/doc/guile-2.0-dev/examples/modules/module-1.scm	/^(define (bar)$/;"	f
bar	/usr/share/doc/guile-2.0-dev/examples/modules/module-2.scm	/^(define (bar)$/;"	f
basic-escape-codes	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define basic-escape-codes$/;"	f
batch-mode?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (batch-mode?)$/;"	f
beautify-user-module!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (beautify-user-module! module)$/;"	f
before-backtrace-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define before-backtrace-hook (make-hook))$/;"	f
before-error-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define before-error-hook (make-hook))$/;"	f
before-eval-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define before-eval-hook (make-hook 1))$/;"	f
before-print-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define before-print-hook (make-hook 1))$/;"	f
before-read-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define before-read-hook (make-hook))$/;"	f
begin-arity	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (begin-arity end start nreq nopt rest kw arities)$/;"	f
begin-deprecated	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax begin-deprecated$/;"	f
begin-multiline	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define (begin-multiline)$/;"	f
begin-thread	/usr/share/guile/2.0/ice-9/threads.scm	/^(define-syntax-rule (begin-thread e0 e1 ...)$/;"	f
begin0	/usr/share/guile/2.0/sxml/ssax.scm	/^(define-syntax begin0$/;"	f
binary-port?	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (binary-port? port)$/;"	f
bind-arg-lexical?	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (bind-arg-lexical? arg)$/;"	f
bind-lexically?	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (bind-lexically? sym module)$/;"	f
binding	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (binding (info <boolean>))$/;"	f
binding	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (binding o env)$/;"	f
binding	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (binding repl)$/;"	f
binding-name	/usr/share/guile/2.0/oop/goops/save.scm	/^(define binding-name car)$/;"	f
binding-object	/usr/share/guile/2.0/oop/goops/save.scm	/^(define binding-object cdr)$/;"	f
binding:boxed?	/usr/share/guile/2.0/system/vm/program.scm	/^(define (binding:boxed? b) (list-ref b 1))$/;"	f
binding:end	/usr/share/guile/2.0/system/vm/program.scm	/^(define (binding:end b) (list-ref b 4))$/;"	f
binding:index	/usr/share/guile/2.0/system/vm/program.scm	/^(define (binding:index b) (list-ref b 2))$/;"	f
binding:name	/usr/share/guile/2.0/system/vm/program.scm	/^(define (binding:name b) (list-ref b 0))$/;"	f
binding:start	/usr/share/guile/2.0/system/vm/program.scm	/^(define (binding:start b) (list-ref b 3))$/;"	f
binding?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define binding? binding)$/;"	f
bindings-data	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define bindings-data (make-fluid))$/;"	f
bindings-type	/usr/share/guile/2.0/language/elisp/bindings.scm	/^(define bindings-type$/;"	f
bior	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define bior logior)$/;"	f
bit-count	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define bit-count logcount)$/;"	f
bit-field	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define bit-field bit-extract)$/;"	f
bit-set?	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define bit-set? logbit?)$/;"	f
bitwise-and	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define bitwise-and logand)$/;"	f
bitwise-if	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define (bitwise-if mask n0 n1)$/;"	f
bitwise-ior	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define bitwise-ior logior)$/;"	f
bitwise-merge	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define bitwise-merge bitwise-if)$/;"	f
bitwise-not	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define bitwise-not lognot)$/;"	f
bitwise-not	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define bitwise-not lognot)$/;"	f
bitwise-xor	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define bitwise-xor logxor)$/;"	f
block-append!	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (block-append! block value offset)$/;"	f
block-base	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-block-accessor block-base 1)$/;"	f
block-cons	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (block-cons item vlist hash-tab?)$/;"	f
block-content	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-block-accessor block-content 0)$/;"	f
block-growth-factor	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define block-growth-factor$/;"	f
block-hash-table-add!	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (block-hash-table-add! content size khash offset)$/;"	f
block-hash-table-next-offset	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (block-hash-table-next-offset content size offset)$/;"	f
block-hash-table-ref	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (block-hash-table-ref content size khash)$/;"	f
block-hash-table-set!	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (block-hash-table-set! content size khash offset)$/;"	f
block-hash-table-set-next-offset!	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (block-hash-table-set-next-offset! content size offset$/;"	f
block-hash-table?	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (block-hash-table? block)$/;"	f
block-next-free	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-block-accessor block-next-free 4)$/;"	f
block-null	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define block-null$/;"	f
block-offset	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-block-accessor block-offset 2)$/;"	f
block-ref	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (block-ref content offset)$/;"	f
block-size	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-block-accessor block-size 3)$/;"	f
boolean-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define (boolean-compare x y)$/;"	f
boolean-valued-expression?	/usr/share/guile/2.0/language/tree-il/cse.scm	/^(define (boolean-valued-expression? x ctx)$/;"	f
boolean-valued-primitive?	/usr/share/guile/2.0/language/tree-il/cse.scm	/^(define (boolean-valued-primitive? primitive)$/;"	f
borrow-core-vtables	/usr/share/guile/2.0/language/tree-il.scm	/^(define-syntax borrow-core-vtables$/;"	f
bound-check-get	/usr/share/guile/2.0/oop/goops.scm	/^(define-standard-accessor-method ((bound-check-get n) o)$/;"	f
bound-identifier=?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define bound-identifier=? #f)$/;"	f
box-map	/usr/share/doc/guile-2.0-dev/examples/box-dynamic-module/box-mixed.scm	/^(define (box-map func lst)$/;"	f
box-mixed	/usr/share/doc/guile-2.0-dev/examples/box-dynamic-module/box-mixed.scm	/^(define-module (box-mixed))$/;"	f
box-module	/usr/share/doc/guile-2.0-dev/examples/box-dynamic-module/box-module.scm	/^(define-module (box-module))$/;"	f
br-instruction?	/usr/share/guile/2.0/language/assembly/decompile-bytecode.scm	/^(define (br-instruction? x)$/;"	f
br-nargs-instruction?	/usr/share/guile/2.0/language/assembly/decompile-bytecode.scm	/^(define (br-nargs-instruction? x)$/;"	f
brainfuck	/usr/share/guile/2.0/language/brainfuck/spec.scm	/^(define-language brainfuck$/;"	f
braz	/usr/share/doc/guile-2.0-dev/examples/modules/module-2.scm	/^(define (braz)$/;"	f
break	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (break pred clist)$/;"	f
break	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (break repl (form))$/;"	f
break!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (break! pred list)$/;"	f
break-at-source	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (break-at-source repl file line)$/;"	f
buffer-mode	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define-enumeration buffer-mode$/;"	f
buffer-mode?	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (buffer-mode? symbol)$/;"	f
buffered-input-continuation?	/usr/share/guile/2.0/ice-9/buffered-input.scm	/^(define buffered-input-continuation? (make-object-property))$/;"	f
build-assigned-var-table	/usr/share/guile/2.0/language/tree-il/cse.scm	/^(define* (build-assigned-var-table exp #:optional (table vlist-null))$/;"	f
build-constant-store	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (build-constant-store x)$/;"	f
build-constraints	/usr/share/guile/2.0/oop/goops.scm	/^(define (build-constraints get-follow-ons)$/;"	f
build-object-table	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (build-object-table x)$/;"	f
build-options-lookup	/usr/share/guile/2.0/srfi/srfi-37.scm	/^(define (build-options-lookup options)$/;"	f
build-prefix	/usr/share/guile/2.0/system/vm/trace.scm	/^(define (build-prefix prefix depth infix numeric-format max-indent)$/;"	f
build-request	/usr/share/guile/2.0/web/request.scm	/^(define* (build-request uri #:key (method 'GET) (version '(1 . 1))$/;"	f
build-response	/usr/share/guile/2.0/web/response.scm	/^(define* (build-response #:key (version '(1 . 1)) (code 200) reason-phrase$/;"	f
build-transitive-closure	/usr/share/guile/2.0/oop/goops.scm	/^(define (build-transitive-closure get-follow-ons)$/;"	f
build-uri	/usr/share/guile/2.0/web/uri.scm	/^(define* (build-uri scheme #:key userinfo host port (path "") query fragment$/;"	f
build-var-table	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define* (build-var-table exp #:optional (table vlist-null))$/;"	f
built-in-func	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define-syntax built-in-func$/;"	f
built-in-macro	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define-syntax built-in-macro$/;"	f
butlast	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (butlast lst n)$/;"	f
bxor	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define bxor logxor)$/;"	f
byte-length	/usr/share/guile/2.0/language/assembly.scm	/^(define (byte-length assembly)$/;"	f
bytecode	/usr/share/guile/2.0/language/bytecode/spec.scm	/^(define-language bytecode$/;"	f
bytecode-instruction-length	/usr/share/guile/2.0/system/vm/program.scm	/^(define (bytecode-instruction-length bytecode ip)$/;"	f
bytes->s24	/usr/share/guile/2.0/language/assembly/decompile-bytecode.scm	/^(define (bytes->s24 a b c)$/;"	f
bytevector->string	/usr/share/guile/2.0/ice-9/iconv.scm	/^(define* (bytevector->string bv encoding$/;"	f
bytevector-c32-native-ref	/usr/share/guile/2.0/srfi/srfi-4/gnu.scm	/^(define (bytevector-c32-native-ref v i)$/;"	f
bytevector-c32-native-set!	/usr/share/guile/2.0/srfi/srfi-4/gnu.scm	/^(define (bytevector-c32-native-set! v i x)$/;"	f
bytevector-c64-native-ref	/usr/share/guile/2.0/srfi/srfi-4/gnu.scm	/^(define (bytevector-c64-native-ref v i)$/;"	f
bytevector-c64-native-set!	/usr/share/guile/2.0/srfi/srfi-4/gnu.scm	/^(define (bytevector-c64-native-set! v i x)$/;"	f
bytevector-pointer-ref	/usr/share/guile/2.0/system/foreign.scm	/^(define bytevector-pointer-ref$/;"	f
bytevector-pointer-set!	/usr/share/guile/2.0/system/foreign.scm	/^(define bytevector-pointer-set!$/;"	f
c-list	/usr/share/guile/2.0/srfi/srfi-9/gnu.scm	/^(define-syntax c-list$/;"	f
c-same-type-check	/usr/share/guile/2.0/srfi/srfi-9/gnu.scm	/^(define-syntax c-same-type-check$/;"	f
caaaar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander caaaar (x) (car (car (car (car x)))))$/;"	f
caaaar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define caaaar$/;"	f
caaadr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander caaadr (x) (car (car (car (cdr x)))))$/;"	f
caaadr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define caaadr$/;"	f
caaar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander caaar (x) (car (car (car x))))$/;"	f
caaar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define caaar$/;"	f
caadar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander caadar (x) (car (car (cdr (car x)))))$/;"	f
caadar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define caadar$/;"	f
caaddr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander caaddr (x) (car (car (cdr (cdr x)))))$/;"	f
caaddr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define caaddr$/;"	f
caadr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander caadr (x) (car (car (cdr x))))$/;"	f
caadr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define caadr$/;"	f
caar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander caar (x) (car (car x)))$/;"	f
caar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define caar$/;"	f
cache-control	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor cache-control '())$/;"	f
cache-control	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor cache-control '())$/;"	f
cache-dispatch	/usr/share/guile/2.0/oop/goops/dispatch.scm	/^(define (cache-dispatch gf args)$/;"	f
cache-miss	/usr/share/guile/2.0/oop/goops/dispatch.scm	/^(define (cache-miss gf args)$/;"	f
cadaar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cadaar (x) (car (cdr (car (car x)))))$/;"	f
cadaar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cadaar$/;"	f
cadadr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cadadr (x) (car (cdr (car (cdr x)))))$/;"	f
cadadr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cadadr$/;"	f
cadar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cadar (x) (car (cdr (car x))))$/;"	f
cadar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cadar$/;"	f
caddar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander caddar (x) (car (cdr (cdr (car x)))))$/;"	f
caddar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define caddar$/;"	f
cadddr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cadddr (x) (car (cdr (cdr (cdr x)))))$/;"	f
cadddr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cadddr$/;"	f
caddr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander caddr (x) (car (cdr (cdr x))))$/;"	f
caddr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define caddr$/;"	f
cadr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cadr (x) (car (cdr x)))$/;"	f
cadr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cadr$/;"	f
calculate-n-specialized	/usr/share/guile/2.0/oop/goops.scm	/^(define (calculate-n-specialized gf)$/;"	f
call-data-call-count	/usr/share/guile/2.0/statprof.scm	/^(define (call-data-call-count cd) (vector-ref cd 1))$/;"	f
call-data-cum-sample-count	/usr/share/guile/2.0/statprof.scm	/^(define (call-data-cum-sample-count cd) (vector-ref cd 2))$/;"	f
call-data-name	/usr/share/guile/2.0/statprof.scm	/^(define (call-data-name cd) (procedure-name (call-data-proc cd)))$/;"	f
call-data-printable	/usr/share/guile/2.0/statprof.scm	/^(define (call-data-printable cd)$/;"	f
call-data-proc	/usr/share/guile/2.0/statprof.scm	/^(define (call-data-proc cd) (vector-ref cd 0))$/;"	f
call-data-self-sample-count	/usr/share/guile/2.0/statprof.scm	/^(define (call-data-self-sample-count cd) (vector-ref cd 3))$/;"	f
call-once	/usr/share/guile/2.0/system/base/compile.scm	/^(define (call-once thunk)$/;"	f
call-primitive	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (call-primitive loc sym . args)$/;"	f
call-with-bytevector-output-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define* (call-with-bytevector-output-port proc #:optional (transcoder #f))$/;"	f
call-with-current-continuation	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (call-with-current-continuation proc)$/;"	f
call-with-current-continuation	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander call-with-current-continuation (proc)$/;"	f
call-with-deferred-observers	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (call-with-deferred-observers thunk)$/;"	f
call-with-encoded-output-string	/usr/share/guile/2.0/ice-9/iconv.scm	/^(define* (call-with-encoded-output-string encoding proc$/;"	f
call-with-encoded-output-string	/usr/share/guile/2.0/web/uri.scm	/^(define (call-with-encoded-output-string encoding proc)$/;"	f
call-with-error-handling	/usr/share/guile/2.0/system/repl/error-handling.scm	/^(define* (call-with-error-handling thunk #:key$/;"	f
call-with-escape-continuation	/usr/share/guile/2.0/ice-9/control.scm	/^(define (call-with-escape-continuation proc)$/;"	f
call-with-file-and-dir	/usr/share/guile/2.0/texinfo.scm	/^(define (call-with-file-and-dir filename proc)$/;"	f
call-with-input-file	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (call-with-input-file$/;"	f
call-with-input-file	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (call-with-input-file str proc)$/;"	f
call-with-output-bytevector*	/usr/share/guile/2.0/ice-9/iconv.scm	/^(define (call-with-output-bytevector* proc)$/;"	f
call-with-output-bytevector*	/usr/share/guile/2.0/web/uri.scm	/^(define (call-with-output-bytevector* proc)$/;"	f
call-with-output-file	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (call-with-output-file file proc #:key (binary #f) (encoding #f))$/;"	f
call-with-output-file	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (call-with-output-file str proc)$/;"	f
call-with-output-file/atomic	/usr/share/guile/2.0/system/base/compile.scm	/^(define* (call-with-output-file\/atomic filename proc #:optional reference)$/;"	f
call-with-output-string*	/usr/share/guile/2.0/ice-9/iconv.scm	/^(define (call-with-output-string* proc)$/;"	f
call-with-output-string*	/usr/share/guile/2.0/web/uri.scm	/^(define (call-with-output-string* proc)$/;"	f
call-with-parallelization	/usr/share/guile/2.0/ice-9/serialize.scm	/^(define (call-with-parallelization thunk)$/;"	f
call-with-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (call-with-port port proc)$/;"	f
call-with-prompt	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (call-with-prompt tag thunk handler)$/;"	f
call-with-serialization	/usr/share/guile/2.0/ice-9/serialize.scm	/^(define (call-with-serialization thunk)$/;"	f
call-with-sigint	/usr/share/guile/2.0/ice-9/top-repl.scm	/^(define call-with-sigint$/;"	f
call-with-sigint	/usr/share/guile/2.0/web/server.scm	/^(define call-with-sigint$/;"	f
call-with-string-output-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (call-with-string-output-port proc)$/;"	f
call-with-trace	/usr/share/guile/2.0/system/vm/trace.scm	/^(define* (call-with-trace thunk #:key (calls? #t) (instructions? #f) $/;"	f
call-with-values	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (call-with-values producer consumer)$/;"	f
call-with-values	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander call-with-values (producer consumer)$/;"	f
call/cc	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define call\/cc call-with-current-continuation)$/;"	f
call/cc	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander call\/cc (proc)$/;"	f
call/ec	/usr/share/guile/2.0/ice-9/control.scm	/^(define call\/ec call-with-escape-continuation)$/;"	f
call/this	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-macro (call\/this this f . args)$/;"	f
call/this*	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (call\/this* this f)$/;"	f
caller-with-default-size	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (caller-with-default-size hash-fn)$/;"	f
canonical-configuration	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define (canonical-configuration forms)$/;"	f
canonicalize!	/usr/share/guile/2.0/language/tree-il/canonicalize.scm	/^(define (canonicalize! x)$/;"	f
car	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define car$/;"	f
car*	/usr/share/guile/2.0/texinfo/html.scm	/^(define (car* x) (and x (car x)))$/;"	f
car+cdr	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (car+cdr x)$/;"	f
car-eq?	/usr/share/guile/2.0/texinfo.scm	/^(define (car-eq? x y) (and (pair? x) (eq? (car x) y)))$/;"	f
case	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax case$/;"	f
catch-bad-arguments	/usr/share/guile/2.0/system/vm/inspect.scm	/^(define (catch-bad-arguments thunk bad-args-thunk)$/;"	f
cause	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define-inlinable (cause effect)$/;"	f
causes-effects?	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define-inlinable (causes-effects? x effects)$/;"	f
cdaaar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cdaaar (x) (cdr (car (car (car x)))))$/;"	f
cdaaar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cdaaar$/;"	f
cdaadr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cdaadr (x) (cdr (car (car (cdr x)))))$/;"	f
cdaadr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cdaadr$/;"	f
cdaar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cdaar (x) (cdr (car (car x))))$/;"	f
cdaar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cdaar$/;"	f
cdadar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cdadar (x) (cdr (car (cdr (car x)))))$/;"	f
cdadar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cdadar$/;"	f
cdaddr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cdaddr (x) (cdr (car (cdr (cdr x)))))$/;"	f
cdaddr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cdaddr$/;"	f
cdadr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cdadr (x) (cdr (car (cdr x))))$/;"	f
cdadr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cdadr$/;"	f
cdar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cdar (x) (cdr (car x)))$/;"	f
cdar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cdar$/;"	f
cddaar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cddaar (x) (cdr (cdr (car (car x)))))$/;"	f
cddaar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cddaar$/;"	f
cddadr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cddadr (x) (cdr (cdr (car (cdr x)))))$/;"	f
cddadr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cddadr$/;"	f
cddar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cddar (x) (cdr (cdr (car x))))$/;"	f
cddar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cddar$/;"	f
cdddar	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cdddar (x) (cdr (cdr (cdr (car x)))))$/;"	f
cdddar	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cdddar$/;"	f
cddddr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cddddr (x) (cdr (cdr (cdr (cdr x)))))$/;"	f
cddddr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cddddr$/;"	f
cdddr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cdddr (x) (cdr (cdr (cdr x))))$/;"	f
cdddr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cdddr$/;"	f
cddr	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cddr (x) (cdr (cdr x)))$/;"	f
cddr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cddr$/;"	f
cdefine	/usr/share/guile/2.0/ice-9/curried-definitions.scm	/^(define-syntax cdefine$/;"	f
cdefine*	/usr/share/guile/2.0/ice-9/curried-definitions.scm	/^(define-syntax cdefine*$/;"	f
cdr	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define cdr$/;"	f
cell->object	/usr/share/guile/2.0/system/base/types.scm	/^(define* (cell->object address #:optional (backend %ffi-memory-backend))$/;"	f
center-string	/usr/share/guile/2.0/texinfo/string-utils.scm	/^(define* (center-string str #:optional (width 80) (chr #\\space) (rchr #f))$/;"	f
chained-comparison-expander	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define (chained-comparison-expander prim-name)$/;"	f
change-class	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (change-class (old-instance <object>) (new-class <class>))$/;"	f
change-object-class	/usr/share/guile/2.0/oop/goops.scm	/^(define (change-object-class old-instance old-class new-class)$/;"	f
channel-open	/usr/share/guile/2.0/ice-9/channel.scm	/^(define (channel-open ch)$/;"	f
channel-print-token	/usr/share/guile/2.0/ice-9/channel.scm	/^(define (channel-print-token ch val)$/;"	f
channel-print-value	/usr/share/guile/2.0/ice-9/channel.scm	/^(define (channel-print-value ch val)$/;"	f
channel-printer	/usr/share/guile/2.0/ice-9/channel.scm	/^(define channel-printer (record-accessor channel-type 'printer))$/;"	f
channel-stdin	/usr/share/guile/2.0/ice-9/channel.scm	/^(define channel-stdin (record-accessor channel-type 'stdin))$/;"	f
channel-stdout	/usr/share/guile/2.0/ice-9/channel.scm	/^(define channel-stdout (record-accessor channel-type 'stdout))$/;"	f
channel-token-module	/usr/share/guile/2.0/ice-9/channel.scm	/^(define channel-token-module (record-accessor channel-type 'token-module))$/;"	f
channel-type	/usr/share/guile/2.0/ice-9/channel.scm	/^(define channel-type$/;"	f
channel:error	/usr/share/guile/2.0/ice-9/channel.scm	/^(define (channel:error port msg . args)$/;"	f
channel:prompt	/usr/share/guile/2.0/ice-9/channel.scm	/^(define (channel:prompt port)$/;"	f
chapter	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define chapter (make-underliner #\\*))$/;"	f
char->ascii	/usr/share/guile/2.0/sxml/ssax.scm	/^(define char->ascii char->integer)$/;"	f
char->ascii	/usr/share/guile/2.0/sxml/ssax/input-parse.scm	/^(define char->ascii char->integer)$/;"	f
char->int	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (char->int ch)$/;"	f
char-code-limit	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define char-code-limit 256)$/;"	f
char-hex?	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (char-hex? c)$/;"	f
char-newline	/usr/share/guile/2.0/sxml/ssax.scm	/^(define char-newline #\\newline)$/;"	f
char-newline	/usr/share/guile/2.0/sxml/ssax/input-parse.scm	/^(define char-newline #\\newline)$/;"	f
char-return	/usr/share/guile/2.0/sxml/ssax.scm	/^(define char-return #\\return)$/;"	f
char-return	/usr/share/guile/2.0/sxml/ssax/input-parse.scm	/^(define char-return #\\return)$/;"	f
char-tab	/usr/share/guile/2.0/sxml/ssax.scm	/^(define char-tab #\\tab)$/;"	f
charcode-escape	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define (charcode-escape port base digits early-return)$/;"	f
check-arg	/usr/share/guile/2.0/ice-9/rdelim.scm	/^(define-syntax-rule (check-arg exp message arg ...)$/;"	f
check-arg	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define-syntax-rule (check-arg pred arg caller)$/;"	f
check-arg-type	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (check-arg-type pred arg caller)$/;"	f
check-name	/usr/share/guile/2.0/sxml/simple.scm	/^(define check-name$/;"	f
choose-output-names	/usr/share/guile/2.0/language/scheme/decompile-tree-il.scm	/^(define choose-output-names$/;"	f
circular-define!	/usr/share/guile/2.0/language/elisp/parser.scm	/^(define (circular-define! token)$/;"	f
circular-definitions	/usr/share/guile/2.0/language/elisp/parser.scm	/^(define circular-definitions (make-fluid))$/;"	f
circular-list	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (circular-list elt1 . elts)$/;"	f
circular-list?	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (circular-list? x)$/;"	f
circular-ref	/usr/share/guile/2.0/language/elisp/parser.scm	/^(define (circular-ref token)$/;"	f
ck	/usr/share/guile/2.0/system/base/ck.scm	/^(define-syntax ck$/;"	f
ck-arg	/usr/share/guile/2.0/system/base/ck.scm	/^(define-syntax ck-arg$/;"	f
class	/usr/share/guile/2.0/oop/goops.scm	/^(define-macro (class supers . slots)$/;"	f
class-methods	/usr/share/guile/2.0/oop/goops.scm	/^(define (class-methods c)$/;"	f
class-redefinition	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (class-redefinition (old <class>) (new <class>))$/;"	f
class-slot-definition	/usr/share/guile/2.0/oop/goops.scm	/^(define (class-slot-definition class slot-name)$/;"	f
class-slot-g-n-s	/usr/share/guile/2.0/oop/goops.scm	/^(define (class-slot-g-n-s class slot-name)$/;"	f
class-slot-ref	/usr/share/guile/2.0/oop/goops.scm	/^(define (class-slot-ref class slot)$/;"	f
class-slot-set!	/usr/share/guile/2.0/oop/goops.scm	/^(define (class-slot-set! class slot value)$/;"	f
class-subclasses	/usr/share/guile/2.0/oop/goops.scm	/^(define (class-subclasses c)$/;"	f
clean	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define (clean name)$/;"	f
clear-value-history!	/usr/share/guile/2.0/ice-9/history.scm	/^(define (clear-value-history!)$/;"	f
close-all-bindings	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (close-all-bindings bindings end)$/;"	f
close-arity	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (close-arity addr arities)$/;"	f
close-binding	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (close-binding bindings end)$/;"	f
close-io-port	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (close-io-port port)$/;"	f
close-pipe	/usr/share/guile/2.0/ice-9/popen.scm	/^(define (close-pipe p)$/;"	f
close-process	/usr/share/guile/2.0/ice-9/popen.scm	/^(define (close-process port pid)$/;"	f
close-server	/usr/share/guile/2.0/web/server.scm	/^(define (close-server impl server)$/;"	f
close-socket!	/usr/share/guile/2.0/system/repl/server.scm	/^(define (close-socket! s)$/;"	f
closed-over-procedures	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (closed-over-procedures proc)$/;"	f
closest-source-line	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (closest-source-line sources ip)$/;"	f
closure?	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (closure? x)$/;"	f
clump	/usr/share/guile/2.0/scripts/read-scheme-source.scm	/^(define (clump forms)$/;"	f
code	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (code tag . body)$/;"	f
code->reason-phrase	/usr/share/guile/2.0/web/response.scm	/^(define (code->reason-phrase code)$/;"	f
code-alignment	/usr/share/guile/2.0/language/assembly.scm	/^(define (code-alignment addr alignment header-len)$/;"	f
code-annotation	/usr/share/guile/2.0/language/assembly/disassemble.scm	/^(define (code-annotation end-addr code objs nargs blocs labels)$/;"	f
collapse-locals	/usr/share/guile/2.0/language/objcode/spec.scm	/^(define (collapse-locals locs)$/;"	f
collapse-locals	/usr/share/guile/2.0/system/vm/program.scm	/^(define (collapse-locals locs)$/;"	f
collate-set-field-specs	/usr/share/guile/2.0/srfi/srfi-9/gnu.scm	/^(define (collate-set-field-specs specs)$/;"	f
collect	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define-syntax collect$/;"	f
collect-escaped-string	/usr/share/guile/2.0/web/http.scm	/^(define (collect-escaped-string from start len escapes)$/;"	f
combine-locations	/usr/share/guile/2.0/system/base/lalr.upstream.scm	/^(define (combine-locations src-location-1 src-location-2)$/;"	f
command-abbrevs	/usr/share/guile/2.0/system/repl/command.scm	/^(define (command-abbrevs c) (cdr c))$/;"	f
command-depths	/usr/share/guile/2.0/texinfo.scm	/^(define command-depths$/;"	f
command-doc	/usr/share/guile/2.0/system/repl/command.scm	/^(define (command-doc c) (procedure-documentation (command-procedure c)))$/;"	f
command-info	/usr/share/guile/2.0/system/repl/command.scm	/^(define (command-info c) (hashq-ref *command-infos* (command-name c)))$/;"	f
command-info-arguments-reader	/usr/share/guile/2.0/system/repl/command.scm	/^(define (command-info-arguments-reader info)$/;"	f
command-info-procedure	/usr/share/guile/2.0/system/repl/command.scm	/^(define (command-info-procedure info)$/;"	f
command-line	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (command-line) (program-arguments))$/;"	f
command-name	/usr/share/guile/2.0/system/repl/command.scm	/^(define (command-name c) (car c))$/;"	f
command-procedure	/usr/share/guile/2.0/system/repl/command.scm	/^(define (command-procedure c) (command-info-procedure (command-info c)))$/;"	f
command-spec	/usr/share/guile/2.0/texinfo.scm	/^(define (command-spec command)$/;"	f
command-summary	/usr/share/guile/2.0/system/repl/command.scm	/^(define (command-summary c)$/;"	f
command-synopsis	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define command-synopsis$/;"	f
command-usage	/usr/share/guile/2.0/system/repl/command.scm	/^(define (command-usage c)$/;"	f
comp	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define (comp x e)$/;"	f
comp-body	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define (comp-body e body formals formal-syms)$/;"	f
compare-by<	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define compare-by<$/;"	f
compare-by<=	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define compare-by<=$/;"	f
compare-by=/<	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define compare-by=\/<$/;"	f
compare-by=/>	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define compare-by=\/>$/;"	f
compare-by>	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define compare-by>$/;"	f
compare-by>=	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define compare-by>=$/;"	f
compare:checked	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define (compare:checked result compare . args)$/;"	f
compare:define-by=/<	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax-rule (compare:define-by=\/< compare = < type? type-name)$/;"	f
compare:define-chain-rel?	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax-rule (compare:define-chain-rel? chain-rel? if-rel?)$/;"	f
compare:define-rel1/rel2?	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax-rule (compare:define-rel1\/rel2? rel1\/rel2? if-rel1? if-rel2?)$/;"	f
compare:define-rel?	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax-rule (compare:define-rel? rel? if-rel?)$/;"	f
compare:if-rel?	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax compare:if-rel?$/;"	f
compare:type-check	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax compare:type-check$/;"	f
compile	/usr/share/guile/2.0/scripts/compile.scm	/^(define (compile . args)$/;"	f
compile	/usr/share/guile/2.0/system/base/compile.scm	/^(define* (compile x #:key$/;"	f
compile	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (compile repl (form))$/;"	f
compile-and-load	/usr/share/guile/2.0/system/base/compile.scm	/^(define* (compile-and-load file #:key (from (current-language)) (to 'value)$/;"	f
compile-asm	/usr/share/guile/2.0/language/glil/spec.scm	/^(define (compile-asm x e opts)$/;"	f
compile-assembly	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (compile-assembly glil)$/;"	f
compile-body	/usr/share/guile/2.0/language/brainfuck/compile-scheme.scm	/^(define (compile-body instructions)$/;"	f
compile-body	/usr/share/guile/2.0/language/brainfuck/compile-tree-il.scm	/^(define (compile-body instructions)$/;"	f
compile-bytecode	/usr/share/guile/2.0/language/assembly/compile-bytecode.scm	/^(define (compile-bytecode assembly env . opts)$/;"	f
compile-expr	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (compile-expr expr)$/;"	f
compile-file	/usr/share/guile/2.0/system/base/compile.scm	/^(define* (compile-file file #:key$/;"	f
compile-file	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (compile-file repl file . opts)$/;"	f
compile-fold	/usr/share/guile/2.0/system/base/compile.scm	/^(define (compile-fold passes exp env opts)$/;"	f
compile-glil	/usr/share/guile/2.0/language/tree-il/compile-glil.scm	/^(define (compile-glil x e opts)$/;"	f
compile-instruction	/usr/share/guile/2.0/language/brainfuck/compile-scheme.scm	/^(define (compile-instruction ins)$/;"	f
compile-lambda	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (compile-lambda loc args body)$/;"	f
compile-objcode	/usr/share/guile/2.0/language/bytecode/spec.scm	/^(define (compile-objcode x e opts)$/;"	f
compile-objtable	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (compile-objtable constants table addr)$/;"	f
compile-pair	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (compile-pair loc expr)$/;"	f
compile-passes	/usr/share/guile/2.0/system/base/compile.scm	/^(define (compile-passes from to opts)$/;"	f
compile-program	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (compile-program glil constants)$/;"	f
compile-scheme	/usr/share/guile/2.0/language/brainfuck/compile-scheme.scm	/^(define (compile-scheme exp env opts)$/;"	f
compile-shell-switches	/usr/share/guile/2.0/ice-9/command-line.scm	/^(define* (compile-shell-switches args #:optional (usage-name "guile"))$/;"	f
compile-symbol	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (compile-symbol loc sym)$/;"	f
compile-tree-il	/usr/share/guile/2.0/language/brainfuck/compile-tree-il.scm	/^(define (compile-tree-il exp env opts)$/;"	f
compile-tree-il	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define (compile-tree-il exp env opts)$/;"	f
compile-tree-il	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (compile-tree-il expr env opts)$/;"	f
compile-tree-il	/usr/share/guile/2.0/language/scheme/compile-tree-il.scm	/^(define (compile-tree-il x e opts)$/;"	f
compiled-file-name	/usr/share/guile/2.0/system/base/compile.scm	/^(define (compiled-file-name file)$/;"	f
complete-start-command	/usr/share/guile/2.0/texinfo.scm	/^(define (complete-start-command command port)$/;"	f
complex-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define (complex-compare x y)$/;"	f
compose	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (compose proc . rest)$/;"	f
compose-setter	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define (compose-setter setter location)$/;"	f
compound-condition	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define-syntax-rule (compound-condition (type ...) (field ...))$/;"	f
compute-applicable-methods	/usr/share/guile/2.0/oop/goops.scm	/^(set! compute-applicable-methods %%compute-applicable-methods)$/;"	s
compute-clos-cpl	/usr/share/guile/2.0/oop/goops.scm	/^(define (compute-clos-cpl c get-direct-supers)$/;"	f
compute-cmethod	/usr/share/guile/2.0/oop/goops/compile.scm	/^(define (compute-cmethod methods types)$/;"	f
compute-cpl	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (compute-cpl (class <class>))$/;"	f
compute-dispatch-procedure	/usr/share/guile/2.0/oop/goops/dispatch.scm	/^(define (compute-dispatch-procedure gf cache)$/;"	f
compute-get-n-set	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (compute-get-n-set (class <class>) s)$/;"	f
compute-get-n-set	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (compute-get-n-set (o <object>) s)$/;"	f
compute-get-n-set	/usr/share/guile/2.0/oop/goops/active-slot.scm	/^(define-method (compute-get-n-set (class <active-class>) slot)$/;"	f
compute-get-n-set	/usr/share/guile/2.0/oop/goops/composite-slot.scm	/^(define-method (compute-get-n-set (class <composite-class>) slot)$/;"	f
compute-getter-method	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (compute-getter-method (class <class>) slotdef)$/;"	f
compute-getters-n-setters	/usr/share/guile/2.0/oop/goops.scm	/^(define (compute-getters-n-setters class slots)$/;"	f
compute-new-list-of-methods	/usr/share/guile/2.0/oop/goops.scm	/^(define (compute-new-list-of-methods gf new)$/;"	f
compute-propagated-get-n-set	/usr/share/guile/2.0/oop/goops/composite-slot.scm	/^(define (compute-propagated-get-n-set s)$/;"	f
compute-setter-method	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (compute-setter-method (class <class>) slotdef)$/;"	f
compute-slot-accessors	/usr/share/guile/2.0/oop/goops.scm	/^(define (compute-slot-accessors class slots)$/;"	f
compute-slots	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (compute-slots (class <class>))$/;"	f
compute-std-cpl	/usr/share/guile/2.0/oop/goops.scm	/^(define (compute-std-cpl c get-direct-supers)$/;"	f
compute-translation-order	/usr/share/guile/2.0/system/base/language.scm	/^(define (compute-translation-order from to language-translators)$/;"	f
cond	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax cond$/;"	f
cond-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax cond-compare$/;"	f
cond-expand	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax cond-expand$/;"	f
cond-expand-provide	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (cond-expand-provide module features)$/;"	f
condition	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define-syntax condition$/;"	f
condition-has-type?	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (condition-has-type? c type)$/;"	f
condition-instantiation	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define-syntax condition-instantiation$/;"	f
condition-ref	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (condition-ref c field-name)$/;"	f
condition-type	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (condition-type c)$/;"	f
condition-type-all-fields	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (condition-type-all-fields ct)$/;"	f
condition-type-id	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (condition-type-id ct)$/;"	f
condition-type-parent	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (condition-type-parent ct)$/;"	f
condition-type?	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (condition-type? obj)$/;"	f
condition-variable-broadcast!	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (condition-variable-broadcast! cond)$/;"	f
condition-variable-name	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (condition-variable-name condition-variable)$/;"	f
condition-variable-signal!	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (condition-variable-signal! cond) $/;"	f
condition-variable-specific	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (condition-variable-specific condition-variable)$/;"	f
condition-variable-specific-set!	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (condition-variable-specific-set! condition-variable obj)$/;"	f
condition?	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (condition? c)$/;"	f
connection	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor connection '())$/;"	f
connection	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor connection '())$/;"	f
cons*	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander cons*$/;"	f
const	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (const value)$/;"	f
const-fmt	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define (const-fmt x env)$/;"	f
constant?	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define (constant? effects)$/;"	f
constructor-primitive?	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define (constructor-primitive? prim)$/;"	f
consume-multiline	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define (consume-multiline input cont)$/;"	f
consume-upto-cookie	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define (consume-upto-cookie process input cont)$/;"	f
container	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (container env)$/;"	f
contains-unquotes?	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (contains-unquotes? expr)$/;"	f
content-encoding	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor content-encoding '())$/;"	f
content-encoding	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor content-encoding '())$/;"	f
content-language	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor content-language '())$/;"	f
content-language	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor content-language '())$/;"	f
content-length	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor content-length #f)$/;"	f
content-length	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor content-length #f)$/;"	f
content-location	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor content-location #f)$/;"	f
content-location	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor content-location #f)$/;"	f
content-md5	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor content-md5 #f)$/;"	f
content-md5	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor content-md5 #f)$/;"	f
content-range	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor content-range #f)$/;"	f
content-range	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor content-range #f)$/;"	f
content-type	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor content-type #f)$/;"	f
content-type	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor content-type #f)$/;"	f
continuation-prompt	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-once continuation-prompt "")$/;"	f
convert-c-registered-modules	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (convert-c-registered-modules dynobj)$/;"	f
coop-repl-prompt	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (coop-repl-prompt thunk)$/;"	f
coop-repl-read	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (coop-repl-read coop-repl)$/;"	f
coop-repl-server-eval	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (coop-repl-server-eval coop-server opcode . args)$/;"	f
copy-bit-field	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define (copy-bit-field n newbits start end)$/;"	f
copy-time	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (copy-time time)$/;"	f
copying	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (copying repl)$/;"	f
count-call	/usr/share/guile/2.0/statprof.scm	/^(define (count-call frame)$/;"	f
count-if	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (count-if pred l)$/;"	f
coverage-data->lcov	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define* (coverage-data->lcov data port)$/;"	f
cpu-endianness	/usr/share/guile/2.0/system/base/target.scm	/^(define (cpu-endianness cpu)$/;"	f
create-workers!	/usr/share/guile/2.0/ice-9/futures.scm	/^(define create-workers!$/;"	f
cse	/usr/share/guile/2.0/language/tree-il/cse.scm	/^(define* (cse exp)$/;"	f
current-date	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (current-date . tz-offset)$/;"	f
current-exception-handler	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (current-exception-handler)$/;"	f
current-filename	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax current-filename$/;"	f
current-handler-stack	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (current-handler-stack)$/;"	f
current-http-proxy	/usr/share/guile/2.0/web/client.scm	/^(define current-http-proxy$/;"	f
current-julian-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (current-julian-day)$/;"	f
current-language	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define current-language (make-parameter 'scheme))$/;"	f
current-modified-julian-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (current-modified-julian-day)$/;"	f
current-return-tag	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define current-return-tag (make-parameter #f))$/;"	f
current-source-location	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax current-source-location$/;"	f
current-ssax-error-port	/usr/share/guile/2.0/sxml/ssax.scm	/^(define current-ssax-error-port$/;"	f
current-time	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define current-time gettimeofday)$/;"	f
current-time	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (current-time . clock-type)$/;"	f
current-time-monotonic	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (current-time-monotonic)$/;"	f
current-time-process	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (current-time-process)$/;"	f
current-time-tai	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (current-time-tai)$/;"	f
current-time-thread	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (current-time-thread)$/;"	f
current-time-utc	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (current-time-utc)$/;"	f
current-warning-port	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define current-warning-port current-error-port)$/;"	f
current-warning-port	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define current-warning-port$/;"	f
cut	/usr/share/guile/2.0/srfi/srfi-26.scm	/^(define-syntax cut$/;"	f
cute	/usr/share/guile/2.0/srfi/srfi-26.scm	/^(define-syntax cute$/;"	f
date	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define-record-type date$/;"	f
date	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor date #f)$/;"	f
date	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor date #f)$/;"	f
date->broken-down-time	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (date->broken-down-time date)$/;"	f
date->julian-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (date->julian-day date)$/;"	f
date->modified-julian-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (date->modified-julian-day date)$/;"	f
date->string	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (date->string date .  format-string)$/;"	f
date->time-monotonic	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (date->time-monotonic date)$/;"	f
date->time-tai	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (date->time-tai date)$/;"	f
date->time-utc	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (date->time-utc date)$/;"	f
date-printer	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (date-printer date index format-string str-len port)$/;"	f
date-reverse-lookup	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (date-reverse-lookup needle haystack-ref haystack-len$/;"	f
date-week-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (date-week-day date)$/;"	f
date-week-number	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (date-week-number date day-of-week-starting-week)$/;"	f
date-year-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (date-year-day date)$/;"	f
datum->syntax	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define datum->syntax #f)$/;"	f
datum->syntax-object	/usr/share/guile/2.0/ice-9/syncase.scm	/^(define datum->syntax-object datum->syntax)$/;"	f
days-before-first-week	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (days-before-first-week date day-of-week-starting-week)$/;"	f
debug-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define (debug-compare c)$/;"	f
debug-disable	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-option-interface$/;"	f
debug-elapsed	/usr/share/guile/2.0/web/server.scm	/^(define-syntax debug-elapsed$/;"	f
debug-enable	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(set! debug-enable$/;"	s
debug-page	/usr/share/doc/guile-2.0-dev/examples/web/debug-sxml.scm	/^(define (debug-page request body)$/;"	f
dec	/usr/share/guile/2.0/sxml/ssax.scm	/^(define dec 1-)$/;"	f
dec	/usr/share/guile/2.0/sxml/ssax/input-parse.scm	/^(define dec 1-)$/;"	f
declare-challenge-list-header!	/usr/share/guile/2.0/web/http.scm	/^(define (declare-challenge-list-header! name)$/;"	f
declare-credentials-header!	/usr/share/guile/2.0/web/http.scm	/^(define (declare-credentials-header! name)$/;"	f
declare-date-header!	/usr/share/guile/2.0/web/http.scm	/^(define (declare-date-header! name)$/;"	f
declare-default-port!	/usr/share/guile/2.0/web/uri.scm	/^(define (declare-default-port! scheme port)$/;"	f
declare-entity-tag-list-header!	/usr/share/guile/2.0/web/http.scm	/^(define (declare-entity-tag-list-header! name)$/;"	f
declare-header!	/usr/share/guile/2.0/web/http.scm	/^(define* (declare-header! name$/;"	f
declare-header-list-header!	/usr/share/guile/2.0/web/http.scm	/^(define (declare-header-list-header! name)$/;"	f
declare-integer-header!	/usr/share/guile/2.0/web/http.scm	/^(define (declare-integer-header! name)$/;"	f
declare-key-value-list-header!	/usr/share/guile/2.0/web/http.scm	/^(define* (declare-key-value-list-header! name #:optional$/;"	f
declare-opaque-header!	/usr/share/guile/2.0/web/http.scm	/^(define (declare-opaque-header! name)$/;"	f
declare-param-list-header!	/usr/share/guile/2.0/web/http.scm	/^(define* (declare-param-list-header! name #:optional$/;"	f
declare-quality-list-header!	/usr/share/guile/2.0/web/http.scm	/^(define (declare-quality-list-header! name)$/;"	f
declare-relative-uri-header!	/usr/share/guile/2.0/web/http.scm	/^(define (declare-relative-uri-header! name)$/;"	f
declare-string-list-header!	/usr/share/guile/2.0/web/http.scm	/^(define (declare-string-list-header! name)$/;"	f
declare-symbol-list-header!	/usr/share/guile/2.0/web/http.scm	/^(define (declare-symbol-list-header! name)$/;"	f
declare-uri-header!	/usr/share/guile/2.0/web/http.scm	/^(define (declare-uri-header! name)$/;"	f
decode-bytecode	/usr/share/guile/2.0/language/assembly/decompile-bytecode.scm	/^(define (decode-bytecode pop)$/;"	f
decode-julian-day-number	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (decode-julian-day-number jdn)$/;"	f
decode-load-program	/usr/share/guile/2.0/language/assembly/decompile-bytecode.scm	/^(define (decode-load-program pop)$/;"	f
decode-response-body	/usr/share/guile/2.0/web/client.scm	/^(define (decode-response-body response body)$/;"	f
decode-string	/usr/share/guile/2.0/web/uri.scm	/^(define (decode-string bv encoding)$/;"	f
decompile	/usr/share/guile/2.0/system/base/compile.scm	/^(define* (decompile x #:key$/;"	f
decompile-bytecode	/usr/share/guile/2.0/language/assembly/decompile-bytecode.scm	/^(define (decompile-bytecode x env opts)$/;"	f
decompile-fold	/usr/share/guile/2.0/system/base/compile.scm	/^(define (decompile-fold passes exp env opts)$/;"	f
decompile-objcode	/usr/share/guile/2.0/language/bytecode/spec.scm	/^(define (decompile-objcode x e opts)$/;"	f
decompile-passes	/usr/share/guile/2.0/system/base/compile.scm	/^(define (decompile-passes from to opts)$/;"	f
decompile-tree-il	/usr/share/guile/2.0/language/scheme/decompile-tree-il.scm	/^(define (decompile-tree-il e env opts)$/;"	f
decompile-value	/usr/share/guile/2.0/language/objcode/spec.scm	/^(define (decompile-value x env opts)$/;"	f
deep-clone	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (deep-clone  (self <object>))$/;"	f
def	/usr/share/guile/2.0/texinfo/html.scm	/^(define (def tag args . body)$/;"	f
def	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (def tag args . body)$/;"	f
default-chunk-size	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define default-chunk-size 128)$/;"	f
default-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define (default-compare x y)$/;"	f
default-duplicate-binding-handler	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define default-duplicate-binding-handler$/;"	f
default-duplicate-binding-procedures	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define default-duplicate-binding-procedures #f)$/;"	f
default-duplicate-binding-procedures	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define default-duplicate-binding-procedures$/;"	f
default-environment	/usr/share/guile/2.0/system/base/language.scm	/^(define (default-environment lang)$/;"	f
default-initial-allocation	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define default-initial-allocation 128)$/;"	f
default-language-joiner	/usr/share/guile/2.0/system/base/compile.scm	/^(define (default-language-joiner lang)$/;"	f
default-port?	/usr/share/guile/2.0/web/uri.scm	/^(define (default-port? scheme port)$/;"	f
default-pre-unwind-handler	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (default-pre-unwind-handler key . args)$/;"	f
default-pre-unwind-handler	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define (default-pre-unwind-handler key . args)$/;"	f
default-prompt-handler	/usr/share/guile/2.0/ice-9/control.scm	/^(define (default-prompt-handler k proc)$/;"	f
default-prompt-tag	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define default-prompt-tag$/;"	f
default-random-source	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define default-random-source (make-random-source))$/;"	f
default-realloc-threshold	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define default-realloc-threshold 32)$/;"	f
default-record-printer	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define (default-record-printer s p)$/;"	f
default-title	/usr/share/doc/guile-2.0-dev/examples/web/debug-sxml.scm	/^(define default-title "Hello hello!")$/;"	f
default-trap-handler	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (default-trap-handler frame idx trap-name)$/;"	f
default-val-parser	/usr/share/guile/2.0/web/http.scm	/^(define (default-val-parser k val)$/;"	f
default-val-validator	/usr/share/guile/2.0/web/http.scm	/^(define (default-val-validator k val)$/;"	f
default-val-writer	/usr/share/guile/2.0/web/http.scm	/^(define (default-val-writer k val port)$/;"	f
defconst	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial defconst (loc args)$/;"	f
define*	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define define*$/;"	f
define*	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define-syntax define*$/;"	f
define*-public	/usr/share/guile/2.0/ice-9/optargs.scm	/^(define-syntax define*-public$/;"	f
define-accessor	/usr/share/guile/2.0/oop/goops.scm	/^(define-syntax-rule (define-accessor name)$/;"	f
define-alist-converter	/usr/share/guile/2.0/ice-9/hash-table.scm	/^(define-syntax-rule (define-alist-converter name hash-set-proc)$/;"	f
define-any->vector	/usr/share/guile/2.0/srfi/srfi-4/gnu.scm	/^(define-macro (define-any->vector . tags)$/;"	f
define-block-accessor	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-syntax-rule (define-block-accessor name index)$/;"	f
define-bytevector-type	/usr/share/guile/2.0/srfi/srfi-4.scm	/^(define-macro (define-bytevector-type tag infix size)$/;"	f
define-class	/usr/share/guile/2.0/oop/goops.scm	/^(define-syntax-rule (define-class name supers slot ...)$/;"	f
define-class	/usr/share/guile/2.0/oop/goops/simple.scm	/^(define-syntax-rule (define-class arg ...)$/;"	f
define-class	/usr/share/guile/2.0/oop/goops/stklos.scm	/^(define-syntax-rule (define-class name supers (slot ...) rest ...)$/;"	f
define-class-pre-definition	/usr/share/guile/2.0/oop/goops.scm	/^(define-syntax define-class-pre-definition$/;"	f
define-class-pre-definitions	/usr/share/guile/2.0/oop/goops.scm	/^(define-syntax define-class-pre-definitions$/;"	f
define-class-with-accessors	/usr/share/guile/2.0/oop/goops/accessors.scm	/^(define-macro (define-class-with-accessors name supers . slots)$/;"	f
define-class-with-accessors-keywords	/usr/share/guile/2.0/oop/goops/accessors.scm	/^(define-macro (define-class-with-accessors-keywords name supers . slots)$/;"	f
define-condition-type	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define-syntax-rule (define-condition-type name parent pred (field-name field-accessor) ...)$/;"	f
define-effects	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define-syntax define-effects$/;"	f
define-extended-generic	/usr/share/guile/2.0/oop/goops.scm	/^(define-macro (define-extended-generic name val)$/;"	f
define-extended-generics	/usr/share/guile/2.0/oop/goops.scm	/^(define-macro (define-extended-generics names . args)$/;"	f
define-generic	/usr/share/guile/2.0/oop/goops.scm	/^(define-macro (define-generic name)$/;"	f
define-http-verb	/usr/share/guile/2.0/web/client.scm	/^(define-syntax-rule (define-http-verb http-verb method doc)$/;"	f
define-immutable-record-type	/usr/share/guile/2.0/srfi/srfi-9/gnu.scm	/^(define-syntax-rule (define-immutable-record-type name ctor pred fields ...)$/;"	f
define-inlinable	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax define-inlinable$/;"	f
define-inlinable	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define-syntax-rule (define-inlinable (name formals ...) body ...)$/;"	f
define-js-method	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-macro (define-js-method object name-and-args . body)$/;"	f
define-language	/usr/share/guile/2.0/system/base/language.scm	/^(define-macro (define-language name . spec)$/;"	f
define-macro	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax define-macro$/;"	f
define-meta-command	/usr/share/guile/2.0/system/repl/command.scm	/^(define-syntax define-meta-command$/;"	f
define-method	/usr/share/guile/2.0/oop/goops.scm	/^(define-syntax define-method$/;"	f
define-method	/usr/share/guile/2.0/oop/goops/stklos.scm	/^(define-syntax define-method$/;"	f
define-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax define-module$/;"	f
define-module*	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define define-module* #f)$/;"	f
define-module*	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (define-module* name$/;"	f
define-monetary-langinfo-mapping	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-macro (define-monetary-langinfo-mapping name local-item intl-item$/;"	f
define-once	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (define-once sym val)$/;"	f
define-opt	/usr/share/guile/2.0/sxml/ssax/input-parse.scm	/^(define-macro (define-opt bindings body . body-rest)$/;"	f
define-option-interface	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax define-option-interface$/;"	f
define-parsed-entity!	/usr/share/guile/2.0/sxml/ssax.scm	/^(define (define-parsed-entity! entity str)$/;"	f
define-primitive-expander	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-macro (define-primitive-expander sym . clauses)$/;"	f
define-private	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (define-private foo bar)$/;"	f
define-public	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax define-public$/;"	f
define-public	/usr/share/guile/2.0/ice-9/curried-definitions.scm	/^(define-syntax define-public$/;"	f
define-reader-ctor	/usr/share/guile/2.0/srfi/srfi-10.scm	/^(define (define-reader-ctor symbol proc)$/;"	f
define-record	/usr/share/guile/2.0/system/base/syntax.scm	/^(define-macro (define-record name-form . slots)$/;"	f
define-record-type	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define-syntax-rule (define-record-type name ctor pred fields ...)$/;"	f
define-record/keywords	/usr/share/guile/2.0/system/base/syntax.scm	/^(define-macro (define-record\/keywords name-form . slots)$/;"	f
define-request-accessor	/usr/share/guile/2.0/web/request.scm	/^(define-syntax define-request-accessor$/;"	f
define-response-accessor	/usr/share/guile/2.0/web/response.scm	/^(define-syntax define-response-accessor$/;"	f
define-server-impl	/usr/share/guile/2.0/web/server.scm	/^(define-syntax-rule (define-server-impl name open read write close)$/;"	f
define-simple-langinfo-mapping	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-macro (define-simple-langinfo-mapping name item default)$/;"	f
define-stack-command	/usr/share/guile/2.0/system/repl/command.scm	/^(define-syntax define-stack-command$/;"	f
define-standard-accessor-method	/usr/share/guile/2.0/oop/goops.scm	/^(define-macro (define-standard-accessor-method form . body)$/;"	f
define-stream	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (define-stream (name . formal) body0 body1 ...)$/;"	f
define-syntax*	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax define-syntax*$/;"	f
define-syntax-rule	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define define-syntax-rule$/;"	f
define-syntax-rule	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define-syntax define-syntax-rule$/;"	f
define-tagged-inlinable	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define-syntax define-tagged-inlinable$/;"	f
define-type	/usr/share/guile/2.0/system/base/syntax.scm	/^(define-macro (define-type name . rest)$/;"	f
define-values	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax define-values$/;"	f
define-vector-copier!	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define-syntax-rule (define-vector-copier! copy! docstring inner-proc)$/;"	f
define-vector-langinfo-mapping	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-macro (define-vector-langinfo-mapping name nl-items)$/;"	f
define-wrapped-pointer-type	/usr/share/guile/2.0/system/foreign.scm	/^(define-syntax define-wrapped-pointer-type$/;"	f
defines	/usr/share/guile/2.0/texinfo/indexing.scm	/^(define defines$/;"	f
definitions-in	/usr/share/guile/2.0/ice-9/ls.scm	/^(define (definitions-in root names)$/;"	f
defmacro	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax defmacro$/;"	f
defmacro	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial defmacro (loc args)$/;"	f
defmacro*	/usr/share/guile/2.0/ice-9/optargs.scm	/^(define-syntax defmacro*$/;"	f
defmacro*-public	/usr/share/guile/2.0/ice-9/optargs.scm	/^(define-syntax-rule (defmacro*-public id args b0 b1 ...)$/;"	f
defmacro-public	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (defmacro-public name args body ...)$/;"	f
defs	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define defs$/;"	f
defspecial	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define-syntax defspecial$/;"	f
defun	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial defun (loc args)$/;"	f
defvar	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial defvar (loc args)$/;"	f
delay	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (delay exp)$/;"	f
delay	/usr/share/guile/2.0/srfi/srfi-45.scm	/^(define-syntax-rule (delay exp)$/;"	f
delayed-compile	/usr/share/guile/2.0/oop/goops/dispatch.scm	/^(define (delayed-compile gf)$/;"	f
delegating-getter-and-setter-syntax	/usr/share/guile/2.0/ice-9/calling.scm	/^(define (delegating-getter-and-setter-syntax  vars get-delegate set-delegate)$/;"	f
delete	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (delete repl idx)$/;"	f
delete-if!	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (delete-if! pred l)$/;"	f
delete-if-not!	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (delete-if-not! pred l)$/;"	f
delete-trap!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (delete-trap! idx #:optional (trap-state (the-trap-state)))$/;"	f
depends-on-effects?	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define-inlinable (depends-on-effects? x effects)$/;"	f
deq!	/usr/share/guile/2.0/ice-9/q.scm	/^(define deq! q-pop!)$/;"	f
dereference-word	/usr/share/guile/2.0/system/base/types.scm	/^(define-inlinable (dereference-word backend address)$/;"	f
describe	/usr/share/guile/2.0/oop/goops/describe.scm	/^(define-method (describe (x <class>))$/;"	f
describe	/usr/share/guile/2.0/oop/goops/describe.scm	/^(define-method (describe (x <generic>))$/;"	f
describe	/usr/share/guile/2.0/oop/goops/describe.scm	/^(define-method (describe (x <method>) . omit-generic)$/;"	f
describe	/usr/share/guile/2.0/oop/goops/describe.scm	/^(define-method (describe (x <object>))$/;"	f
describe	/usr/share/guile/2.0/oop/goops/describe.scm	/^(define-method (describe (x <procedure>))$/;"	f
describe	/usr/share/guile/2.0/oop/goops/describe.scm	/^(define-method (describe (x <top>))$/;"	f
describe	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (describe repl (form))$/;"	f
describe	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (describe (symbol <symbol>))$/;"	f
describe-object	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-generic describe-object)$/;"	f
describe-object	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (describe-object (obj <class>))$/;"	f
describe-object	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (describe-object (obj <top>))$/;"	f
description-table	/usr/share/guile/2.0/system/repl/describe.scm	/^(define description-table$/;"	f
detag-one	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define (detag-one tag body)$/;"	f
detect-free-variables	/usr/share/guile/2.0/scripts/lint.scm	/^(define (detect-free-variables x locals)$/;"	f
detect-free-variables-noncar	/usr/share/guile/2.0/scripts/lint.scm	/^(define (detect-free-variables-noncar x locals)$/;"	f
diff+note!	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define (diff+note! a b note-removals note-additions note-same)$/;"	f
diff?	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define (diff? a b)$/;"	f
digit->number	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (digit->number c)$/;"	f
directives	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define directives$/;"	f
directory-files	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define (directory-files dir)$/;"	f
directory-files	/usr/share/guile/2.0/scripts/help.scm	/^(define (directory-files dir)$/;"	f
directory-files	/usr/share/guile/2.0/scripts/list.scm	/^(define (directory-files dir)$/;"	f
disable	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (disable repl idx)$/;"	f
disable-trap!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (disable-trap! idx #:optional (trap-state (the-trap-state)))$/;"	f
disable-trap-wrapper!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (disable-trap-wrapper! wrapper)$/;"	f
disable-value-history!	/usr/share/guile/2.0/ice-9/history.scm	/^(define (disable-value-history!)$/;"	f
disable-void-check	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define disable-void-check (make-fluid))$/;"	f
disassemble	/usr/share/guile/2.0/language/assembly/disassemble.scm	/^(define (disassemble x)$/;"	f
disassemble	/usr/share/guile/2.0/scripts/disassemble.scm	/^(define (disassemble . files)$/;"	f
disassemble	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (disassemble repl (form))$/;"	f
disassemble-file	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (disassemble-file repl file)$/;"	f
disassemble-free-vars	/usr/share/guile/2.0/language/assembly/disassemble.scm	/^(define (disassemble-free-vars free-vars)$/;"	f
disassemble-load-program	/usr/share/guile/2.0/language/assembly/disassemble.scm	/^(define (disassemble-load-program asm env)$/;"	f
disassemble-meta	/usr/share/guile/2.0/language/assembly/disassemble.scm	/^(define (disassemble-meta meta)$/;"	f
dispatch-top-cookie	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define (dispatch-top-cookie input cont)$/;"	f
dispatch-union	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define (dispatch-union d1 d2)$/;"	f
display	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (display o file) $/;"	f
display	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define* (display object #:optional (port (current-output-port)))$/;"	f
display-address	/usr/share/guile/2.0/oop/goops.scm	/^(define (display-address o file)$/;"	f
display-class	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-class class . args)$/;"	f
display-command	/usr/share/guile/2.0/system/repl/command.scm	/^(define (display-command command)$/;"	f
display-commentary	/usr/share/guile/2.0/scripts/display-commentary.scm	/^(define (display-commentary . refs)$/;"	f
display-commentary-one	/usr/share/guile/2.0/scripts/display-commentary.scm	/^(define (display-commentary-one file)$/;"	f
display-description	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-generic display-description)$/;"	f
display-description	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-description (obj <top>))$/;"	f
display-diff-stat	/usr/share/guile/2.0/system/repl/command.scm	/^(define (display-diff-stat title flag this last unit)$/;"	f
display-documentation	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-generic display-documentation)$/;"	f
display-documentation	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-documentation (obj <method>))$/;"	f
display-documentation	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-documentation (obj <procedure>))$/;"	f
display-documentation	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-documentation (obj <top>))$/;"	f
display-file	/usr/share/guile/2.0/system/repl/describe.scm	/^(define (display-file location)$/;"	f
display-group	/usr/share/guile/2.0/system/repl/command.scm	/^(define* (display-group group #:optional (abbrev? #t))$/;"	f
display-help	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (display-help)$/;"	f
display-items	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define (display-items p items)$/;"	f
display-list	/usr/share/guile/2.0/system/repl/describe.scm	/^(define (display-list title list)$/;"	f
display-location	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-generic display-location)$/;"	f
display-location	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-location (obj <procedure>))$/;"	f
display-location	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-location (obj <top>))$/;"	f
display-mips-stat	/usr/share/guile/2.0/system/repl/command.scm	/^(define (display-mips-stat title this-time this-clock last-time last-clock)$/;"	f
display-module-commentary	/usr/share/guile/2.0/scripts/display-commentary.scm	/^(define (display-module-commentary module-name)$/;"	f
display-object	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-generic display-object)$/;"	f
display-object	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-object (obj <method>))$/;"	f
display-object	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-object (obj <procedure>))$/;"	f
display-object	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-object (obj <top>))$/;"	f
display-rfc822	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define (display-rfc822 parse)$/;"	f
display-slot-list	/usr/share/guile/2.0/system/repl/describe.scm	/^(define (display-slot-list title instance list)$/;"	f
display-stat	/usr/share/guile/2.0/system/repl/command.scm	/^(define (display-stat title flag field1 field2 unit)$/;"	f
display-stat-title	/usr/share/guile/2.0/system/repl/command.scm	/^(define (display-stat-title title field1 field2)$/;"	f
display-summary	/usr/share/guile/2.0/system/repl/command.scm	/^(define (display-summary usage abbrevs summary)$/;"	f
display-summary	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-generic display-summary)$/;"	f
display-summary	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-summary (obj <class>))$/;"	f
display-summary	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-summary (obj <method>))$/;"	f
display-summary	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-summary (obj <procedure>))$/;"	f
display-summary	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-summary (obj <top>))$/;"	f
display-texi	/usr/share/guile/2.0/scripts/snarf-guile-m4-docs.scm	/^(define (display-texi lines)$/;"	f
display-time-stat	/usr/share/guile/2.0/system/repl/command.scm	/^(define (display-time-stat title this last)$/;"	f
display-type	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-generic display-type)$/;"	f
display-type	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-type (obj <class>))$/;"	f
display-type	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-type (obj <generic>))$/;"	f
display-type	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-type (obj <method>))$/;"	f
display-type	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-type (obj <object>))$/;"	f
display-type	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-type (obj <pair>))$/;"	f
display-type	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-type (obj <procedure>))$/;"	f
display-type	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-type (obj <string>))$/;"	f
display-type	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-type (obj <top>))$/;"	f
display-usage-report	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (display-usage-report kw-desc)$/;"	f
display-value	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-generic display-value)$/;"	f
display-value	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-value (obj <class>))$/;"	f
display-value	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-value (obj <generic>))$/;"	f
display-value	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-value (obj <object>))$/;"	f
display-value	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-method (display-value (obj <top>))$/;"	f
display-version	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (display-version)$/;"	f
display-vm-frames	/usr/share/gdb/auto-load/libguile-2.0.so.22.7.2-gdb.scm	/^(define* (display-vm-frames #:optional (port (current-output-port)))$/;"	f
dn-ls	/usr/share/guile/2.0/scripts/frisk.scm	/^(define dn-ls (make-object-property))   ; list$/;"	f
dn-ls+!	/usr/share/guile/2.0/scripts/frisk.scm	/^(define (dn-ls+! m new) (set! (dn-ls m) (cons new (dn-ls m))))$/;"	f
do	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax do$/;"	f
do-decompile	/usr/share/guile/2.0/language/scheme/decompile-tree-il.scm	/^(define* (do-decompile e env$/;"	f
do-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax do-ec$/;"	f
do-ec:do	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax do-ec:do$/;"	f
doc-snarf	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (doc-snarf . args)$/;"	f
doc-snarf-version	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define doc-snarf-version "0.0.2") ; please update before publishing!$/;"	f
documentation-files	/usr/share/guile/2.0/ice-9/documentation.scm	/^(define documentation-files$/;"	f
domain-label-regexp	/usr/share/guile/2.0/web/uri.scm	/^(define domain-label-regexp$/;"	f
dotted-list?	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (dotted-list? x)$/;"	f
down	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (down repl #:optional (count 1))$/;"	f
drain-message	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define (drain-message port)$/;"	f
drop	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define drop list-tail)$/;"	f
drop	/usr/share/guile/2.0/system/base/lalr.upstream.scm	/^(define (drop l n)$/;"	f
drop-right	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (drop-right lis k)$/;"	f
drop-right!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (drop-right! lst i)$/;"	f
drop-while	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (drop-while pred lst)$/;"	f
dummy-procedure	/usr/share/guile/2.0/oop/goops.scm	/^(define dummy-procedure (lambda args *unspecified*))$/;"	f
dump-constants	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (dump-constants constants)$/;"	f
dump-down	/usr/share/guile/2.0/scripts/frisk.scm	/^(define (dump-down modules)$/;"	f
dump-object	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (dump-object x addr)$/;"	f
dump-up	/usr/share/guile/2.0/scripts/frisk.scm	/^(define (dump-up modules)$/;"	f
dump-updown	/usr/share/guile/2.0/scripts/frisk.scm	/^(define (dump-updown modules)$/;"	f
dup	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define dup$/;"	f
dup->inport	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define dup->inport$/;"	f
dup->outport	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define dup->outport$/;"	f
dup->port	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define dup->port$/;"	f
duplicate-handlers	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define duplicate-handlers$/;"	f
duplicate-port	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (duplicate-port port modes)$/;"	f
dynamic-maybe-call	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (dynamic-maybe-call name dynobj)$/;"	f
dynamic-maybe-link	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (dynamic-maybe-link filename)$/;"	f
dynamic-wind	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (dynamic-wind in thunk out)$/;"	f
eager	/usr/share/guile/2.0/srfi/srfi-45.scm	/^(define (eager x)$/;"	f
ec-:vector-filter	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define (ec-:vector-filter vecs)$/;"	f
ec-guarded-do-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax ec-guarded-do-ec$/;"	f
ec-simplify	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax ec-simplify$/;"	f
ecmascript	/usr/share/guile/2.0/language/ecmascript/spec.scm	/^(define-language ecmascript$/;"	f
econs	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define (econs name gensym env)$/;"	f
edge-down	/usr/share/guile/2.0/scripts/frisk.scm	/^(define edge-down cdr)$/;"	f
edge-type	/usr/share/guile/2.0/scripts/frisk.scm	/^(define edge-type (make-object-property)) ; symbol$/;"	f
edge-up	/usr/share/guile/2.0/scripts/frisk.scm	/^(define edge-up car)$/;"	f
effect+exception-free-primitive?	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define (effect+exception-free-primitive? prim)$/;"	f
effect-free-primitive?	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define (effect-free-primitive? prim)$/;"	f
effect-free?	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define (effect-free? effects)$/;"	f
effects-commute?	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define-inlinable (effects-commute? a b)$/;"	f
eighth	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (eighth x) (cadddr (cddddr x)))$/;"	f
element->xml	/usr/share/guile/2.0/sxml/simple.scm	/^(define (element->xml tag attrs body port)$/;"	f
elisp	/usr/share/guile/2.0/language/elisp/spec.scm	/^(define-language elisp$/;"	f
elisp-bool	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define (elisp-bool b)$/;"	f
emit-bindings	/usr/share/guile/2.0/language/tree-il/compile-glil.scm	/^(define (emit-bindings src ids vars allocation proc emit-code)$/;"	f
emit-bug-reporting-address	/usr/share/guile/2.0/ice-9/command-line.scm	/^(define* (emit-bug-reporting-address package bug-address #:key$/;"	f
emit-linear-dispatch	/usr/share/guile/2.0/oop/goops/dispatch.scm	/^(define (emit-linear-dispatch gf-sym nargs methods free rest?)$/;"	f
empty-command	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (empty-command exp lp command type formals args accum)$/;"	f
empty-lexical-environment	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define (empty-lexical-environment)$/;"	f
enable	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (enable repl idx)$/;"	f
enable-trap!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (enable-trap! idx #:optional (trap-state (the-trap-state)))$/;"	f
enable-trap-wrapper!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (enable-trap-wrapper! wrapper)$/;"	f
enable-value-history!	/usr/share/guile/2.0/ice-9/history.scm	/^(define (enable-value-history!)$/;"	f
encode-and-join-uri-path	/usr/share/guile/2.0/web/uri.scm	/^(define (encode-and-join-uri-path parts)$/;"	f
encode-julian-day-number	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (encode-julian-day-number day month year)$/;"	f
encode-string	/usr/share/guile/2.0/web/uri.scm	/^(define (encode-string str encoding)$/;"	f
end-multiline	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define (end-multiline)$/;"	f
end-of-sentence?	/usr/share/guile/2.0/texinfo/string-utils.scm	/^(define (end-of-sentence? str)$/;"	f
endgrent	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (endgrent) (setgr))$/;"	f
endhostent	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (endhostent) (sethost))$/;"	f
endianness	/usr/share/guile/2.0/rnrs/bytevectors.scm	/^(define-macro (endianness sym)$/;"	f
endnetent	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (endnetent) (setnet))$/;"	f
endprotoent	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (endprotoent) (setproto))$/;"	f
endpwent	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (endpwent) (setpw))$/;"	f
endservent	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (endservent) (setserv))$/;"	f
enq!	/usr/share/guile/2.0/ice-9/q.scm	/^(define (enq! q obj)$/;"	f
ensure-accessor	/usr/share/guile/2.0/oop/goops.scm	/^(define* (ensure-accessor proc #:optional name)$/;"	f
ensure-batch-mode!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (ensure-batch-mode!)$/;"	f
ensure-callers-db	/usr/share/guile/2.0/system/xref.scm	/^(define (ensure-callers-db mod-name)$/;"	f
ensure-directory	/usr/share/guile/2.0/system/base/compile.scm	/^(define (ensure-directory dir)$/;"	f
ensure-fluid!	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define (ensure-fluid! module sym)$/;"	f
ensure-generic	/usr/share/guile/2.0/oop/goops.scm	/^(define* (ensure-generic old-definition #:optional name)$/;"	f
ensure-language	/usr/share/guile/2.0/ice-9/eval-string.scm	/^(define (ensure-language x)$/;"	f
ensure-language	/usr/share/guile/2.0/system/base/compile.scm	/^(define (ensure-language x)$/;"	f
ensure-metaclass	/usr/share/guile/2.0/oop/goops.scm	/^(define (ensure-metaclass supers)$/;"	f
ensure-metaclass-with-supers	/usr/share/guile/2.0/oop/goops.scm	/^(define ensure-metaclass-with-supers$/;"	f
ensure-pset-size!	/usr/share/guile/2.0/ice-9/poll.scm	/^(define (ensure-pset-size! set size)$/;"	f
ensure-sources-db	/usr/share/guile/2.0/system/xref.scm	/^(define (ensure-sources-db mod-name)$/;"	f
ensure-uri	/usr/share/guile/2.0/web/client.scm	/^(define (ensure-uri uri-or-string)$/;"	f
ensuring-globals	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (ensuring-globals loc bindings body)$/;"	f
entity->xml	/usr/share/guile/2.0/sxml/simple.scm	/^(define (entity->xml name port)$/;"	f
entity-tag-list?	/usr/share/guile/2.0/web/http.scm	/^(define (entity-tag-list? val)$/;"	f
entity-tag?	/usr/share/guile/2.0/web/http.scm	/^(define (entity-tag? val)$/;"	f
entry	/usr/share/guile/2.0/texinfo/html.scm	/^(define (entry tag args . body)$/;"	f
entry	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (entry tag args . body)$/;"	f
entry	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (entry exp lp command type formals args accum)$/;"	f
entry-delimiter	/usr/share/guile/2.0/ice-9/documentation.scm	/^(define entry-delimiter "\\f")$/;"	f
entry-docstrings	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (entry-docstrings e)$/;"	f
entry-filename	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (entry-filename e)$/;"	f
entry-line	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (entry-line e)$/;"	f
entry-options	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (entry-options e)$/;"	f
entry-signature	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (entry-signature e)$/;"	f
entry-symbol	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (entry-symbol e)$/;"	f
enumerate	/usr/share/guile/2.0/texinfo/html.scm	/^(define (enumerate tag . elts)$/;"	f
enumerate	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (enumerate tag . elts)$/;"	f
enumerate!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (enumerate! (o <array>) env)$/;"	f
enumerate!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (enumerate! (o <class>) env) #f)$/;"	f
enumerate!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (enumerate! (o <generic>) env) #f)$/;"	f
enumerate!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (enumerate! (o <method>) env) #f)$/;"	f
enumerate!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (enumerate! (o <object>) env)$/;"	f
enumerate!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (enumerate! (o <pair>) env)$/;"	f
enumerate!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (enumerate! (o <string>) env) #f)$/;"	f
enumerate!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (enumerate! (o <top>) env) #t)$/;"	f
enumerate!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (enumerate! (o <vector>) env)$/;"	f
enumerate-component!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (enumerate-component! o env)$/;"	f
env-boxes	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define (env-boxes e)$/;"	f
env-module	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define (env-module e)$/;"	f
environ	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (environ exp lp command type formals args accum)$/;"	f
eol-args	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (eol-args exp lp command type formals args accum)$/;"	f
eol-style	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define-enumeration eol-style$/;"	f
eol-text	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (eol-text exp lp command type formals args accum)$/;"	f
eol-text-args	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (eol-text-args exp lp command type formals args accum)$/;"	f
ephemeral-handler-for-index	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (ephemeral-handler-for-index trap-state idx handler)$/;"	f
eq?-list	/usr/share/guile/2.0/ice-9/poe.scm	/^(define (eq?-list x y)$/;"	f
equivalence-proc->associator	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (equivalence-proc->associator equal-proc)$/;"	f
errno-if-exception	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define-syntax-rule (errno-if-exception expr)$/;"	f
error	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define error$/;"	f
error	/usr/share/guile/2.0/ice-9/match.scm	/^(define (error _ . args)$/;"	f
error-catching-loop	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (error-catching-loop thunk)$/;"	f
error-catching-loop	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define (error-catching-loop thunk)$/;"	f
error-catching-repl	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (error-catching-repl r e p)$/;"	f
error-catching-repl	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define (error-catching-repl r e p)$/;"	f
error-duplicate-option	/usr/share/guile/2.0/srfi/srfi-37.scm	/^(define (error-duplicate-option option-name)$/;"	f
error-from	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define (error-from who msg . args)$/;"	f
error-handling-mode	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define-enumeration error-handling-mode$/;"	f
error-message	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (error-message repl)$/;"	f
error-string	/usr/share/guile/2.0/system/repl/error-handling.scm	/^(define (error-string stack key args)$/;"	f
errs-to-retry	/usr/share/guile/2.0/system/repl/server.scm	/^(define errs-to-retry$/;"	f
escape	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (escape str)$/;"	f
escape-special-chars	/usr/share/guile/2.0/texinfo/string-utils.scm	/^(define (escape-special-chars str special-chars escape-char)$/;"	f
escaped-chars	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define escaped-chars '(#\\} #\\{ #\\@))$/;"	f
etag	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor etag #f)$/;"	f
eval	/usr/share/guile/2.0/ice-9/channel.scm	/^(define eval$/;"	f
eval-case	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define-macro (eval-case . clauses)$/;"	f
eval-string	/usr/share/guile/2.0/ice-9/eval-string.scm	/^(define* (eval-string str #:key$/;"	f
eval-string/lang	/usr/share/guile/2.0/ice-9/command-line.scm	/^(define (eval-string\/lang str)$/;"	f
every	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (every pred l . rest)$/;"	f
every	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (every pred ls . lists)$/;"	f
every1	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (every1 pred ls)$/;"	f
every?-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax every?-ec$/;"	f
example	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (example tag . body)$/;"	f
exclude-effects	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define (exclude-effects effects exclude)$/;"	f
excluded?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (excluded? o env)$/;"	f
excursion-function-syntax	/usr/share/guile/2.0/ice-9/calling.scm	/^(define (excursion-function-syntax vars)$/;"	f
exit	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define exit quit)$/;"	f
exit-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define exit-hook (make-hook))$/;"	f
expand	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (expand repl (form))$/;"	f
expand-primitives!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define (expand-primitives! x)$/;"	f
expand-tabs	/usr/share/guile/2.0/texinfo/string-utils.scm	/^(define* (expand-tabs str #:optional (tab-size 8))$/;"	f
expect	/usr/share/guile/2.0/ice-9/expect.scm	/^(defmacro expect clauses$/;"	f
expect	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor expect '())$/;"	f
expect-char-proc	/usr/share/guile/2.0/ice-9/expect.scm	/^(define expect-char-proc #f)$/;"	f
expect-eof-proc	/usr/share/guile/2.0/ice-9/expect.scm	/^(define expect-eof-proc #f)$/;"	f
expect-port	/usr/share/guile/2.0/ice-9/expect.scm	/^(define expect-port #f)$/;"	f
expect-regexec	/usr/share/guile/2.0/ice-9/expect.scm	/^(define (expect-regexec rx s eof?)$/;"	f
expect-select	/usr/share/guile/2.0/ice-9/expect.scm	/^(define (expect-select port timeout)$/;"	f
expect-strings	/usr/share/guile/2.0/ice-9/expect.scm	/^(defmacro expect-strings clauses$/;"	f
expect-strings-compile-flags	/usr/share/guile/2.0/ice-9/expect.scm	/^(define expect-strings-compile-flags regexp\/newline)$/;"	f
expect-strings-exec-flags	/usr/share/guile/2.0/ice-9/expect.scm	/^(define expect-strings-exec-flags regexp\/noteol)$/;"	f
expect-timeout	/usr/share/guile/2.0/ice-9/expect.scm	/^(define expect-timeout #f)$/;"	f
expect-timeout-proc	/usr/share/guile/2.0/ice-9/expect.scm	/^(define expect-timeout-proc #f)$/;"	f
expires	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor expires #f)$/;"	f
expires	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor expires #f)$/;"	f
export	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (export name ...)$/;"	f
export!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (export! name ...)$/;"	f
export-syntax	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (export-syntax name ...)$/;"	f
extend-request	/usr/share/guile/2.0/web/client.scm	/^(define (extend-request r k v . additional)$/;"	f
extend-response	/usr/share/guile/2.0/web/server.scm	/^(define (extend-response r k v . additional)$/;"	f
extended-by!	/usr/share/guile/2.0/oop/goops.scm	/^(define (extended-by! gfs eg)$/;"	f
extract-condition	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (extract-condition c type)$/;"	f
f32	/usr/share/guile/2.0/srfi/srfi-4.scm	/^(define-bytevector-type f32 ieee-single-native 4)$/;"	f
f32vector-ref	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander f32vector-ref (vec i)$/;"	f
f32vector-set!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander f32vector-set! (vec i x)$/;"	f
f64	/usr/share/guile/2.0/srfi/srfi-4.scm	/^(define-bytevector-type f64 ieee-double-native 8)$/;"	f
f64vector-ref	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander f64vector-ref (vec i)$/;"	f
f64vector-set!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander f64vector-set! (vec i x)$/;"	f
fact	/usr/share/doc/guile-2.0-dev/examples/safe/untrusted.scm	/^(define (fact n)$/;"	f
fail	/usr/share/guile/2.0/scripts/compile.scm	/^(define (fail . messages)$/;"	f
fair-strip-subtask	/usr/share/guile/2.0/ice-9/runq.scm	/^(define (fair-strip-subtask . initial-strips)$/;"	f
false-if-exception	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax false-if-exception$/;"	f
fatal-error	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define (fatal-error fmt . args)$/;"	f
fdes->inport	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (fdes->inport fdes)$/;"	f
fdes->outport	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (fdes->outport fdes)$/;"	f
feature?	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (feature? sym)$/;"	f
fetch-pipe-info	/usr/share/guile/2.0/ice-9/popen.scm	/^(define (fetch-pipe-info port)$/;"	f
fifth	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (fifth x) (car (cddddr x)))$/;"	f
file-commentary	/usr/share/guile/2.0/ice-9/documentation.scm	/^(define (file-commentary filename . cust) ; (IN-LINE-RE AFTER-LINE-RE SCRUB)$/;"	f
file-exists?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define file-exists?$/;"	f
file-is-directory?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define file-is-directory?$/;"	f
file-option	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define-enumeration file-option$/;"	f
file-options->mode	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (file-options->mode file-options base-mode)$/;"	f
file-position	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define file-position ftell)$/;"	f
file-procedures	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (file-procedures data file)$/;"	f
file-set-position	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (file-set-position port offset #:optional (whence SEEK_SET))$/;"	f
file-system-fold	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define* (file-system-fold enter? leaf down up skip error init file-name$/;"	f
file-system-tree	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define* (file-system-tree file-name$/;"	f
fill-hole	/usr/share/guile/2.0/srfi/srfi-38.scm	/^(define (fill-hole x) (if (hole? x) (fill-hole (x)) x))$/;"	f
fill-string	/usr/share/guile/2.0/texinfo/string-utils.scm	/^(define (fill-string str . kwargs)$/;"	f
filter	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (filter pred?)$/;"	f
filter	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (filter pred?)$/;"	f
filter*	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (filter* pred l)$/;"	f
filter-empty-elements	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define (filter-empty-elements sdocbook)$/;"	f
filter-map	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (filter-map proc list1 . rest)$/;"	f
find-and-link-dynamic-module	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (find-and-link-dynamic-module module-name)$/;"	f
find-counter	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (find-counter data counter)$/;"	f
find-documentation-in-file	/usr/share/guile/2.0/ice-9/documentation.scm	/^(define (find-documentation-in-file name file)$/;"	f
find-duplicate	/usr/share/guile/2.0/oop/goops/util.scm	/^(define (find-duplicate l)	; find a duplicate in a list; #f otherwise$/;"	f
find-if	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (find-if pred l)$/;"	f
find-language-joint	/usr/share/guile/2.0/system/base/compile.scm	/^(define (find-language-joint from to)$/;"	f
find-operator	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (find-operator sym type)$/;"	f
find-std-int-doc	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (find-std-int-doc line input-port)$/;"	f
find-string-from-port?	/usr/share/guile/2.0/sxml/ssax/input-parse.scm	/^(define (find-string-from-port? str <input-port> . max-no-char)$/;"	f
find-submodules	/usr/share/guile/2.0/scripts/help.scm	/^(define (find-submodules head)$/;"	f
find-submodules	/usr/share/guile/2.0/scripts/list.scm	/^(define (find-submodules head)$/;"	f
find-vm-engine-frame	/usr/share/gdb/auto-load/libguile-2.0.so.22.7.2-gdb.scm	/^(define (find-vm-engine-frame)$/;"	f
finish	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (finish repl)$/;"	f
first	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define first car)$/;"	f
first-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax first-ec$/;"	f
first-set-bit	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define first-set-bit log2-binary-factors)$/;"	f
first-value	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (first-value expr)$/;"	f
fix-fold	/usr/share/guile/2.0/language/tree-il/fix-letrec.scm	/^(define fix-fold$/;"	f
fix-letrec!	/usr/share/guile/2.0/language/tree-il/fix-letrec.scm	/^(define (fix-letrec! x)$/;"	f
flatten-lambda	/usr/share/guile/2.0/language/tree-il/compile-glil.scm	/^(define (flatten-lambda x self-label allocation)$/;"	f
flatten-lambda-case	/usr/share/guile/2.0/language/tree-il/compile-glil.scm	/^(define (flatten-lambda-case lcase allocation self self-label fix-labels$/;"	f
flet	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial flet (loc args)$/;"	f
flet*	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial flet* (loc args)$/;"	f
float-regex	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define float-regex$/;"	f
fluid->parameter	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (fluid->parameter fluid #:optional (conv (lambda (x) x)))$/;"	f
fluid-let-syntax	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define-syntax fluid-let-syntax$/;"	f
flush-all-input	/usr/share/guile/2.0/system/repl/repl.scm	/^(define (flush-all-input)$/;"	f
flush-leading-whitespace	/usr/share/guile/2.0/system/repl/repl.scm	/^(define (flush-leading-whitespace)$/;"	f
flush-output-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (flush-output-port port)$/;"	f
flush-to-newline	/usr/share/guile/2.0/system/repl/repl.scm	/^(define (flush-to-newline) $/;"	f
fold	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (fold kons knil list1 . rest)$/;"	f
fold	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (fold kons knil lis1)$/;"	f
fold-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax fold-ec$/;"	f
fold-layout	/usr/share/guile/2.0/sxml/fold.scm	/^(define (fold-layout tree bindings params layout stylesheet)$/;"	f
fold-matches	/usr/share/guile/2.0/ice-9/regex.scm	/^(define* (fold-matches regexp string init proc #:optional (flags 0))$/;"	f
fold-right	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (fold-right kons knil clist1 . rest)$/;"	f
fold-right	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (fold-right kons knil lis1)$/;"	f
fold-values	/usr/share/guile/2.0/sxml/fold.scm	/^(define (fold-values proc list . seeds)$/;"	f
fold2	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (fold2 proc ls s0 s1)$/;"	f
fold3-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax fold3-ec$/;"	f
foldt	/usr/share/guile/2.0/sxml/fold.scm	/^(define (foldt fup fhere tree)$/;"	f
foldts	/usr/share/guile/2.0/sxml/fold.scm	/^(define (foldts fdown fup fhere seed tree)$/;"	f
foldts	/usr/share/guile/2.0/sxml/transform.scm	/^(define (foldts fdown fup fhere seed tree)$/;"	f
foldts	/usr/share/guile/2.0/sxml/upstream/SXML-tree-trans.scm	/^(define (foldts fdown fup fhere seed tree)$/;"	f
foldts*	/usr/share/guile/2.0/sxml/fold.scm	/^(define (foldts* fdown fup fhere seed tree)$/;"	f
foldts*-values	/usr/share/guile/2.0/sxml/fold.scm	/^(define (foldts*-values fdown fup fhere tree . seeds)$/;"	f
foo	/usr/share/doc/guile-2.0-dev/examples/modules/module-0.scm	/^(define (foo)$/;"	f
foo	/usr/share/doc/guile-2.0-dev/examples/modules/module-1.scm	/^(define (foo)$/;"	f
foo	/usr/share/doc/guile-2.0-dev/examples/modules/module-2.scm	/^(define (foo)$/;"	f
foo/bar	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (foo\/bar braz)$/;"	f
for-each	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define for-each$/;"	f
for-each	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define for-each$/;"	f
for-each*	/usr/share/guile/2.0/oop/goops/util.scm	/^(define (for-each* fn . l) 	; A for-each which accepts dotted lists (arg lists  $/;"	f
for-next-option	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (for-next-option proc argv kw-opts kw-args)$/;"	f
force	/usr/share/guile/2.0/srfi/srfi-45.scm	/^(define (force promise)$/;"	f
force-promises!	/usr/share/guile/2.0/language/elisp/parser.scm	/^(define (force-promises! data)$/;"	f
forget-callers	/usr/share/guile/2.0/system/xref.scm	/^(define (forget-callers callee mod-name)$/;"	f
forget-source	/usr/share/guile/2.0/system/xref.scm	/^(define (forget-source proc file line db)$/;"	f
forget-sources	/usr/share/guile/2.0/system/xref.scm	/^(define (forget-sources proc mod-name db)$/;"	f
format	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define format simple-format)$/;"	f
format	/usr/share/guile/2.0/ice-9/format.scm	/^(define (format destination format-string . format-args)$/;"	f
format-analysis	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define format-analysis$/;"	f
format-documentation	/usr/share/guile/2.0/system/repl/describe.scm	/^(define (format-documentation doc)$/;"	f
format-plain	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (format-plain entry)$/;"	f
format-string-argument-count	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define (format-string-argument-count fmt)$/;"	f
format-texinfo	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (format-texinfo entry)$/;"	f
format:version	/usr/share/guile/2.0/ice-9/format.scm	/^(define format:version "3.0")$/;"	f
fourth	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define fourth cadddr)$/;"	f
fragment	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (fragment tag . body)$/;"	f
fragment	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (fragment exp lp command type formals args accum)$/;"	f
fragment-pat	/usr/share/guile/2.0/web/uri.scm	/^(define fragment-pat$/;"	f
frame	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (frame repl #:optional idx)$/;"	f
frame->module	/usr/share/guile/2.0/system/repl/debug.scm	/^(define (frame->module frame)$/;"	f
frame->stack-vector	/usr/share/guile/2.0/system/repl/debug.scm	/^(define (frame->stack-vector frame)$/;"	f
frame-arguments	/usr/share/guile/2.0/system/vm/frame.scm	/^(define (frame-arguments frame)$/;"	f
frame-binding-ref	/usr/share/guile/2.0/system/vm/frame.scm	/^(define (frame-binding-ref frame var)$/;"	f
frame-binding-set!	/usr/share/guile/2.0/system/vm/frame.scm	/^(define (frame-binding-set! frame var val)$/;"	f
frame-bindings	/usr/share/guile/2.0/system/vm/frame.scm	/^(define (frame-bindings frame)$/;"	f
frame-call-representation	/usr/share/guile/2.0/system/vm/frame.scm	/^(define (frame-call-representation frame)$/;"	f
frame-environment	/usr/share/guile/2.0/system/vm/frame.scm	/^(define (frame-environment frame)$/;"	f
frame-lookup-binding	/usr/share/guile/2.0/system/vm/frame.scm	/^(define (frame-lookup-binding frame var)$/;"	f
frame-matcher	/usr/share/guile/2.0/system/vm/traps.scm	/^(define (frame-matcher proc match-objcode?)$/;"	f
frame-next-source	/usr/share/guile/2.0/system/vm/frame.scm	/^(define (frame-next-source frame)$/;"	f
frame-object-binding	/usr/share/guile/2.0/system/vm/frame.scm	/^(define (frame-object-binding frame obj)$/;"	f
frame-object-name	/usr/share/guile/2.0/system/vm/frame.scm	/^(define (frame-object-name frame obj)$/;"	f
frame-return-values	/usr/share/guile/2.0/system/vm/frame.scm	/^(define (frame-return-values frame)$/;"	f
free-identifier=?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define free-identifier=? #f)$/;"	f
frisk	/usr/share/guile/2.0/scripts/frisk.scm	/^(define (frisk . args)$/;"	f
from	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor from #f)$/;"	f
from-line-rx	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define from-line-rx   (make-regexp "^From "))$/;"	f
ftw	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define (ftw filename proc . options)$/;"	f
funcq-assoc	/usr/share/guile/2.0/ice-9/poe.scm	/^(define (funcq-assoc arg-list alist)$/;"	f
funcq-buffer	/usr/share/guile/2.0/ice-9/poe.scm	/^(define funcq-buffer (make-gc-buffer 256))$/;"	f
funcq-hash	/usr/share/guile/2.0/ice-9/poe.scm	/^(define (funcq-hash arg-list n)$/;"	f
funcq-memo	/usr/share/guile/2.0/ice-9/poe.scm	/^(define funcq-memo (make-weak-key-hash-table 523)) ; !!! randomly selected values$/;"	f
function	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial function (loc args)$/;"	f
function-slot	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define function-slot (@ (language elisp runtime) function-slot-module))$/;"	f
function-slot-module	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define function-slot-module '(language elisp runtime function-slot))$/;"	f
future	/usr/share/guile/2.0/ice-9/futures.scm	/^(define-syntax-rule (future body)$/;"	f
g-equal?	/usr/share/guile/2.0/oop/goops.scm	/^(define g-equal? (make-generic 'equal?))$/;"	f
gap-buffer	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define gap-buffer$/;"	f
gap-ofs!	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define gap-ofs! (record-modifier gap-buffer 'gap-ofs))$/;"	f
gap-ofs:	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define gap-ofs: (record-accessor gap-buffer 'gap-ofs))$/;"	f
gb->lines	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (gb->lines gb)$/;"	f
gb->string	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (gb->string gb)$/;"	f
gb-delete-char!	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (gb-delete-char! gb count)$/;"	f
gb-erase!	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (gb-erase! gb)$/;"	f
gb-filter!	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (gb-filter! gb string-proc)$/;"	f
gb-filter-lines!	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (gb-filter-lines! gb lines-proc)$/;"	f
gb-goto-char	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (gb-goto-char gb new-point)$/;"	f
gb-insert-char!	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (gb-insert-char! gb char)$/;"	f
gb-insert-string!	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (gb-insert-string! gb string)$/;"	f
gb-point	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (gb-point gb)$/;"	f
gb-point-max	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (gb-point-max gb)$/;"	f
gb-point-min	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (gb-point-min gb) 1)            ; no narrowing (for now)$/;"	f
gb?	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define gb? (record-predicate gap-buffer))$/;"	f
gc	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (gc repl)$/;"	f
gc-run-time	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (gc-run-time)$/;"	f
gc-time-taken	/usr/share/guile/2.0/statprof.scm	/^(define gc-time-taken 0)                ; gc time between statprof-start and$/;"	f
gcprof	/usr/share/guile/2.0/statprof.scm	/^(define* (gcprof thunk #:key (loop 1) (full-stacks? #f))$/;"	f
gen-delims	/usr/share/guile/2.0/web/uri.scm	/^(define gen-delims$/;"	f
generate-autoload	/usr/share/guile/2.0/scripts/generate-autoload.scm	/^(define (generate-autoload . args)$/;"	f
generate-ensure-global	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (generate-ensure-global loc sym module)$/;"	f
generate-let	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (generate-let loc module bindings body)$/;"	f
generate-let*	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (generate-let* loc module bindings body)$/;"	f
generate-temporaries	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define generate-temporaries #f)$/;"	f
generic-rassoc	/usr/share/guile/2.0/ice-9/list.scm	/^(define (generic-rassoc key alist =)$/;"	f
generic-write	/usr/share/guile/2.0/ice-9/pretty-print.scm	/^(define (generic-write$/;"	f
gensym?	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define (gensym? sym)$/;"	f
genwrite:newline-str	/usr/share/guile/2.0/ice-9/pretty-print.scm	/^(define genwrite:newline-str (make-string 1 #\\newline))$/;"	f
get	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define get object-property)$/;"	f
get	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define get object-property)$/;"	f
get	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define get object-property)$/;"	f
get-call-data	/usr/share/guile/2.0/statprof.scm	/^(define (get-call-data proc)$/;"	f
get-char	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (get-char port)$/;"	f
get-character	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define (get-character port in-string)$/;"	f
get-circular-marker	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define (get-circular-marker port)$/;"	f
get-datum	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (get-datum port)$/;"	f
get-environment-variable	/usr/share/guile/2.0/srfi/srfi-98.scm	/^(define get-environment-variable getenv)$/;"	f
get-environment-variables	/usr/share/guile/2.0/srfi/srfi-98.scm	/^(define (get-environment-variables)$/;"	f
get-expression	/usr/share/guile/2.0/language/elisp/parser.scm	/^(define (get-expression lex)$/;"	f
get-formatter	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (get-formatter char)$/;"	f
get-lexer	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define (get-lexer port)$/;"	f
get-lexer/1	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define (get-lexer\/1 port)$/;"	f
get-lexical-binding	/usr/share/guile/2.0/language/elisp/bindings.scm	/^(define (get-lexical-binding bindings sym)$/;"	f
get-line	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (get-line port)$/;"	f
get-list	/usr/share/guile/2.0/language/elisp/parser.scm	/^(define (get-list lex allow-dot close-square)$/;"	f
get-option	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (get-option argv kw-opts kw-args return)$/;"	f
get-proc-args	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (get-proc-args proc)$/;"	f
get-set-for-each	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (get-set-for-each proc class)$/;"	f
get-string-all	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (get-string-all port)$/;"	f
get-string-n	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (get-string-n port count)$/;"	f
get-symbol	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (get-symbol def-line)$/;"	f
get-symbol-or-number	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define (get-symbol-or-number port)$/;"	f
get-this	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define (get-this)$/;"	f
get-word	/usr/share/guile/2.0/system/base/types.scm	/^(define (get-word port)$/;"	f
getgrent	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (getgrent) (getgr))$/;"	f
getgrgid	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (getgrgid id) (getgr id))$/;"	f
getgrnam	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (getgrnam name) (getgr name))$/;"	f
gethostbyaddr	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (gethostbyaddr addr) (gethost addr))$/;"	f
gethostbyname	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (gethostbyname name) (gethost name))$/;"	f
gethostent	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (gethostent) (gethost))$/;"	f
getnetbyaddr	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (getnetbyaddr addr) (getnet addr))$/;"	f
getnetbyname	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (getnetbyname name) (getnet name))$/;"	f
getnetent	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (getnetent) (getnet))$/;"	f
getopt-long	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define* (getopt-long program-arguments option-desc-list$/;"	f
getprotobyname	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (getprotobyname name) (getproto name))$/;"	f
getprotobynumber	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (getprotobynumber addr) (getproto addr))$/;"	f
getprotoent	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (getprotoent) (getproto))$/;"	f
getpwent	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (getpwent) (getpw))$/;"	f
getpwnam	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (getpwnam name) (getpw name))$/;"	f
getpwuid	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (getpwuid uid) (getpw uid))$/;"	f
getservbyname	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (getservbyname name proto) (getserv name proto))$/;"	f
getservbyport	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (getservbyport port proto) (getserv port proto))$/;"	f
getservent	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (getservent) (getserv))$/;"	f
getter-and-setter-syntax	/usr/share/guile/2.0/ice-9/calling.scm	/^(define (getter-and-setter-syntax vars)$/;"	f
getter-copier	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define-syntax getter-copier$/;"	f
getter-index	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define-syntax getter-index$/;"	f
getter-type	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define-syntax getter-type$/;"	f
getter-with-setter	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define getter-with-setter make-procedure-with-setter)$/;"	f
gettext?	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define gettext? (cut proc-ref? <> gettext '_ <>))$/;"	f
glil	/usr/share/guile/2.0/language/glil/spec.scm	/^(define-language glil$/;"	f
glil->assembly	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (glil->assembly glil bindings source-alist label-alist$/;"	f
glr-driver	/usr/share/guile/2.0/system/base/lalr.upstream.scm	/^(define (glr-driver action-table goto-table reduction-table)$/;"	f
goops-error	/usr/share/guile/2.0/oop/goops.scm	/^(define (goops-error format-string . args)$/;"	f
goops-toplevel-definition	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define (goops-toplevel-definition proc args env)$/;"	f
graph-reachable-nodes	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define (graph-reachable-nodes root refs reachable)$/;"	f
graph-reachable-nodes*	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define (graph-reachable-nodes* roots refs)$/;"	f
grok-proc	/usr/share/guile/2.0/scripts/frisk.scm	/^(define (grok-proc default-module note-use!)$/;"	f
group-commands	/usr/share/guile/2.0/system/repl/command.scm	/^(define (group-commands g) (cdr g))$/;"	f
group-diff	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define (group-diff i-old i-new . options)$/;"	f
group-name	/usr/share/guile/2.0/system/repl/command.scm	/^(define (group-name g) (car g))$/;"	f
group:gid	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (group:gid obj) (vector-ref obj 2))$/;"	f
group:mem	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (group:mem obj) (vector-ref obj 3))$/;"	f
group:name	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (group:name obj) (vector-ref obj 0))$/;"	f
group:passwd	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (group:passwd obj) (vector-ref obj 1))$/;"	f
guard	/usr/share/guile/2.0/srfi/srfi-34.scm	/^(define-syntax guard$/;"	f
guess-hash-function	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (guess-hash-function equal-proc)$/;"	f
guile-gdb	/usr/share/gdb/auto-load/libguile-2.0.so.22.7.2-gdb.scm	/^(define-module (guile-gdb)$/;"	f
guile-ht-ctor	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (guile-ht-ctor weakness)$/;"	f
guile-primitive	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial guile-primitive (loc args)$/;"	f
guile-ref	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial guile-ref (loc args)$/;"	f
guile-user	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-module (guile-user)$/;"	f
guile-vector-copy	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define guile-vector-copy (@ (guile) vector-copy))$/;"	f
guile:disassemble	/usr/share/guile/2.0/system/repl/command.scm	/^(define (guile:disassemble x)$/;"	f
guile:eval	/usr/share/guile/2.0/ice-9/channel.scm	/^(define guile:eval eval)$/;"	f
handle-request	/usr/share/guile/2.0/web/server.scm	/^(define (handle-request handler request body state)$/;"	f
handle-system-error	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (handle-system-error key . args)$/;"	f
handle-system-error	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define (handle-system-error key . args)$/;"	f
handle-var-def	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (handle-var-def loc sym doc)$/;"	f
handler	/usr/share/doc/guile-2.0-dev/examples/web/hello.scm	/^(define (handler request body)$/;"	f
handler-for-index	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (handler-for-index trap-state idx)$/;"	f
hang-by-the-leaves	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define (hang-by-the-leaves trees)$/;"	f
hang-by-the-roots	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define (hang-by-the-roots interface)$/;"	f
has-duplicates?	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (has-duplicates? lst)$/;"	f
has-property?	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-method (has-property? (o <js-object>) p)$/;"	f
has-shown-debugger-hint?	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define has-shown-debugger-hint? #f)$/;"	f
has-suffix?	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (has-suffix? str suffix)$/;"	f
has-trailing-newline?	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (has-trailing-newline? str)$/;"	f
hash	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define hash (caller-with-default-size (@ (guile) hash)))$/;"	f
hash-bits	/usr/share/guile/2.0/language/tree-il.scm	/^(define-syntax hash-bits$/;"	f
hash-by-identity	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define hash-by-identity (caller-with-default-size hashq))$/;"	f
hash-comma	/usr/share/guile/2.0/srfi/srfi-10.scm	/^(define (hash-comma char port)$/;"	f
hash-table->alist	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table->alist ht)$/;"	f
hash-table-copy	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-copy ht)$/;"	f
hash-table-delete!	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-delete! ht key)$/;"	f
hash-table-exists?	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-exists? ht key)$/;"	f
hash-table-fold	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-fold ht f knil)$/;"	f
hash-table-keys	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-keys ht)$/;"	f
hash-table-mapping	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define* (hash-table-mapping #:optional (size 71) #:key$/;"	f
hash-table-mapping-hooks	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define hash-table-mapping-hooks$/;"	f
hash-table-merge!	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-merge! ht other-ht)$/;"	f
hash-table-ref	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-ref ht key . default-thunk-lst)$/;"	f
hash-table-ref/default	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-ref\/default ht key default)$/;"	f
hash-table-set!	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-set! ht key new-value)$/;"	f
hash-table-size	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-size ht)$/;"	f
hash-table-update!	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-update! ht key modifier . default-thunk-lst)$/;"	f
hash-table-update!/default	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-update!\/default ht key modifier default)$/;"	f
hash-table-values	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-values ht)$/;"	f
hash-table-walk	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (hash-table-walk ht proc)$/;"	f
hashq-cons	/usr/share/guile/2.0/ice-9/hcons.scm	/^(define (hashq-cons table a d)$/;"	f
hashq-cons-assoc	/usr/share/guile/2.0/ice-9/hcons.scm	/^(define (hashq-cons-assoc key l)$/;"	f
hashq-cons-create-handle!	/usr/share/guile/2.0/ice-9/hcons.scm	/^(define (hashq-cons-create-handle! table key init)$/;"	f
hashq-cons-get-handle	/usr/share/guile/2.0/ice-9/hcons.scm	/^(define (hashq-cons-get-handle table key)$/;"	f
hashq-cons-hash	/usr/share/guile/2.0/ice-9/hcons.scm	/^(define (hashq-cons-hash pair n)$/;"	f
hashq-cons-ref	/usr/share/guile/2.0/ice-9/hcons.scm	/^(define (hashq-cons-ref table key)$/;"	f
hashq-cons-set!	/usr/share/guile/2.0/ice-9/hcons.scm	/^(define (hashq-cons-set! table key val)$/;"	f
hashq-conser	/usr/share/guile/2.0/ice-9/hcons.scm	/^(define (hashq-conser hash-tab-or-size)$/;"	f
hashq-proc	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (hashq-proc proc n)$/;"	f
hashx-invoke	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define-macro (hashx-invoke hashx-proc ht-var . args)$/;"	f
header->string	/usr/share/guile/2.0/web/http.scm	/^(define (header->string sym)$/;"	f
header-cont-rx	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define header-cont-rx (make-regexp "^[ \\t]+"))$/;"	f
header-name-rx	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define header-name-rx (make-regexp "^([^:]+):[ \\t]*"))$/;"	f
header-parser	/usr/share/guile/2.0/web/http.scm	/^(define (header-parser sym)$/;"	f
header-validator	/usr/share/guile/2.0/web/http.scm	/^(define (header-validator sym)$/;"	f
header-writer	/usr/share/guile/2.0/web/http.scm	/^(define (header-writer sym)$/;"	f
help	/usr/share/guile/2.0/ice-9/session.scm	/^(define-macro (help . exp)$/;"	f
help	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (help repl . args)$/;"	f
help-doc	/usr/share/guile/2.0/ice-9/session.scm	/^(define (help-doc term regexp)$/;"	f
help-usage	/usr/share/guile/2.0/ice-9/session.scm	/^(define (help-usage)$/;"	f
hex->number	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (hex->number c)$/;"	f
hex-chars	/usr/share/guile/2.0/web/uri.scm	/^(define hex-chars$/;"	f
history-file	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-once history-file (string-append (getenv "HOME") "\/.guile_history"))$/;"	f
history-variable	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-once history-variable "GUILE_HISTORY")$/;"	f
hole?	/usr/share/guile/2.0/srfi/srfi-38.scm	/^(define (hole? x) (procedure? x))$/;"	f
host	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor host #f)$/;"	f
host-pat	/usr/share/guile/2.0/web/uri.scm	/^(define host-pat$/;"	f
hostent:addr-list	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (hostent:addr-list obj) (vector-ref obj 4))$/;"	f
hostent:addrtype	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (hostent:addrtype obj) (vector-ref obj 2))$/;"	f
hostent:aliases	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (hostent:aliases obj) (vector-ref obj 1))$/;"	f
hostent:length	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (hostent:length obj) (vector-ref obj 3))$/;"	f
hostent:name	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (hostent:name obj) (vector-ref obj 0))$/;"	f
ht-unspecified	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define ht-unspecified (cons *unspecified* "ht-value"))$/;"	f
html5-doctype	/usr/share/doc/guile-2.0-dev/examples/web/debug-sxml.scm	/^(define html5-doctype "<!DOCTYPE html>\\n")$/;"	f
http	/usr/share/guile/2.0/web/server/http.scm	/^(define-server-impl http$/;"	f
http-close	/usr/share/guile/2.0/web/server/http.scm	/^(define (http-close server)$/;"	f
http-delete	/usr/share/guile/2.0/web/client.scm	/^(define-http-verb http-delete$/;"	f
http-get	/usr/share/guile/2.0/web/client.scm	/^(define* (http-get uri #:key$/;"	f
http-get*	/usr/share/guile/2.0/web/client.scm	/^(define* (http-get* uri #:key$/;"	f
http-head	/usr/share/guile/2.0/web/client.scm	/^(define-http-verb http-head$/;"	f
http-open	/usr/share/guile/2.0/web/server/http.scm	/^(define* (http-open #:key$/;"	f
http-options	/usr/share/guile/2.0/web/client.scm	/^(define-http-verb http-options$/;"	f
http-post	/usr/share/guile/2.0/web/client.scm	/^(define-http-verb http-post$/;"	f
http-proxy-port?	/usr/share/guile/2.0/web/http.scm	/^(define (http-proxy-port? port) (%http-proxy-port? port))$/;"	f
http-put	/usr/share/guile/2.0/web/client.scm	/^(define-http-verb http-put$/;"	f
http-read	/usr/share/guile/2.0/web/server/http.scm	/^(define (http-read server)$/;"	f
http-trace	/usr/share/guile/2.0/web/client.scm	/^(define-http-verb http-trace$/;"	f
http-write	/usr/share/guile/2.0/web/server/http.scm	/^(define (http-write server client response body)$/;"	f
i+j->seed	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define (i+j->seed i j)$/;"	f
i-or-x	/usr/share/guile/2.0/scripts/frisk.scm	/^(define (i-or-x module)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/and-let-star.scm	/^(define-module (ice-9 and-let-star)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/binary-ports.scm	/^(define-module (ice-9 binary-ports)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/buffered-input.scm	/^(define-module (ice-9 buffered-input)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/calling.scm	/^(define-module (ice-9 calling)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/channel.scm	/^(define-module (ice-9 channel)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/command-line.scm	/^(define-module (ice-9 command-line)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define-module (ice-9 common-list)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/control.scm	/^(define-module (ice-9 control)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/curried-definitions.scm	/^(define-module (ice-9 curried-definitions)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/debug.scm	/^(define-module (ice-9 debug))$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define-module (ice-9 deprecated)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/documentation.scm	/^(define-module (ice-9 documentation)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/eval-string.scm	/^(define-module (ice-9 eval-string)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/expect.scm	/^(define-module (ice-9 expect)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/format.scm	/^(define-module (ice-9 format)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define-module (ice-9 ftw)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/futures.scm	/^(define-module (ice-9 futures)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define-module (ice-9 gap-buffer)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define-module (ice-9 getopt-long)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/hash-table.scm	/^(define-module (ice-9 hash-table)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/hcons.scm	/^(define-module  (ice-9 hcons)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/history.scm	/^(define-module (ice-9 history)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-module (ice-9 i18n)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/iconv.scm	/^(define-module (ice-9 iconv)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/lineio.scm	/^(define-module (ice-9 lineio)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/list.scm	/^(define-module (ice-9 list)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define-module (ice-9 local-eval)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/ls.scm	/^(define-module (ice-9 ls)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define-module (ice-9 mapping)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/match.scm	/^(define-module (ice-9 match)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/null.scm	/^(define-module (ice-9 null)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-module (ice-9 occam-channel)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/optargs.scm	/^(define-module (ice-9 optargs)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/poe.scm	/^(define-module  (ice-9 poe)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/poll.scm	/^(define-module (ice-9 poll)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/popen.scm	/^(define-module (ice-9 popen)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/pretty-print.scm	/^(define-module (ice-9 pretty-print)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/q.scm	/^(define-module (ice-9 q)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/r5rs.scm	/^(define-module (ice-9 r5rs)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/rdelim.scm	/^(define-module (ice-9 rdelim)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-module (ice-9 readline)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/receive.scm	/^(define-module (ice-9 receive)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/regex.scm	/^(define-module (ice-9 regex)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/runq.scm	/^(define-module (ice-9 runq)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/rw.scm	/^(define-module (ice-9 rw)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/safe-r5rs.scm	/^(define-module (ice-9 safe-r5rs)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/safe.scm	/^(define-module (ice-9 safe)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/save-stack.scm	/^(define-module (ice-9 save-stack)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define-module (ice-9 scm-style-repl)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/serialize.scm	/^(define-module (ice-9 serialize)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/session.scm	/^(define-module (ice-9 session)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/stack-catch.scm	/^(define-module (ice-9 stack-catch)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/streams.scm	/^(define-module (ice-9 streams)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define-module (ice-9 string-fun)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/syncase.scm	/^(define-module (ice-9 syncase)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/threads.scm	/^(define-module (ice-9 threads)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/time.scm	/^(define-module (ice-9 time)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/top-repl.scm	/^(define-module (ice-9 top-repl)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-module (ice-9 vlist)$/;"	f
ice-9	/usr/share/guile/2.0/ice-9/weak-vector.scm	/^(define-module (ice-9 weak-vector)$/;"	f
identifier-syntax	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define identifier-syntax$/;"	f
identifier-syntax	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define-syntax identifier-syntax$/;"	f
identifier-syntax-from-box	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define-syntax-rule (identifier-syntax-from-box box)$/;"	f
identifier?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define identifier? #f)$/;"	f
identity	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (identity x) x)$/;"	f
identity	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define (identity . args)$/;"	f
identity-deattr	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define (identity-deattr tag . body)$/;"	f
if	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial if (loc args)$/;"	f
if-match	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor if-match #f)$/;"	f
if-modified-since	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor if-modified-since #f)$/;"	f
if-none-match	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor if-none-match #f)$/;"	f
if-not=?	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax-rule (if-not=? arg ...)$/;"	f
if-range	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor if-range #f)$/;"	f
if-unmodified-since	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor if-unmodified-since #f)$/;"	f
if3	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax-rule (if3 c less equal greater)$/;"	f
if<=?	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax-rule (if<=? arg ...)$/;"	f
if<?	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax-rule (if<? arg ...)$/;"	f
if=?	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax-rule (if=? arg ...)$/;"	f
if>=?	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax-rule (if>=? arg ...)$/;"	f
if>?	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax-rule (if>? arg ...)$/;"	f
iface	/usr/share/guile/2.0/oop/goops/save.scm	/^(define iface (module-public-interface (current-module)))$/;"	f
ignore-list	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define ignore-list '())$/;"	f
ignore-list	/usr/share/guile/2.0/texinfo/html.scm	/^(define ignore-list$/;"	f
ignore-list	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define ignore-list$/;"	f
ignored?	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (ignored? tag)$/;"	f
immediate-receive	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (immediate-receive (ch <data-channel>))$/;"	f
immediate?	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (immediate? x)$/;"	f
immediate?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (immediate? (o <boolean>)) #t)$/;"	f
immediate?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (immediate? (o <char>)) #t)$/;"	f
immediate?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (immediate? (o <keyword>)) #t)$/;"	f
immediate?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (immediate? (o <null>)) #t)$/;"	f
immediate?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (immediate? (o <number>)) #t)$/;"	f
immediate?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (immediate? (o <symbol>)) #t)$/;"	f
immediate?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (immediate? (o <top>)) #f)$/;"	f
import	/usr/share/guile/2.0/ice-9/r6rs-libraries.scm	/^(define-syntax import$/;"	f
import	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (import repl . args)$/;"	f
improper->proper	/usr/share/guile/2.0/oop/goops/util.scm	/^(define (improper->proper ls)$/;"	f
in	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-option-interface$/;"	f
in	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (in repl module command-or-expression . args)$/;"	f
in-group?	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define (in-group? x group)$/;"	f
in-range?	/usr/share/guile/2.0/system/vm/traps.scm	/^(define (in-range? range i)$/;"	f
in-vicinity	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (in-vicinity vicinity file)$/;"	f
inc	/usr/share/guile/2.0/sxml/ssax.scm	/^(define inc 1+)$/;"	f
inc	/usr/share/guile/2.0/sxml/ssax/input-parse.scm	/^(define inc 1+)$/;"	f
inc-call-data-call-count!	/usr/share/guile/2.0/statprof.scm	/^(define (inc-call-data-call-count! cd)$/;"	f
inc-call-data-cum-sample-count!	/usr/share/guile/2.0/statprof.scm	/^(define (inc-call-data-cum-sample-count! cd)$/;"	f
inc-call-data-self-sample-count!	/usr/share/guile/2.0/statprof.scm	/^(define (inc-call-data-self-sample-count! cd)$/;"	f
include	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define include$/;"	f
include	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define-syntax include$/;"	f
include-from-path	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define include-from-path$/;"	f
include-from-path	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define-syntax include-from-path$/;"	f
include-from-path/filtered	/usr/share/guile/2.0/sxml/ssax.scm	/^(define-syntax include-from-path\/filtered$/;"	f
index	/usr/share/guile/2.0/texinfo.scm	/^(define (index command arguments fdown fup parent-seed)$/;"	f
index?	/usr/share/guile/2.0/ice-9/rdelim.scm	/^(define (index? n)$/;"	f
indices	/usr/share/guile/2.0/texinfo/indexing.scm	/^(define indices$/;"	f
inferior-object	/usr/share/guile/2.0/system/base/types.scm	/^(define inferior-object$/;"	f
inferior-port	/usr/share/guile/2.0/system/base/types.scm	/^(define (inferior-port backend type-number address)$/;"	f
inferior-smob	/usr/share/guile/2.0/system/base/types.scm	/^(define (inferior-smob backend type-number address)$/;"	f
inherit-print-state	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (inherit-print-state old-port new-port)$/;"	f
init-dynamic-module	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (init-dynamic-module modname)$/;"	f
init-js-bindings!	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define (init-js-bindings! mod)$/;"	f
initial-handler	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (initial-handler obj) $/;"	f
initial-space?	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define initial-space? (make-regexp "^[[:space:]]"))$/;"	f
initialize	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (initialize (ch <data-channel>) initargs)$/;"	f
initialize	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (initialize (applicable-struct <applicable-struct>) initargs)$/;"	f
initialize	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (initialize (class <class>) initargs)$/;"	f
initialize	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (initialize (eg <extended-generic>) initargs)$/;"	f
initialize	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (initialize (generic <generic>) initargs)$/;"	f
initialize	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (initialize (gws <generic-with-setter>) initargs)$/;"	f
initialize	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (initialize (method <method>) initargs)$/;"	f
initialize	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (initialize (object <object>) initargs)$/;"	f
initialize	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (initialize (env <environment>) initargs)$/;"	f
initialize-object-procedure	/usr/share/guile/2.0/oop/goops.scm	/^(define (initialize-object-procedure object initargs)$/;"	f
inline!	/usr/share/guile/2.0/language/tree-il/inline.scm	/^(define (inline! x)$/;"	f
inline-args	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (inline-args exp lp command type formals args accum)$/;"	f
inline-command?	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define (inline-command? command)$/;"	f
inline-content?	/usr/share/guile/2.0/texinfo.scm	/^(define (inline-content? content)$/;"	f
inline-text	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (inline-text exp lp command type formals args accum)$/;"	f
inline-text-args	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (inline-text-args exp lp command type formals args accum)$/;"	f
input-parse:init-buffer	/usr/share/guile/2.0/sxml/upstream/input-parse.scm	/^(define input-parse:init-buffer$/;"	f
input-port	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-once input-port (current-input-port))$/;"	f
insert-prep	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (insert-prep gb len)$/;"	f
inside-profiler?	/usr/share/guile/2.0/statprof.scm	/^(define inside-profiler? #f)$/;"	f
inspect	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (inspect repl (form))$/;"	f
inspect	/usr/share/guile/2.0/system/vm/inspect.scm	/^(define (inspect x)$/;"	f
install-trap-handler!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (install-trap-handler! handler #:optional (trap-state (the-trap-state)))$/;"	f
instrumented-source-files	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (instrumented-source-files data)$/;"	f
instrumented/executed-lines	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (instrumented\/executed-lines data file)$/;"	f
int?	/usr/share/guile/2.0/scripts/frisk.scm	/^(define int?  (make-object-property))   ; defined via `define-module'$/;"	f
integer-reader	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (integer-reader upto port)$/;"	f
integer-reader-exact	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (integer-reader-exact n port)$/;"	f
integer-regex	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define integer-regex (make-regexp "^[+-]?[0-9]+\\\\.?$"))$/;"	f
internal-add-method!	/usr/share/guile/2.0/oop/goops.scm	/^(define internal-add-method!$/;"	f
intersection	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (intersection l1 l2)$/;"	f
invalidate-compilation-cache!	/usr/share/guile/2.0/system/base/language.scm	/^(define (invalidate-compilation-cache!)$/;"	f
invalidate-method-cache!	/usr/share/guile/2.0/oop/goops.scm	/^(define (invalidate-method-cache! gf)$/;"	f
iota	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (iota n)$/;"	f
iota	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define* (iota count #:optional (start 0) (step 1))$/;"	f
ipv4-regexp	/usr/share/guile/2.0/web/uri.scm	/^(define ipv4-regexp$/;"	f
ipv6-host-pat	/usr/share/guile/2.0/web/uri.scm	/^(define ipv6-host-pat$/;"	f
ipv6-regexp	/usr/share/guile/2.0/web/uri.scm	/^(define ipv6-regexp$/;"	f
is-a?	/usr/share/guile/2.0/ice-9/match.scm	/^(define-syntax is-a?$/;"	f
is-a?	/usr/share/guile/2.0/oop/goops.scm	/^(define (is-a? obj class)$/;"	f
is-char?	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define (is-char? tested should-be)$/;"	f
iso-8601-date-time-format	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define iso-8601-date-time-format "~Y-~m-~dT~H:~M:~S~z")$/;"	f
item	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (item tag . elts)$/;"	f
item	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (item exp lp command type formals args accum)$/;"	f
itemize	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (itemize tag args . elts)$/;"	f
join	/usr/share/guile/2.0/language/tree-il/spec.scm	/^(define (join exps env)$/;"	f
join-symbols	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (join-symbols s)$/;"	f
join-timeout-exception	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define join-timeout-exception (list 'join-timeout-exception))$/;"	f
join-timeout-exception?	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (join-timeout-exception? obj) (eq? obj join-timeout-exception))$/;"	f
js-constructor	/usr/share/guile/2.0/language/ecmascript/function.scm	/^(define-method (js-constructor (o <applicable>))$/;"	f
js-init	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define (js-init)$/;"	f
js-module	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (js-module (o <js-global-object>))$/;"	f
js-prototype	/usr/share/guile/2.0/language/ecmascript/function.scm	/^(define-method (js-prototype (o <applicable>))$/;"	f
js-require	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define (js-require modstr)$/;"	f
julian-day->date	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (julian-day->date jdn . tz-offset)$/;"	f
julian-day->time-monotonic	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (julian-day->time-monotonic jdn)$/;"	f
julian-day->time-tai	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (julian-day->time-tai jdn)$/;"	f
julian-day->time-utc	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (julian-day->time-utc jdn)$/;"	f
keep-alive?	/usr/share/guile/2.0/web/server/http.scm	/^(define (keep-alive? response)$/;"	f
key	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (key tag . body)$/;"	f
key-value-list?	/usr/share/guile/2.0/web/http.scm	/^(define* (key-value-list? list #:optional$/;"	f
keyword->string	/usr/share/guile/2.0/srfi/srfi-88.scm	/^(define (keyword->string k)$/;"	f
keyword-like-symbol->keyword	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (keyword-like-symbol->keyword sym)$/;"	f
known-header?	/usr/share/guile/2.0/web/http.scm	/^(define (known-header? sym)$/;"	f
kth-largest	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define kth-largest$/;"	f
kw-arg-ref	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (kw-arg-ref args kw)$/;"	f
kw-do-map	/usr/share/guile/2.0/oop/goops.scm	/^(define (kw-do-map mapper f kwargs)$/;"	f
lalr-parser	/usr/share/guile/2.0/system/base/lalr.upstream.scm	/^(define-macro (lalr-parser . arguments)$/;"	f
lambda/this	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-macro (lambda\/this formals . body)$/;"	f
lang-parm	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (lang-parm lang parm)$/;"	f
language	/usr/share/guile/2.0/language/assembly.scm	/^(define-module (language assembly)$/;"	f
language	/usr/share/guile/2.0/language/assembly/compile-bytecode.scm	/^(define-module (language assembly compile-bytecode)$/;"	f
language	/usr/share/guile/2.0/language/assembly/decompile-bytecode.scm	/^(define-module (language assembly decompile-bytecode)$/;"	f
language	/usr/share/guile/2.0/language/assembly/disassemble.scm	/^(define-module (language assembly disassemble)$/;"	f
language	/usr/share/guile/2.0/language/assembly/spec.scm	/^(define-module (language assembly spec)$/;"	f
language	/usr/share/guile/2.0/language/brainfuck/compile-scheme.scm	/^(define-module (language brainfuck compile-scheme)$/;"	f
language	/usr/share/guile/2.0/language/brainfuck/compile-tree-il.scm	/^(define-module (language brainfuck compile-tree-il)$/;"	f
language	/usr/share/guile/2.0/language/brainfuck/parse.scm	/^(define-module (language brainfuck parse)$/;"	f
language	/usr/share/guile/2.0/language/brainfuck/spec.scm	/^(define-module (language brainfuck spec)$/;"	f
language	/usr/share/guile/2.0/language/bytecode/spec.scm	/^(define-module (language bytecode spec)$/;"	f
language	/usr/share/guile/2.0/language/ecmascript/array.scm	/^(define-module (language ecmascript array)$/;"	f
language	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-module (language ecmascript base)$/;"	f
language	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define-module (language ecmascript compile-tree-il)$/;"	f
language	/usr/share/guile/2.0/language/ecmascript/function.scm	/^(define-module (language ecmascript function)$/;"	f
language	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-module (language ecmascript impl)$/;"	f
language	/usr/share/guile/2.0/language/ecmascript/parse.scm	/^(define-module (language ecmascript parse)$/;"	f
language	/usr/share/guile/2.0/language/ecmascript/spec.scm	/^(define-module (language ecmascript spec)$/;"	f
language	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define-module (language ecmascript tokenize)$/;"	f
language	/usr/share/guile/2.0/language/elisp/bindings.scm	/^(define-module (language elisp bindings)$/;"	f
language	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define-module (language elisp compile-tree-il)$/;"	f
language	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define-module (language elisp lexer)$/;"	f
language	/usr/share/guile/2.0/language/elisp/parser.scm	/^(define-module (language elisp parser)$/;"	f
language	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define-module (language elisp runtime)$/;"	f
language	/usr/share/guile/2.0/language/elisp/runtime/function-slot.scm	/^(define-module (language elisp runtime function-slot)$/;"	f
language	/usr/share/guile/2.0/language/elisp/runtime/macros.scm	/^(define-module (language elisp runtime macros)$/;"	f
language	/usr/share/guile/2.0/language/elisp/runtime/subrs.scm	/^(define-module (language elisp runtime subrs)$/;"	f
language	/usr/share/guile/2.0/language/elisp/runtime/value-slot.scm	/^(define-module (language elisp runtime value-slot))$/;"	f
language	/usr/share/guile/2.0/language/elisp/spec.scm	/^(define-module (language elisp spec)$/;"	f
language	/usr/share/guile/2.0/language/glil.scm	/^(define-module (language glil)$/;"	f
language	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define-module (language glil compile-assembly)$/;"	f
language	/usr/share/guile/2.0/language/glil/spec.scm	/^(define-module (language glil spec)$/;"	f
language	/usr/share/guile/2.0/language/objcode/spec.scm	/^(define-module (language objcode spec)$/;"	f
language	/usr/share/guile/2.0/language/scheme/compile-tree-il.scm	/^(define-module (language scheme compile-tree-il)$/;"	f
language	/usr/share/guile/2.0/language/scheme/decompile-tree-il.scm	/^(define-module (language scheme decompile-tree-il)$/;"	f
language	/usr/share/guile/2.0/language/scheme/spec.scm	/^(define-module (language scheme spec)$/;"	f
language	/usr/share/guile/2.0/language/tree-il.scm	/^(define-module (language tree-il)$/;"	f
language	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define-module (language tree-il analyze)$/;"	f
language	/usr/share/guile/2.0/language/tree-il/canonicalize.scm	/^(define-module (language tree-il canonicalize)$/;"	f
language	/usr/share/guile/2.0/language/tree-il/compile-glil.scm	/^(define-module (language tree-il compile-glil)$/;"	f
language	/usr/share/guile/2.0/language/tree-il/cse.scm	/^(define-module (language tree-il cse)$/;"	f
language	/usr/share/guile/2.0/language/tree-il/debug.scm	/^(define-module (language tree-il debug)$/;"	f
language	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define-module (language tree-il effects)$/;"	f
language	/usr/share/guile/2.0/language/tree-il/fix-letrec.scm	/^(define-module (language tree-il fix-letrec)$/;"	f
language	/usr/share/guile/2.0/language/tree-il/inline.scm	/^(define-module (language tree-il inline)$/;"	f
language	/usr/share/guile/2.0/language/tree-il/optimize.scm	/^(define-module (language tree-il optimize)$/;"	f
language	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define-module (language tree-il peval)$/;"	f
language	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-module (language tree-il primitives)$/;"	f
language	/usr/share/guile/2.0/language/tree-il/spec.scm	/^(define-module (language tree-il spec)$/;"	f
language	/usr/share/guile/2.0/language/value/spec.scm	/^(define-module (language value spec)$/;"	f
language	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (language repl name)$/;"	f
last	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (last pair)$/;"	f
last-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax last-ec$/;"	f
last-modified	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor last-modified #f)$/;"	f
last-modified	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor last-modified #f)$/;"	f
last-n-digits	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (last-n-digits i n)$/;"	f
last-start-time	/usr/share/guile/2.0/statprof.scm	/^(define last-start-time #f)             ; start-time when timer is active.$/;"	f
late-receive	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (late-receive (ch <data-channel>))$/;"	f
latin-1-codec	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (latin-1-codec)$/;"	f
lazy	/usr/share/guile/2.0/srfi/srfi-45.scm	/^(define-syntax-rule (lazy exp)$/;"	f
leap-second-delta	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (leap-second-delta utc-seconds)$/;"	f
leap-second-table	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define leap-second-table$/;"	f
leap-second?	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (leap-second? second)$/;"	f
leap-year?	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (leap-year? year)$/;"	f
left-justify-string	/usr/share/guile/2.0/texinfo/string-utils.scm	/^(define* (left-justify-string str #:optional (width 80) (chr #\\space))$/;"	f
length*	/usr/share/guile/2.0/oop/goops/util.scm	/^(define (length* ls)$/;"	f
let	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial let (loc args)$/;"	f
let*	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define let*$/;"	f
let*	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define-syntax let*$/;"	f
let*	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial let* (loc args)$/;"	f
let*-values	/usr/share/guile/2.0/srfi/srfi-11.scm	/^(define-syntax let*-values$/;"	f
let*-values	/usr/share/guile/2.0/sxml/ssax.scm	/^(define-syntax let*-values$/;"	f
let*-values	/usr/share/guile/2.0/sxml/transform.scm	/^(define-macro (let*-values bindings . body)$/;"	f
let-dynamic	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (let-dynamic loc syms module vals body)$/;"	f
let-escape-continuation	/usr/share/guile/2.0/ice-9/control.scm	/^(define-syntax-rule (let-escape-continuation k body ...)$/;"	f
let-keywords	/usr/share/guile/2.0/ice-9/optargs.scm	/^(define-syntax let-keywords$/;"	f
let-keywords*	/usr/share/guile/2.0/ice-9/optargs.scm	/^(define-syntax let-keywords*$/;"	f
let-optional	/usr/share/guile/2.0/ice-9/optargs.scm	/^(define-syntax let-optional$/;"	f
let-optional*	/usr/share/guile/2.0/ice-9/optargs.scm	/^(define-syntax let-optional*$/;"	f
let-values	/usr/share/guile/2.0/srfi/srfi-11.scm	/^(define-syntax let-values$/;"	f
let-with-configuration-getter-and-setter	/usr/share/guile/2.0/ice-9/calling.scm	/^(defmacro let-with-configuration-getter-and-setter (vars-etc proc)$/;"	f
let/ec	/usr/share/guile/2.0/ice-9/control.scm	/^(define-syntax-rule (let\/ec k body ...)$/;"	f
letpar	/usr/share/guile/2.0/ice-9/threads.scm	/^(define-syntax-rule (letpar ((v e) ...) b0 b1 ...)$/;"	f
lex	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define (lex port)$/;"	f
lexer-error	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define (lexer-error port msg . args)$/;"	f
lexical-environment-type	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define-record-type lexical-environment-type$/;"	f
lexical-let	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial lexical-let (loc args)$/;"	f
lexical-let*	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial lexical-let* (loc args)$/;"	f
lexical-token	/usr/share/guile/2.0/system/base/lalr.upstream.scm	/^(define-record-type lexical-token$/;"	f
library	/usr/share/guile/2.0/ice-9/r6rs-libraries.scm	/^(define-syntax library$/;"	f
limn-sources	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (limn-sources sources)$/;"	f
line-execution-counts	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (line-execution-counts data file)$/;"	f
lineio-port?	/usr/share/guile/2.0/ice-9/lineio.scm	/^(define (lineio-port? port)$/;"	f
lines->ranges	/usr/share/guile/2.0/system/xref.scm	/^(define (lines->ranges file-table)$/;"	f
link-dynamic-module	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (link-dynamic-module filename initname)$/;"	f
lint	/usr/share/guile/2.0/scripts/lint.scm	/^(define (lint filename)$/;"	f
list*	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (list* . args)$/;"	f
list*	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (list* . args)$/;"	f
list*-join	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (list*-join l infix restfix)$/;"	f
list->stream	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (list->stream l)$/;"	f
list->stream	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (list->stream objs)$/;"	f
list->symbol	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (list->symbol . args)$/;"	f
list->vector	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define* (list->vector lst #:optional (start 0) (end (length lst)))$/;"	f
list->vlist	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (list->vlist lst)$/;"	f
list-commands	/usr/share/guile/2.0/scripts/help.scm	/^(define (list-commands all?)$/;"	f
list-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define list-compare$/;"	f
list-compare-as-vector	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define list-compare-as-vector$/;"	f
list-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax list-ec$/;"	f
list-index	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (list-index l k)$/;"	f
list-index	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (list-index pred clist1 . rest)$/;"	f
list-intersperse	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (list-intersperse src-l elem)$/;"	f
list-matches	/usr/share/guile/2.0/ice-9/regex.scm	/^(define* (list-matches regexp string #:optional (flags 0))$/;"	f
list-of-header-names?	/usr/share/guile/2.0/web/http.scm	/^(define (list-of-header-names? val)$/;"	f
list-of-strings?	/usr/share/guile/2.0/web/http.scm	/^(define (list-of-strings? val)$/;"	f
list-of?	/usr/share/guile/2.0/web/http.scm	/^(define (list-of? val pred)$/;"	f
list-scripts	/usr/share/guile/2.0/scripts/list.scm	/^(define (list-scripts . args)$/;"	f
list-tabulate	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (list-tabulate n init-proc)$/;"	f
list-traps	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (list-traps #:optional (trap-state (the-trap-state)))$/;"	f
list2set	/usr/share/guile/2.0/oop/goops.scm	/^(define (list2set l)	       $/;"	f
list=	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (list= elt= . rest)$/;"	f
lists->trees	/usr/share/guile/2.0/statprof.scm	/^(define (lists->trees lists equal?)$/;"	f
literal?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (literal? (info <boolean>))$/;"	f
literal?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (literal? o env)$/;"	f
lls	/usr/share/guile/2.0/ice-9/ls.scm	/^(define (lls . various-refs)$/;"	f
load	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax load$/;"	f
load	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (load repl file)$/;"	f
load-from-path	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (load-from-path name)$/;"	f
load-in-vicinity	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (load-in-vicinity dir file-name #:optional reader)$/;"	f
load-objects	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (load-objects (file <input-port>))$/;"	f
load-objects	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (load-objects (file <string>))$/;"	f
load-user-init	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (load-user-init)$/;"	f
load/lang	/usr/share/guile/2.0/ice-9/command-line.scm	/^(define (load\/lang f)$/;"	f
loaded-modules	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (loaded-modules)$/;"	f
local-compile	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define* (local-compile x e #:key (opts '()))$/;"	f
local-define	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (local-define names val)$/;"	f
local-define-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (local-define-module names mod)$/;"	f
local-definitions-in	/usr/share/guile/2.0/ice-9/ls.scm	/^(define (local-definitions-in root names)$/;"	f
local-eval	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define (local-eval x e)$/;"	f
local-ref	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (local-ref names)$/;"	f
local-ref-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (local-ref-module names)$/;"	f
local-remove	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (local-remove names)$/;"	f
local-set!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (local-set! names val)$/;"	f
local-tz-offset	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (local-tz-offset utc-time)$/;"	f
local-wrap	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define (local-wrap x e)$/;"	f
locale-abbr-month	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define locale-abbr-month       locale-month-short)$/;"	f
locale-abbr-month->index	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (locale-abbr-month->index string)$/;"	f
locale-abbr-weekday	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (locale-abbr-weekday n) (locale-day-short (+ 1 n)))$/;"	f
locale-abbr-weekday->index	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (locale-abbr-weekday->index string)$/;"	f
locale-am-string	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-am-string$/;"	f
locale-am-string/pm	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (locale-am-string\/pm hr)$/;"	f
locale-currency-symbol	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-monetary-langinfo-mapping locale-currency-symbol$/;"	f
locale-currency-symbol-precedes-negative?	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-monetary-langinfo-mapping locale-currency-symbol-precedes-negative?$/;"	f
locale-currency-symbol-precedes-positive?	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-monetary-langinfo-mapping locale-currency-symbol-precedes-positive?$/;"	f
locale-date+time-format	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-date+time-format$/;"	f
locale-date-format	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-date-format$/;"	f
locale-date-time-format	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define locale-date-time-format "~a ~b ~d ~H:~M:~S~z ~Y")$/;"	f
locale-day	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-vector-langinfo-mapping locale-day$/;"	f
locale-day-short	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-vector-langinfo-mapping locale-day-short$/;"	f
locale-decimal-point	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-decimal-point$/;"	f
locale-digit-grouping	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-digit-grouping$/;"	f
locale-encoding	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define (locale-encoding . locale)$/;"	f
locale-era	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-era$/;"	f
locale-era-date+time-format	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-era-date+time-format$/;"	f
locale-era-date-format	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-era-date-format$/;"	f
locale-era-time-format	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-era-time-format$/;"	f
locale-era-year	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-era-year$/;"	f
locale-long-month	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define locale-long-month       locale-month)$/;"	f
locale-long-month->index	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (locale-long-month->index string)$/;"	f
locale-long-weekday	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (locale-long-weekday n) (locale-day (+ 1 n)))$/;"	f
locale-long-weekday->index	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (locale-long-weekday->index string)$/;"	f
locale-monetary-decimal-point	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-monetary-decimal-point$/;"	f
locale-monetary-digit-grouping	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-monetary-digit-grouping$/;"	f
locale-monetary-fractional-digits	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-monetary-langinfo-mapping locale-monetary-fractional-digits$/;"	f
locale-monetary-negative-sign	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-monetary-negative-sign$/;"	f
locale-monetary-positive-sign	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-monetary-positive-sign$/;"	f
locale-monetary-thousands-separator	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-monetary-thousands-separator$/;"	f
locale-month	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-vector-langinfo-mapping locale-month$/;"	f
locale-month-short	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-vector-langinfo-mapping locale-month-short$/;"	f
locale-negative-separated-by-space?	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-monetary-langinfo-mapping locale-negative-separated-by-space?$/;"	f
locale-negative-sign-position	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-monetary-langinfo-mapping locale-negative-sign-position$/;"	f
locale-no-regexp	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-no-regexp$/;"	f
locale-pm-string	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-pm-string$/;"	f
locale-positive-separated-by-space?	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-monetary-langinfo-mapping locale-positive-separated-by-space?$/;"	f
locale-positive-sign-position	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-monetary-langinfo-mapping locale-positive-sign-position$/;"	f
locale-print-time-zone	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (locale-print-time-zone date port)$/;"	f
locale-reader	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (locale-reader port indexer)$/;"	f
locale-short-date-format	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define locale-short-date-format "~m\/~d\/~y")$/;"	f
locale-thousands-separator	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-thousands-separator$/;"	f
locale-time+am/pm-format	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-time+am\/pm-format$/;"	f
locale-time-format	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-time-format$/;"	f
locale-time-format	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define locale-time-format "~H:~M:~S")$/;"	f
locale-yes-regexp	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define-simple-langinfo-mapping locale-yes-regexp$/;"	f
locals	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (locals repl #:key (width (terminal-width)))$/;"	f
location	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define (location x)$/;"	f
location	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (location x)$/;"	f
location	/usr/share/guile/2.0/language/tree-il.scm	/^(define (location x)$/;"	f
location	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor location #f)$/;"	f
location-string	/usr/share/guile/2.0/system/base/message.scm	/^(define (location-string loc)$/;"	f
log	/usr/share/guile/2.0/language/tree-il/cse.scm	/^(define-syntax log$/;"	f
log	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define-syntax log$/;"	f
log*	/usr/share/guile/2.0/language/tree-il/cse.scm	/^(define (log* event . args)$/;"	f
log*	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (log* event . args)$/;"	f
logand	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander logand$/;"	f
logical-not	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define (logical-not x)$/;"	f
logior	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander logior$/;"	f
long-opt-no-value-rx	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define long-opt-no-value-rx   (make-regexp "^--([^=]+)$"))$/;"	f
long-opt-with-value-rx	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define long-opt-with-value-rx (make-regexp "^--([^=]+)=(.*)"))$/;"	f
lookahead-char	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (lookahead-char port)$/;"	f
looks-like-an-option	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define (looks-like-an-option string)$/;"	f
lookup	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define (lookup name env)$/;"	f
lookup	/usr/share/guile/2.0/srfi/srfi-10.scm	/^(define (lookup symbol)$/;"	f
lookup-command	/usr/share/guile/2.0/system/repl/command.scm	/^(define* (lookup-command key #:optional (table *command-table*))$/;"	f
lookup-compilation-order	/usr/share/guile/2.0/system/base/language.scm	/^(define (lookup-compilation-order from to)$/;"	f
lookup-decompilation-order	/usr/share/guile/2.0/system/base/language.scm	/^(define (lookup-decompilation-order from to)$/;"	f
lookup-duplicates-handlers	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (lookup-duplicates-handlers handler-names)$/;"	f
lookup-group	/usr/share/guile/2.0/system/repl/command.scm	/^(define (lookup-group name)$/;"	f
lookup-header-decl	/usr/share/guile/2.0/web/http.scm	/^(define (lookup-header-decl sym)$/;"	f
lookup-language	/usr/share/guile/2.0/system/base/language.scm	/^(define (lookup-language name)$/;"	f
lookup-server-impl	/usr/share/guile/2.0/web/server.scm	/^(define (lookup-server-impl impl)$/;"	f
lookup-source-procedures	/usr/share/guile/2.0/system/xref.scm	/^(define* (lookup-source-procedures canon-file line db)$/;"	f
lookup-warning-type	/usr/share/guile/2.0/system/base/message.scm	/^(define (lookup-warning-type name)$/;"	f
lr-driver	/usr/share/guile/2.0/system/base/lalr.upstream.scm	/^(define (lr-driver action-table goto-table reduction-table)$/;"	f
ls	/usr/share/guile/2.0/ice-9/ls.scm	/^(define (ls . various-refs)$/;"	f
lset-adjoin	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (lset-adjoin = list . rest)$/;"	f
lset-diff+intersection	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (lset-diff+intersection = list1 . rest)$/;"	f
lset-diff+intersection!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (lset-diff+intersection! = list1 . rest)$/;"	f
lset-difference	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (lset-difference = list1 . rest)$/;"	f
lset-intersection	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (lset-intersection = list1 . rest)$/;"	f
lset-intersection!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (lset-intersection! = list1 . rest)$/;"	f
lset-union	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (lset-union = . rest)$/;"	f
lset-union!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (lset-union! = . rest)$/;"	f
lset-xor	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (lset-xor = . rest)$/;"	f
lset-xor!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (lset-xor! = . rest)$/;"	f
lset<=	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (lset<= = . rest)$/;"	f
lset=	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (lset= = . rest)$/;"	f
macro-additional-stexi	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (macro-additional-stexi name type transformer)$/;"	f
macro-arguments	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (macro-arguments name type transformer)$/;"	f
macro-error	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define (macro-error msg . args)$/;"	f
main	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define main api-diff)$/;"	f
main	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define main autofrisk)$/;"	f
main	/usr/share/guile/2.0/scripts/compile.scm	/^(define main compile)$/;"	f
main	/usr/share/guile/2.0/scripts/disassemble.scm	/^(define main disassemble)$/;"	f
main	/usr/share/guile/2.0/scripts/display-commentary.scm	/^(define main display-commentary)$/;"	f
main	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define main doc-snarf)$/;"	f
main	/usr/share/guile/2.0/scripts/frisk.scm	/^(define main frisk)$/;"	f
main	/usr/share/guile/2.0/scripts/generate-autoload.scm	/^(define main generate-autoload)$/;"	f
main	/usr/share/guile/2.0/scripts/help.scm	/^(define (main . args)$/;"	f
main	/usr/share/guile/2.0/scripts/lint.scm	/^(define (main . files)$/;"	f
main	/usr/share/guile/2.0/scripts/list.scm	/^(define (main . args)$/;"	f
main	/usr/share/guile/2.0/scripts/punify.scm	/^(define main punify)$/;"	f
main	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define main read-rfc822)$/;"	f
main	/usr/share/guile/2.0/scripts/read-scheme-source.scm	/^(define main read-scheme-source)$/;"	f
main	/usr/share/guile/2.0/scripts/read-text-outline.scm	/^(define main read-text-outline)$/;"	f
main	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define main scan-api)$/;"	f
main	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define main snarf-check-and-output-texi)$/;"	f
main	/usr/share/guile/2.0/scripts/snarf-guile-m4-docs.scm	/^(define main snarf-guile-m4-docs)$/;"	f
main	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define main summarize-guile-TODO)$/;"	f
main	/usr/share/guile/2.0/scripts/use2dot.scm	/^(define main use2dot)$/;"	f
make	/usr/share/guile/2.0/oop/goops.scm	/^(define make make-instance)$/;"	f
make-accessor	/usr/share/guile/2.0/oop/goops.scm	/^(define* (make-accessor #:optional name)$/;"	f
make-autoload-interface	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (make-autoload-interface module name bindings)$/;"	f
make-binding	/usr/share/guile/2.0/system/vm/program.scm	/^(define (make-binding name boxed? index start end)$/;"	f
make-bindings	/usr/share/guile/2.0/language/elisp/bindings.scm	/^(define (make-bindings)$/;"	f
make-block	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (make-block base offset size hash-tab?)$/;"	f
make-body	/usr/share/guile/2.0/scripts/frisk.scm	/^(define (make-body alist)$/;"	f
make-bound-operands	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define* (make-bound-operands vars syms sources visit #:optional aliases)$/;"	f
make-box	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define-syntax-rule (make-box v)$/;"	f
make-box-list	/usr/share/doc/guile-2.0-dev/examples/box-dynamic-module/box-mixed.scm	/^(define (make-box-list . args)$/;"	f
make-buffered-input-port	/usr/share/guile/2.0/ice-9/buffered-input.scm	/^(define (make-buffered-input-port reader)$/;"	f
make-c-struct	/usr/share/guile/2.0/system/foreign.scm	/^(define (make-c-struct types vals)$/;"	f
make-call-data	/usr/share/guile/2.0/statprof.scm	/^(define (make-call-data proc call-count cum-sample-count self-sample-count)$/;"	f
make-channel	/usr/share/guile/2.0/ice-9/channel.scm	/^(define make-channel (record-constructor channel-type))$/;"	f
make-channel	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (make-channel (port <port>))$/;"	f
make-channel	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (make-channel)$/;"	f
make-char-id-reader	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (make-char-id-reader char)$/;"	f
make-char-quotator	/usr/share/guile/2.0/sxml/simple.scm	/^(define (make-char-quotator char-encoding)$/;"	f
make-chunked-input-port	/usr/share/guile/2.0/web/http.scm	/^(define* (make-chunked-input-port port #:key (keep-alive? #f))$/;"	f
make-chunked-output-port	/usr/share/guile/2.0/web/http.scm	/^(define* (make-chunked-output-port port #:key (keep-alive? #f))$/;"	f
make-circular-definitions	/usr/share/guile/2.0/language/elisp/parser.scm	/^(define (make-circular-definitions)$/;"	f
make-class	/usr/share/guile/2.0/oop/goops.scm	/^(define (make-class supers slots . options)$/;"	f
make-closed-binding	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (make-closed-binding open-binding start end)$/;"	f
make-closure-variable	/usr/share/guile/2.0/oop/goops.scm	/^(define (make-closure-variable class)$/;"	f
make-command-info	/usr/share/guile/2.0/system/repl/command.scm	/^(define (make-command-info proc arguments-reader)$/;"	f
make-command-parser	/usr/share/guile/2.0/texinfo.scm	/^(define (make-command-parser fdown fup str-handler)$/;"	f
make-completion-function	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-public (make-completion-function strings)$/;"	f
make-compound-condition	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (make-compound-condition . conditions)$/;"	f
make-compound-condition-type	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (make-compound-condition-type id parents)$/;"	f
make-condition	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (make-condition type . field+value)$/;"	f
make-condition-from-values	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (make-condition-from-values type values)$/;"	f
make-condition-type	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (make-condition-type id parent field-names)$/;"	f
make-condition-variable	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define make-condition-variable$/;"	f
make-contents	/usr/share/guile/2.0/texinfo.scm	/^(define (make-contents tree)$/;"	f
make-coop-client-proc	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (make-coop-client-proc coop-server)$/;"	f
make-coop-reader	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (make-coop-reader coop-repl)$/;"	f
make-coop-repl	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (make-coop-repl)$/;"	f
make-coop-repl-server	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (make-coop-repl-server)$/;"	f
make-copier-id	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define (make-copier-id type-name)$/;"	f
make-coverage-data	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (make-coverage-data procedure->ip-counts)$/;"	f
make-custom-textual-output-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (make-custom-textual-output-port id$/;"	f
make-default-socket	/usr/share/guile/2.0/web/server/http.scm	/^(define (make-default-socket family addr port)$/;"	f
make-delimited-input-port	/usr/share/guile/2.0/web/response.scm	/^(define (make-delimited-input-port port len keep-alive?)$/;"	f
make-display-item	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define (make-display-item show-who? show-parent?)$/;"	f
make-dom-parser	/usr/share/guile/2.0/texinfo.scm	/^(define (make-dom-parser)$/;"	f
make-edge	/usr/share/guile/2.0/scripts/frisk.scm	/^(define (make-edge type up down)$/;"	f
make-effects-analyzer	/usr/share/guile/2.0/language/tree-il/effects.scm	/^(define (make-effects-analyzer assigned-lexical?)$/;"	f
make-empty-attlist	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (make-empty-attlist) '())$/;"	f
make-empty-poll-set	/usr/share/guile/2.0/ice-9/poll.scm	/^(define* (make-empty-poll-set #:optional (pre-allocated 4))$/;"	f
make-entry	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (make-entry symbol signature docstrings options filename line)$/;"	f
make-enumerator	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define (make-enumerator obj)$/;"	f
make-enumerator	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (make-enumerator n)$/;"	f
make-exclusive-runq	/usr/share/guile/2.0/ice-9/runq.scm	/^(define (make-exclusive-runq)$/;"	f
make-extended-generic	/usr/share/guile/2.0/oop/goops.scm	/^(define* (make-extended-generic gfs #:optional name)$/;"	f
make-fair-runq	/usr/share/guile/2.0/ice-9/runq.scm	/^(define (make-fair-runq)$/;"	f
make-fold-modules	/usr/share/guile/2.0/ice-9/session.scm	/^(define (make-fold-modules init-thunk traverse extract)$/;"	f
make-fresh-user-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (make-fresh-user-module)$/;"	f
make-frisker	/usr/share/guile/2.0/scripts/frisk.scm	/^(define (make-frisker . options)$/;"	f
make-future	/usr/share/guile/2.0/ice-9/futures.scm	/^(define (make-future thunk)$/;"	f
make-gap-buffer	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (make-gap-buffer . init)        ; port\/string$/;"	f
make-gap-buffer-port	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (make-gap-buffer-port gb)$/;"	f
make-gc-buffer	/usr/share/guile/2.0/ice-9/hcons.scm	/^(define (make-gc-buffer n)$/;"	f
make-generic	/usr/share/guile/2.0/oop/goops.scm	/^(define* (make-generic #:optional name)$/;"	f
make-generic-bound-check-getter	/usr/share/guile/2.0/oop/goops.scm	/^(define (make-generic-bound-check-getter proc)$/;"	f
make-grok-proc	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define (make-grok-proc name form)$/;"	f
make-grouper	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define (make-grouper files)            ; \\\/^^^o\/ . o$/;"	f
make-hash-table	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define* (make-hash-table$/;"	f
make-hash-table-mapping	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define (make-hash-table-mapping table hash-proc assoc-proc)$/;"	f
make-hashq	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define (make-hashq k v)$/;"	f
make-id	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define (make-id template-id . data)$/;"	f
make-indenter	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (make-indenter n proc)$/;"	f
make-initial-:-dispatch	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define (make-initial-:-dispatch)$/;"	f
make-instance	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (make-instance (class <class>) . initargs)$/;"	f
make-int16	/usr/share/guile/2.0/language/assembly/disassemble.scm	/^(define (make-int16 byte1 byte2)$/;"	f
make-integer-exact-reader	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (make-integer-exact-reader n)$/;"	f
make-integer-reader	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (make-integer-reader upto)$/;"	f
make-label	/usr/share/guile/2.0/language/tree-il/compile-glil.scm	/^(define (make-label) (gensym ":L"))$/;"	f
make-lexer-buffer	/usr/share/guile/2.0/language/elisp/parser.scm	/^(define (make-lexer-buffer lex)$/;"	f
make-line-buffered-input-port	/usr/share/guile/2.0/ice-9/buffered-input.scm	/^(define (make-line-buffered-input-port reader)$/;"	f
make-line-buffering-input-port	/usr/share/guile/2.0/ice-9/lineio.scm	/^(define (make-line-buffering-input-port underlying-port)$/;"	f
make-line-parser	/usr/share/guile/2.0/scripts/read-text-outline.scm	/^(define (make-line-parser re specs)$/;"	f
make-local	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (make-local i)$/;"	f
make-locale-reader	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (make-locale-reader indexer)$/;"	f
make-mapper	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (make-mapper array)$/;"	f
make-mapping	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define make-mapping (record-constructor mapping-type))$/;"	f
make-mapping-hooks	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define make-mapping-hooks (perfect-funcq 17 (record-constructor mapping-hooks-type)))$/;"	f
make-members-proc	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define (make-members-proc name members)$/;"	f
make-meta	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (make-meta bindings sources arities tail)$/;"	f
make-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (make-module #:optional (size 31) (uses '()) (binder #f))$/;"	f
make-modules-in	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (make-modules-in module name)$/;"	f
make-mutable-parameter	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (make-mutable-parameter init #:optional (converter identity))$/;"	f
make-mutex	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define make-mutex$/;"	f
make-nested-counter	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (make-nested-counter continuation data current)$/;"	f
make-object-channel	/usr/share/guile/2.0/ice-9/channel.scm	/^(define (make-object-channel printer)$/;"	f
make-object-property	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (make-object-property)$/;"	f
make-open-binding	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (make-open-binding name boxed? index)$/;"	f
make-operand	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define* (make-operand var sym #:optional source visit alias)$/;"	f
make-option-spec	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define (make-option-spec name)$/;"	f
make-parameter	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (make-parameter init #:optional (conv (lambda (x) x)))$/;"	f
make-parser	/usr/share/guile/2.0/language/ecmascript/parse.scm	/^(define (make-parser)$/;"	f
make-prompt-tag	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define make-prompt-tag$/;"	f
make-prototype	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (make-prototype def-line)$/;"	f
make-q	/usr/share/guile/2.0/ice-9/q.scm	/^(define (make-q) (cons '() #f))$/;"	f
make-random-source	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define (make-random-source)$/;"	f
make-readable	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (make-readable obj expr)$/;"	f
make-readline-port	/usr/share/guile/2.0/ice-9/readline.scm	/^(define (make-readline-port)$/;"	f
make-record-type	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (make-record-type type-name fields #:optional printer)$/;"	f
make-recursive-counter	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (make-recursive-counter effort-limit size-limit orig current)$/;"	f
make-repl	/usr/share/guile/2.0/system/repl/common.scm	/^(define* (make-repl lang #:optional debug)$/;"	f
make-rw-port	/usr/share/guile/2.0/ice-9/popen.scm	/^(define (make-rw-port read-port write-port)$/;"	f
make-safe-module	/usr/share/guile/2.0/ice-9/safe.scm	/^(define (make-safe-module)$/;"	f
make-sequence*	/usr/share/guile/2.0/language/tree-il/fix-letrec.scm	/^(define (make-sequence* src exps)$/;"	f
make-setter-name	/usr/share/guile/2.0/oop/goops.scm	/^(define (make-setter-name name)$/;"	f
make-srfi-4-vector	/usr/share/guile/2.0/srfi/srfi-4/gnu.scm	/^(define make-srfi-4-vector (@@ (srfi srfi-4) make-srfi-4-vector))$/;"	f
make-stream	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (make-stream m state)$/;"	f
make-struct	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander make-struct (vtable tail-size . args)$/;"	f
make-struct/no-tail	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (make-struct\/no-tail vtable . args)$/;"	f
make-subordinate-runq-to	/usr/share/guile/2.0/ice-9/runq.scm	/^(define (make-subordinate-runq-to superior-runq basic-runq)$/;"	f
make-surrounder	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (make-surrounder str)$/;"	f
make-tcp-server-socket	/usr/share/guile/2.0/system/repl/server.scm	/^(define* (make-tcp-server-socket #:key$/;"	f
make-text-outline-reader	/usr/share/guile/2.0/scripts/read-text-outline.scm	/^(define (make-text-outline-reader re specs)$/;"	f
make-text-wrapper	/usr/share/guile/2.0/texinfo/string-utils.scm	/^(define* (make-text-wrapper #:key$/;"	f
make-thread	/usr/share/guile/2.0/ice-9/threads.scm	/^(define-syntax-rule (make-thread proc arg ...)$/;"	f
make-thread	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define make-thread $/;"	f
make-ticker	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (make-ticker str)$/;"	f
make-time	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (make-time type nanosecond second)$/;"	f
make-timer	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define (make-timer)$/;"	f
make-token	/usr/share/guile/2.0/texinfo.scm	/^(define (make-token kind head) (cons kind head))$/;"	f
make-tokenizer	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (make-tokenizer port)$/;"	f
make-tokenizer/1	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (make-tokenizer\/1 port)$/;"	f
make-top-counter	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (make-top-counter effort-limit size-limit continuation data)$/;"	f
make-transcoder	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define* (make-transcoder codec$/;"	f
make-transformer-from-box	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define (make-transformer-from-box id trans)$/;"	f
make-tree-il-folder	/usr/share/guile/2.0/language/tree-il.scm	/^(define-syntax-rule (make-tree-il-folder seed ...)$/;"	f
make-unbound-operands	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (make-unbound-operands vars syms)$/;"	f
make-underliner	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (make-underliner char)$/;"	f
make-unix-domain-server-socket	/usr/share/guile/2.0/system/repl/server.scm	/^(define* (make-unix-domain-server-socket #:key (path "\/tmp\/guile-socket"))$/;"	f
make-variable-transformer	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define make-variable-transformer$/;"	f
make-variable-transformer	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define (make-variable-transformer proc)$/;"	f
make-void-runq	/usr/share/guile/2.0/ice-9/runq.scm	/^(define (make-void-runq)$/;"	f
make-xml-token	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (make-xml-token kind head) (cons kind head))$/;"	f
many-space?	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define many-space? (make-regexp "[[:space:]][[:space:]][[:space:]]"))$/;"	f
map	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define map$/;"	f
map	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define map$/;"	f
map!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define map! map)$/;"	f
map*	/usr/share/guile/2.0/oop/goops/util.scm	/^(define (map* fn . l) 		; A map which accepts dotted lists (arg lists  $/;"	f
map-globals-needed	/usr/share/guile/2.0/language/elisp/bindings.scm	/^(define (map-globals-needed bindings proc)$/;"	f
map-in-order	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define map-in-order map)$/;"	f
map-in-order	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define map-in-order map)$/;"	f
map-union	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (map-union proc lst)$/;"	f
map-union	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (map-union proc lst)$/;"	f
mapappend	/usr/share/guile/2.0/oop/goops/util.scm	/^(define mapappend append-map)$/;"	f
mapping-create-handle!	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define (mapping-create-handle! map key init)$/;"	f
mapping-data	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define mapping-data (record-accessor mapping-type 'data))$/;"	f
mapping-get-handle	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define (mapping-get-handle map key)$/;"	f
mapping-hooks	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define mapping-hooks (record-accessor mapping-type 'hooks))$/;"	f
mapping-hooks-create-handle	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define mapping-hooks-create-handle (record-accessor mapping-hooks-type 'create-handle))$/;"	f
mapping-hooks-get-handle	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define mapping-hooks-get-handle (record-accessor mapping-hooks-type 'get-handle))$/;"	f
mapping-hooks-remove	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define mapping-hooks-remove (record-accessor mapping-hooks-type 'remove))$/;"	f
mapping-hooks-type	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define mapping-hooks-type (make-record-type 'mapping-hooks '(get-handle$/;"	f
mapping-hooks?	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define mapping-hooks? (record-predicate mapping-hooks-type))$/;"	f
mapping-ref	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define* (mapping-ref map key #:optional dflt)$/;"	f
mapping-remove!	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define (mapping-remove! map key)$/;"	f
mapping-set!	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define (mapping-set! map key val)$/;"	f
mapping-type	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define mapping-type (make-record-type 'mapping '(hooks data)))$/;"	f
mapping?	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define mapping? (record-predicate mapping-type))$/;"	f
mark-global-needed!	/usr/share/guile/2.0/language/elisp/bindings.scm	/^(define (mark-global-needed! bindings sym module)$/;"	f
massage-usage	/usr/share/guile/2.0/scripts/snarf-guile-m4-docs.scm	/^(define (massage-usage line)$/;"	f
match	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match$/;"	f
match-bit-pattern	/usr/share/guile/2.0/system/base/types.scm	/^(define-syntax match-bit-pattern$/;"	f
match-cell	/usr/share/guile/2.0/system/base/types.scm	/^(define-syntax match-cell$/;"	f
match-cell-clauses	/usr/share/guile/2.0/system/base/types.scm	/^(define-syntax match-cell-clauses$/;"	f
match-cell-words	/usr/share/guile/2.0/system/base/types.scm	/^(define-syntax match-cell-words$/;"	f
match-check-ellipse	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-check-ellipse$/;"	f
match-check-identifier	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-check-identifier$/;"	f
match-drop-first-arg	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-drop-first-arg$/;"	f
match-drop-ids	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-drop-ids$/;"	f
match-extract-quasiquote-vars	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-extract-quasiquote-vars$/;"	f
match-extract-quasiquote-vars-step	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-extract-quasiquote-vars-step$/;"	f
match-extract-vars	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-extract-vars$/;"	f
match-extract-vars-step	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-extract-vars-step$/;"	f
match-gen-ellipses	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-gen-ellipses$/;"	f
match-gen-or	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-gen-or$/;"	f
match-gen-or-step	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-gen-or-step$/;"	f
match-gen-search	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-gen-search$/;"	f
match-gen-vector-ellipses	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-gen-vector-ellipses$/;"	f
match-lambda	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-lambda$/;"	f
match-lambda*	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-lambda*$/;"	f
match-let	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-let$/;"	f
match-let*	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-let*$/;"	f
match-let/helper	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-let\/helper$/;"	f
match-letrec	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-letrec$/;"	f
match-named-let	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-named-let$/;"	f
match-next	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-next$/;"	f
match-one	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-one$/;"	f
match-quasiquote	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-quasiquote$/;"	f
match-quasiquote-step	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-quasiquote-step$/;"	f
match-record-refs	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-record-refs$/;"	f
match-scm	/usr/share/guile/2.0/system/base/types.scm	/^(define-syntax match-scm$/;"	f
match-scm-clauses	/usr/share/guile/2.0/system/base/types.scm	/^(define-syntax match-scm-clauses$/;"	f
match-syntax-error	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-syntax-error$/;"	f
match-tuck-ids	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-tuck-ids$/;"	f
match-two	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-two$/;"	f
match-vector	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-vector$/;"	f
match-vector-step	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-vector-step$/;"	f
match-vector-tail	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-vector-tail$/;"	f
match-vector-tail-two	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-vector-tail-two$/;"	f
match-vector-two	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-vector-two$/;"	f
match-verify-no-ellipses	/usr/share/guile/2.0/ice-9/match.upstream.scm	/^(define-syntax match-verify-no-ellipses$/;"	f
match:count	/usr/share/guile/2.0/ice-9/regex.scm	/^(define (match:count match)$/;"	f
match:end	/usr/share/guile/2.0/ice-9/regex.scm	/^(define* (match:end match #:optional (n 0))$/;"	f
match:prefix	/usr/share/guile/2.0/ice-9/regex.scm	/^(define (match:prefix match)$/;"	f
match:start	/usr/share/guile/2.0/ice-9/regex.scm	/^(define* (match:start match #:optional (n 0))$/;"	f
match:string	/usr/share/guile/2.0/ice-9/regex.scm	/^(define (match:string match)$/;"	f
match:substring	/usr/share/guile/2.0/ice-9/regex.scm	/^(define* (match:substring match #:optional (n 0))$/;"	f
match:suffix	/usr/share/guile/2.0/ice-9/regex.scm	/^(define (match:suffix match)$/;"	f
max-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define max-compare$/;"	f
max-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax max-ec$/;"	f
max-forwards	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor max-forwards #f)$/;"	f
maybe-simplify-to-eq	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define maybe-simplify-to-eq$/;"	f
member	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define* (member x ls #:optional (= equal?))$/;"	f
member-if	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (member-if pred l)$/;"	f
memoize-effective-method!	/usr/share/guile/2.0/oop/goops/dispatch.scm	/^(define (memoize-effective-method! gf args applicable)$/;"	f
memoize-method!	/usr/share/guile/2.0/oop/goops/dispatch.scm	/^(define (memoize-method! gf args)$/;"	f
memory-port	/usr/share/guile/2.0/system/base/types.scm	/^(define-syntax memory-port$/;"	f
merge-accessors	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (merge-accessors (module <module>)$/;"	f
merge-generics	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (merge-generics (module <module>)$/;"	f
merge-lists	/usr/share/guile/2.0/oop/goops.scm	/^(define (merge-lists reversed-partial-result inputs)$/;"	f
meta-command	/usr/share/guile/2.0/system/repl/command.scm	/^(define (meta-command repl)$/;"	f
meta-command-token	/usr/share/guile/2.0/system/repl/repl.scm	/^(define meta-command-token (cons 'meta 'command))$/;"	f
meta-reader	/usr/share/guile/2.0/system/repl/repl.scm	/^(define (meta-reader lang env)$/;"	f
method	/usr/share/guile/2.0/oop/goops.scm	/^(define-syntax method$/;"	f
method-formals	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (method-formals (m <method>))$/;"	f
method-formals	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define method-formals$/;"	f
method-more-specific?	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (method-more-specific? (m1 <method>) (m2 <method>) targs)$/;"	f
method-n-specializers	/usr/share/guile/2.0/oop/goops.scm	/^(define (method-n-specializers m)$/;"	f
method-source	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (method-source (m <method>))$/;"	f
method-stexi-arguments	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (method-stexi-arguments method)$/;"	f
min-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define min-compare$/;"	f
min-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax min-ec$/;"	f
min-length	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define (min-length vs)$/;"	f
mod	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define mod modulo)$/;"	f
mod-down-ls	/usr/share/guile/2.0/scripts/frisk.scm	/^(define mod-down-ls dn-ls)$/;"	f
mod-int?	/usr/share/guile/2.0/scripts/frisk.scm	/^(define mod-int? int?)$/;"	f
mod-up-ls	/usr/share/guile/2.0/scripts/frisk.scm	/^(define mod-up-ls up-ls)$/;"	f
modified-julian-day->date	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (modified-julian-day->date jdn . tz-offset)$/;"	f
modified-julian-day->time-monotonic	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (modified-julian-day->time-monotonic jdn)$/;"	f
modified-julian-day->time-tai	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (modified-julian-day->time-tai jdn)$/;"	f
modified-julian-day->time-utc	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (modified-julian-day->time-utc jdn)$/;"	f
module	/usr/share/guile/2.0/sxml/match.scm	/^(define-syntax module$/;"	f
module	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (module repl . args)$/;"	f
module-0	/usr/share/doc/guile-2.0-dev/examples/modules/module-0.scm	/^(define-module (module-0))$/;"	f
module-1	/usr/share/doc/guile-2.0-dev/examples/modules/module-1.scm	/^(define-module (module-1))$/;"	f
module-2	/usr/share/doc/guile-2.0-dev/examples/modules/module-2.scm	/^(define-module (module-2))$/;"	f
module-add!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-add! m v var)$/;"	f
module-add!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-add! module sym var)$/;"	f
module-autoload!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-autoload! module . args)$/;"	f
module-bound?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-bound? m v)$/;"	f
module-call-observers	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-call-observers m)$/;"	f
module-clear!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-clear! m)$/;"	f
module-command-name	/usr/share/guile/2.0/scripts/help.scm	/^(define (module-command-name mod)$/;"	f
module-commentary	/usr/share/guile/2.0/ice-9/session.scm	/^(define (module-commentary name)$/;"	f
module-commentary	/usr/share/guile/2.0/scripts/help.scm	/^(define (module-commentary mod)$/;"	f
module-commentary	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define module-commentary (@@ (ice-9 session) module-commentary))$/;"	f
module-defer-observers	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define module-defer-observers #f)$/;"	f
module-defer-observers-mutex	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define module-defer-observers-mutex (make-mutex 'recursive))$/;"	f
module-defer-observers-table	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define module-defer-observers-table (make-hash-table))$/;"	f
module-define!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-define! module name value)$/;"	f
module-define!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-define! module sym val)$/;"	f
module-define-submodule!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-define-submodule! module name submodule)$/;"	f
module-defined-hook	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define module-defined-hook (make-hook 1))$/;"	f
module-defined?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-defined? module name)$/;"	f
module-ensure-local-variable!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-ensure-local-variable! module symbol)$/;"	f
module-eval-closure	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(set! module-eval-closure$/;"	s
module-export!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-export! m names)$/;"	f
module-export!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define module-export! #f)$/;"	f
module-export-all!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-export-all! mod)$/;"	f
module-export-list	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (module-export-list sym-name)$/;"	f
module-filename	/usr/share/guile/2.0/ice-9/session.scm	/^(define (module-filename name)          ; fixme: better way? \/ done elsewhere?$/;"	f
module-filename	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (module-filename name)$/;"	f
module-for-each	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-for-each proc module)$/;"	f
module-locally-bound?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-locally-bound? m v)$/;"	f
module-make-local-var!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-make-local-var! m v)$/;"	f
module-map	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-map proc module)$/;"	f
module-modified	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-modified m)$/;"	f
module-name	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-name x)$/;"	f
module-name	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define module-name$/;"	f
module-name->filename-frag	/usr/share/guile/2.0/scripts/display-commentary.scm	/^(define (module-name->filename-frag ls) ; todo: export or move$/;"	f
module-name->node-name	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (module-name->node-name sym-name)$/;"	f
module-obarray-get-handle	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-obarray-get-handle ob key)$/;"	f
module-obarray-ref	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-obarray-ref ob key)$/;"	f
module-obarray-remove!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-obarray-remove! ob key)$/;"	f
module-obarray-set!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-obarray-set! ob key val)$/;"	f
module-observe	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-observe module proc)$/;"	f
module-observe-weak	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (module-observe-weak module observer-id #:optional (proc observer-id))$/;"	f
module-procedures	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (module-procedures module)$/;"	f
module-public-interface	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(set! module-public-interface$/;"	s
module-re-export!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-re-export! m names)$/;"	f
module-ref	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-ref module name . rest)$/;"	f
module-ref	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-ref module sym)$/;"	f
module-ref-submodule	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-ref-submodule module name)$/;"	f
module-remove!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-remove! m v)$/;"	f
module-replace!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-replace! m names)$/;"	f
module-search	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-search fn m v)$/;"	f
module-set!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-set! module name value)$/;"	f
module-stexi-documentation	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define* (module-stexi-documentation sym-name$/;"	f
module-symbol-binding	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-symbol-binding m v . opt-val)$/;"	f
module-symbol-interned?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-symbol-interned? m v)$/;"	f
module-symbol-local-binding	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-symbol-local-binding m v . opt-val)$/;"	f
module-symbol-locally-interned?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-symbol-locally-interned? m v)$/;"	f
module-unobserve	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-unobserve token)$/;"	f
module-use!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-use! module interface)$/;"	f
module-use-interfaces!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (module-use-interfaces! module interfaces)$/;"	f
monetary-amount->locale-string	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define* (monetary-amount->locale-string amount intl?$/;"	f
monitor	/usr/share/guile/2.0/ice-9/threads.scm	/^(define-syntax-rule (monitor first rest ...)$/;"	f
month-assoc	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define month-assoc '((1 . 0)   (2 . 31)   (3 . 59)   (4 . 90)$/;"	f
move->fdes	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (move->fdes fd\/port fd)$/;"	f
msub	/usr/share/guile/2.0/scripts/read-text-outline.scm	/^(define (msub n)$/;"	f
must	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (must pred obj func msg args ...)$/;"	f
must-every	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (must-every pred objs func msg args ...)$/;"	f
must-not	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (must-not pred obj func msg args ...)$/;"	f
mutex-lock!	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (mutex-lock! mutex . args) $/;"	f
mutex-name	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (mutex-name mutex)$/;"	f
mutex-specific	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (mutex-specific mutex)$/;"	f
mutex-specific-set!	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (mutex-specific-set! mutex obj)$/;"	f
mutex-state	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (mutex-state mutex)$/;"	f
mutex-unlock!	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (mutex-unlock! mutex . args) $/;"	f
n-for-each-par-map	/usr/share/guile/2.0/ice-9/threads.scm	/^(define (n-for-each-par-map n s-proc p-proc . arglists)$/;"	f
n-par-for-each	/usr/share/guile/2.0/ice-9/threads.scm	/^(define (n-par-for-each n proc . arglists)$/;"	f
n-par-map	/usr/share/guile/2.0/ice-9/threads.scm	/^(define (n-par-map n proc . arglists)$/;"	f
name-bindings!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (name-bindings! alist env)$/;"	f
name-compare	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define name-compare$/;"	f
name-prefix?	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define (name-prefix? x prefix)$/;"	f
named-module-use!	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (named-module-use! user usee)$/;"	f
nano	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define nano 1000000000)           ; nanoseconds in a second$/;"	f
narrow-stack->vector	/usr/share/guile/2.0/system/repl/debug.scm	/^(define (narrow-stack->vector stack . args)$/;"	f
native-eol-style	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (native-eol-style)$/;"	f
native-transcoder	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (native-transcoder)$/;"	f
natural-year	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (natural-year n)$/;"	f
negate	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (negate proc)$/;"	f
negate-primitive	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define (negate-primitive prim)$/;"	f
negative?	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander negative? (x)$/;"	f
nested-define!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (nested-define! root names val)$/;"	f
nested-define-module!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (nested-define-module! root names module)$/;"	f
nested-ref	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (nested-ref root names)$/;"	f
nested-ref-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (nested-ref-module root names)$/;"	f
nested-remove!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (nested-remove! root names)$/;"	f
nested-set!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (nested-set! root names val)$/;"	f
netent:addrtype	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (netent:addrtype obj) (vector-ref obj 2))$/;"	f
netent:aliases	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (netent:aliases obj) (vector-ref obj 1))$/;"	f
netent:name	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (netent:name obj) (vector-ref obj 0))$/;"	f
netent:net	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (netent:net obj) (vector-ref obj 3))$/;"	f
new	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define new (record-constructor gap-buffer '()))$/;"	f
new	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-method (new o . initargs)$/;"	f
new-array	/usr/share/guile/2.0/language/ecmascript/array.scm	/^(define (new-array . vals)$/;"	f
new-disabled-trap	/usr/share/guile/2.0/system/vm/traps.scm	/^(define (new-disabled-trap vm enable disable)$/;"	f
new-enabled-trap	/usr/share/guile/2.0/system/vm/traps.scm	/^(define (new-enabled-trap vm frame enable disable)$/;"	f
new-input-prompt	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-once new-input-prompt "")$/;"	f
new-object	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (new-object . pairs)$/;"	f
next	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (next repl)$/;"	f
next-ephemeral-index!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (next-ephemeral-index! trap-state)$/;"	f
next-index!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (next-index! trap-state)$/;"	f
next-instruction	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (next-instruction repl)$/;"	f
next-token	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (next-token port div?)$/;"	f
next-token	/usr/share/guile/2.0/sxml/ssax/input-parse.scm	/^(define-opt (next-token prefix-skipped-chars break-chars$/;"	f
next-token	/usr/share/guile/2.0/sxml/upstream/input-parse.scm	/^(define-opt (next-token prefix-skipped-chars break-chars$/;"	f
next-token-of	/usr/share/guile/2.0/sxml/upstream/input-parse.scm	/^(define-opt (next-token-of incl-list\/pred$/;"	f
next-token-old	/usr/share/guile/2.0/sxml/upstream/input-parse.scm	/^(define-opt (next-token-old prefix-skipped-chars break-chars$/;"	f
nftw	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define (nftw filename proc . control-flags)$/;"	f
ngettext?	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define ngettext? (cut proc-ref? <> ngettext 'N_ <>))$/;"	f
nil-value	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (nil-value loc)$/;"	f
nil-value	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define nil-value #nil)$/;"	f
ninth	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (ninth x) (car (cddddr (cddddr x))))$/;"	f
nl	/usr/share/guile/2.0/sxml/ssax.scm	/^(define nl "\\n")$/;"	f
no-applicable-method	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (no-applicable-method (gf <generic>) args)$/;"	f
no-data	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define no-data '(no-data))$/;"	f
no-escape-punctuation	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define no-escape-punctuation (string->char-set "-+=*\/_~!@$%^&:<>{}?."))$/;"	f
no-method	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (no-method (gf <generic>) args)$/;"	f
no-next-method	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (no-next-method (gf <generic>) args)$/;"	f
node	/usr/share/guile/2.0/texinfo/html.scm	/^(define (node tag args)$/;"	f
node-closure	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (node-closure test-pred?)	    $/;"	f
node-closure	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (node-closure test-pred?)	    $/;"	f
node-eq?	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (node-eq? other)$/;"	f
node-eq?	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (node-eq? other)$/;"	f
node-equal?	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (node-equal? other)$/;"	f
node-equal?	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (node-equal? other)$/;"	f
node-join	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (node-join . selectors)$/;"	f
node-join	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (node-join . selectors)$/;"	f
node-or	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (node-or . converters)$/;"	f
node-or	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (node-or . converters)$/;"	f
node-parent	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (node-parent rootnode)$/;"	f
node-parent	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (node-parent rootnode)$/;"	f
node-pos	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (node-pos n)$/;"	f
node-pos	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (node-pos n)$/;"	f
node-reduce	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (node-reduce . converters)$/;"	f
node-reduce	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (node-reduce . converters)$/;"	f
node-reverse	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define node-reverse $/;"	f
node-reverse	/usr/share/guile/2.0/sxml/xpath.scm	/^(define node-reverse $/;"	f
node-self	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define node-self filter)$/;"	f
node-self	/usr/share/guile/2.0/sxml/xpath.scm	/^(define node-self filter)$/;"	f
node-trace	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (node-trace title)$/;"	f
node-trace	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (node-trace title)$/;"	f
node-typeof?	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (node-typeof? crit)$/;"	f
node-typeof?	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (node-typeof? crit)$/;"	f
nodeset?	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (nodeset? x)$/;"	f
nodeset?	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (nodeset? x)$/;"	f
non-negative-integer?	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (non-negative-integer? x) (and (integer? x) (>= x 0)))$/;"	f
non-negative-integer?	/usr/share/guile/2.0/system/vm/traps.scm	/^(define (non-negative-integer? x)$/;"	f
non-negative-integer?	/usr/share/guile/2.0/web/http.scm	/^(define (non-negative-integer? code)$/;"	f
non-negative-integer?	/usr/share/guile/2.0/web/request.scm	/^(define (non-negative-integer? n)$/;"	f
non-negative-integer?	/usr/share/guile/2.0/web/response.scm	/^(define (non-negative-integer? n)$/;"	f
normalize-date	/usr/share/guile/2.0/web/http.scm	/^(define (normalize-date date)$/;"	f
not-extended-by!	/usr/share/guile/2.0/oop/goops.scm	/^(define (not-extended-by! gfs eg)$/;"	f
not-found	/usr/share/guile/2.0/ice-9/poe.scm	/^(define not-found (list 'not-found))$/;"	f
not-pair?	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (not-pair? x)$/;"	f
notany	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (notany pred . ls)$/;"	f
notevery	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (notevery pred . ls)$/;"	f
notify-completion	/usr/share/guile/2.0/ice-9/futures.scm	/^(define (notify-completion future)$/;"	f
ns-per-guile-tick	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define ns-per-guile-tick (\/ 1000000000 internal-time-units-per-second))$/;"	f
null-environment	/usr/share/guile/2.0/ice-9/safe-r5rs.scm	/^(define (null-environment n)$/;"	f
null-interface	/usr/share/guile/2.0/ice-9/safe-r5rs.scm	/^(define null-interface (resolve-interface '(ice-9 null)))$/;"	f
null-list?	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (null-list? x)$/;"	f
null-pointer?	/usr/share/guile/2.0/system/foreign.scm	/^(define (null-pointer? pointer)$/;"	f
number->locale-string	/usr/share/guile/2.0/ice-9/i18n.scm	/^(define* (number->locale-string number$/;"	f
number-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define (number-compare x y)$/;"	f
obj-and-prototypes	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define (obj-and-prototypes o)$/;"	f
objcode	/usr/share/guile/2.0/language/objcode/spec.scm	/^(define-language objcode$/;"	f
objcode->value	/usr/share/guile/2.0/language/objcode/spec.scm	/^(define (objcode->value x e opts)$/;"	f
object->assembly	/usr/share/guile/2.0/language/assembly.scm	/^(define (object->assembly x)$/;"	f
object->number	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (object->number o error?)$/;"	f
object->string	/usr/share/guile/2.0/ice-9/channel.scm	/^(define object->string$/;"	f
object->string	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (object->string o error?)$/;"	f
object->value	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (object->value o)$/;"	f
object->value/number	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (object->value\/number o)$/;"	f
object->value/string	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define (object->value\/string o)$/;"	f
object-documentation	/usr/share/guile/2.0/ice-9/documentation.scm	/^(define (object-documentation object)$/;"	f
object-info	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (object-info o env)$/;"	f
object-names	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define object-names (make-weak-key-hash-table))$/;"	f
object-specifics	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define object-specifics (make-weak-key-hash-table))$/;"	f
object-stexi-documentation	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define* (object-stexi-documentation object #:optional (name "[unknown]")$/;"	f
oc:consequence	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-syntax oc:consequence$/;"	f
oc:first-channel	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-syntax oc:first-channel$/;"	f
oc:immediate-dispatch	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-syntax oc:immediate-dispatch$/;"	f
oc:late-dispatch	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-syntax oc:late-dispatch$/;"	f
oc:lock	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-syntax oc:lock$/;"	f
oc:set-handshake-channel	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-syntax oc:set-handshake-channel$/;"	f
oc:unlock	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-syntax oc:unlock$/;"	f
oc:unset-handshake-channel	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-syntax oc:unset-handshake-channel$/;"	f
on-module-modified	/usr/share/guile/2.0/system/xref.scm	/^(define (on-module-modified m)$/;"	f
on-source-modified	/usr/share/guile/2.0/system/xref.scm	/^(define (on-source-modified m)$/;"	f
only-non-null	/usr/share/guile/2.0/oop/goops.scm	/^(define (only-non-null lst)$/;"	f
oop	/usr/share/guile/2.0/oop/goops.scm	/^(define-module (oop goops)$/;"	f
oop	/usr/share/guile/2.0/oop/goops/accessors.scm	/^(define-module (oop goops accessors)$/;"	f
oop	/usr/share/guile/2.0/oop/goops/active-slot.scm	/^(define-module (oop goops active-slot)$/;"	f
oop	/usr/share/guile/2.0/oop/goops/compile.scm	/^(define-module (oop goops compile)$/;"	f
oop	/usr/share/guile/2.0/oop/goops/composite-slot.scm	/^(define-module (oop goops composite-slot)$/;"	f
oop	/usr/share/guile/2.0/oop/goops/describe.scm	/^(define-module (oop goops describe)$/;"	f
oop	/usr/share/guile/2.0/oop/goops/dispatch.scm	/^(define-module (oop goops dispatch)$/;"	f
oop	/usr/share/guile/2.0/oop/goops/internal.scm	/^(define-module (oop goops internal)$/;"	f
oop	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-module (oop goops save)$/;"	f
oop	/usr/share/guile/2.0/oop/goops/simple.scm	/^(define-module (oop goops simple)$/;"	f
oop	/usr/share/guile/2.0/oop/goops/stklos.scm	/^(define-module (oop goops stklos)$/;"	f
oop	/usr/share/guile/2.0/oop/goops/util.scm	/^(define-module (oop goops util)$/;"	f
open-arity	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (open-arity addr nreq nopt rest kw arities)$/;"	f
open-binding	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (open-binding bindings vars start)$/;"	f
open-file-input-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define* (open-file-input-port filename$/;"	f
open-file-input/output-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define* (open-file-input\/output-port filename$/;"	f
open-file-output-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define* (open-file-output-port filename$/;"	f
open-input-file	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (open-input-file$/;"	f
open-input-file	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (open-input-file str)$/;"	f
open-input-output-pipe	/usr/share/guile/2.0/ice-9/popen.scm	/^(define (open-input-output-pipe command)$/;"	f
open-input-pipe	/usr/share/guile/2.0/ice-9/popen.scm	/^(define (open-input-pipe command)$/;"	f
open-input-string	/usr/share/guile/2.0/srfi/srfi-6.scm	/^(define (open-input-string s)$/;"	f
open-io-file	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (open-io-file str) $/;"	f
open-output-file	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (open-output-file file #:key (binary #f) (encoding #f))$/;"	f
open-output-file	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (open-output-file str)$/;"	f
open-output-pipe	/usr/share/guile/2.0/ice-9/popen.scm	/^(define (open-output-pipe command)$/;"	f
open-output-string	/usr/share/guile/2.0/srfi/srfi-6.scm	/^(define (open-output-string)$/;"	f
open-pipe	/usr/share/guile/2.0/ice-9/popen.scm	/^(define (open-pipe command mode)$/;"	f
open-pipe*	/usr/share/guile/2.0/ice-9/popen.scm	/^(define (open-pipe* mode command . args)$/;"	f
open-server	/usr/share/guile/2.0/web/server.scm	/^(define (open-server impl open-params)$/;"	f
open-socket-for-uri	/usr/share/guile/2.0/web/client.scm	/^(define (open-socket-for-uri uri-or-string)$/;"	f
open-string-input-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (open-string-input-port str)$/;"	f
open-string-output-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (open-string-output-port)$/;"	f
optimize	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (optimize repl (form))$/;"	f
optimize!	/usr/share/guile/2.0/language/tree-il/optimize.scm	/^(define (optimize! x env opts)$/;"	f
option	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define option #f)                      ; for future "-m"$/;"	f
option	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (option repl . args)$/;"	f
option-ref	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define (option-ref options key default)$/;"	f
option-spec	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define-record-type option-spec$/;"	f
options	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-option-interface$/;"	f
or	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax or$/;"	f
or-map	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (or-map f lst)$/;"	f
or?	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (or? . args)$/;"	f
out-of-range	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (out-of-range proc arg)$/;"	f
output-port	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-once output-port (current-output-port))$/;"	f
owner	/usr/share/guile/2.0/ice-9/serialize.scm	/^(define owner #f)$/;"	f
package-stexi-documentation	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define* (package-stexi-documentation modules name filename$/;"	f
package-stexi-documentation-for-include	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define* (package-stexi-documentation-for-include modules module-descriptions$/;"	f
package-stexi-extended-menu	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (package-stexi-extended-menu name module-pairs script-pairs$/;"	f
package-stexi-generic-menu	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (package-stexi-generic-menu name entries)$/;"	f
package-stexi-standard-copying	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (package-stexi-standard-copying name version updated years$/;"	f
package-stexi-standard-menu	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (package-stexi-standard-menu name modules module-descriptions$/;"	f
package-stexi-standard-prologue	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (package-stexi-standard-prologue name filename category$/;"	f
package-stexi-standard-titlepage	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (package-stexi-standard-titlepage name version updated authors)$/;"	f
padding	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (padding n pad-with length)$/;"	f
pair-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define pair-compare$/;"	f
pair-compare-car	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define (pair-compare-car compare)$/;"	f
pair-compare-cdr	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define (pair-compare-cdr compare)$/;"	f
pair-fold	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (pair-fold kons knil clist1 . rest)$/;"	f
pair-fold-right	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (pair-fold-right kons knil clist1 . rest)$/;"	f
pair-for-each	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (pair-for-each f clist1 . rest)$/;"	f
pairwise-not=?	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define pairwise-not=?$/;"	f
par-for-each	/usr/share/guile/2.0/ice-9/threads.scm	/^(define par-for-each (par-mapper for-each (const *unspecified*)))$/;"	f
par-map	/usr/share/guile/2.0/ice-9/threads.scm	/^(define par-map (par-mapper map cons))$/;"	f
par-mapper	/usr/share/guile/2.0/ice-9/threads.scm	/^(define (par-mapper mapper cons)$/;"	f
para	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (para tag . body)$/;"	f
paragraph	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (paragraph exp lp command type formals args accum)$/;"	f
parallel	/usr/share/guile/2.0/ice-9/threads.scm	/^(define-syntax parallel$/;"	f
parallelize	/usr/share/guile/2.0/ice-9/serialize.scm	/^(define-macro (parallelize . forms)$/;"	f
param-delimiters	/usr/share/guile/2.0/web/http.scm	/^(define param-delimiters (char-set #\\, #\\; #\\=))$/;"	f
param-value-delimiters	/usr/share/guile/2.0/web/http.scm	/^(define param-value-delimiters (char-set-adjoin char-set:whitespace #\\, #\\;))$/;"	f
parameter-converter	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (parameter-converter p)$/;"	f
parameter-fluid	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (parameter-fluid p)$/;"	f
parameter?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (parameter? x)$/;"	f
parameterize	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax parameterize$/;"	f
parse-args	/usr/share/guile/2.0/scripts/compile.scm	/^(define (parse-args args)$/;"	f
parse-asctime-date	/usr/share/guile/2.0/web/http.scm	/^(define (parse-asctime-date str)$/;"	f
parse-authority	/usr/share/guile/2.0/web/uri.scm	/^(define (parse-authority authority fail)$/;"	f
parse-c-struct	/usr/share/guile/2.0/system/foreign.scm	/^(define (parse-c-struct foreign types)$/;"	f
parse-challenge	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-challenge str #:optional$/;"	f
parse-challenges	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-challenges str #:optional (val-parser default-val-parser)$/;"	f
parse-credentials	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-credentials str #:optional (val-parser default-val-parser)$/;"	f
parse-date	/usr/share/guile/2.0/web/http.scm	/^(define (parse-date str)$/;"	f
parse-entity-tag	/usr/share/guile/2.0/web/http.scm	/^(define (parse-entity-tag val)$/;"	f
parse-entity-tag-list	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-entity-tag-list val #:optional$/;"	f
parse-entry	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (parse-entry docstrings options def-line filename line-no)$/;"	f
parse-environment-args	/usr/share/guile/2.0/texinfo.scm	/^(define parse-environment-args$/;"	f
parse-eol-text-args	/usr/share/guile/2.0/texinfo.scm	/^(define (parse-eol-text-args command port)$/;"	f
parse-error	/usr/share/guile/2.0/language/elisp/parser.scm	/^(define (parse-error token msg . args)$/;"	f
parse-glil	/usr/share/guile/2.0/language/glil.scm	/^(define (parse-glil x)$/;"	f
parse-header	/usr/share/guile/2.0/web/http.scm	/^(define (parse-header sym val)$/;"	f
parse-http-method	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-http-method str #:optional (start 0) (end (string-length str)))$/;"	f
parse-http-version	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-http-version str #:optional (start 0) (end (string-length str)))$/;"	f
parse-inline-text-args	/usr/share/guile/2.0/texinfo.scm	/^(define (parse-inline-text-args port spec text)$/;"	f
parse-key-value-list	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-key-value-list str #:optional$/;"	f
parse-lambda-case	/usr/share/guile/2.0/ice-9/optargs.scm	/^(define (parse-lambda-case spec inits args)$/;"	f
parse-media-type	/usr/share/guile/2.0/web/http.scm	/^(define (parse-media-type str)$/;"	f
parse-message	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define (parse-message port)$/;"	f
parse-month	/usr/share/guile/2.0/web/http.scm	/^(define (parse-month str start end)$/;"	f
parse-non-negative-integer	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-non-negative-integer val #:optional (start 0)$/;"	f
parse-opaque-string	/usr/share/guile/2.0/web/http.scm	/^(define (parse-opaque-string str)$/;"	f
parse-option-spec	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define (parse-option-spec desc)$/;"	f
parse-param-component	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-param-component str #:optional$/;"	f
parse-param-list	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-param-list str #:optional$/;"	f
parse-qstring	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-qstring str #:optional$/;"	f
parse-quality	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-quality str #:optional (start 0) (end (string-length str)))$/;"	f
parse-quality-list	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-quality-list str)$/;"	f
parse-request-uri	/usr/share/guile/2.0/web/http.scm	/^(define* (parse-request-uri str #:optional (start 0) (end (string-length str)))$/;"	f
parse-rfc-822-date	/usr/share/guile/2.0/web/http.scm	/^(define (parse-rfc-822-date str space zone-offset)$/;"	f
parse-rfc-850-date	/usr/share/guile/2.0/web/http.scm	/^(define (parse-rfc-850-date str comma space zone-offset)$/;"	f
parse-table-args	/usr/share/guile/2.0/texinfo.scm	/^(define (parse-table-args command port)$/;"	f
parse-tree-il	/usr/share/guile/2.0/language/tree-il.scm	/^(define (parse-tree-il exp)$/;"	f
parse-zone-offset	/usr/share/guile/2.0/web/http.scm	/^(define (parse-zone-offset str start)$/;"	f
parser-error	/usr/share/guile/2.0/sxml/ssax.scm	/^(define (parser-error port message . rest)$/;"	f
parser-error	/usr/share/guile/2.0/sxml/ssax/input-parse.scm	/^(define (parser-error port message . rest)$/;"	f
parser-error	/usr/share/guile/2.0/texinfo.scm	/^(define (parser-error port message . rest)$/;"	f
partition*	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define (partition* pred vhash)$/;"	f
partition-vars	/usr/share/guile/2.0/language/tree-il/fix-letrec.scm	/^(define (partition-vars x)$/;"	f
pass-1!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (pass-1! alist env)$/;"	f
pass-2!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (pass-2! env)$/;"	f
passthrough	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (passthrough tag . body)$/;"	f
passwd	/usr/share/doc/guile-2.0-dev/examples/safe/evil.scm	/^(define passwd (open-input-file "\/etc\/passwd"))$/;"	f
passwd:dir	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (passwd:dir obj) (vector-ref obj 5))$/;"	f
passwd:gecos	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (passwd:gecos obj) (vector-ref obj 4))$/;"	f
passwd:gid	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (passwd:gid obj) (vector-ref obj 3))$/;"	f
passwd:name	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (passwd:name obj) (vector-ref obj 0))$/;"	f
passwd:passwd	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (passwd:passwd obj) (vector-ref obj 1))$/;"	f
passwd:shell	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (passwd:shell obj) (vector-ref obj 6))$/;"	f
passwd:uid	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (passwd:uid obj) (vector-ref obj 2))$/;"	f
patch!	/usr/share/guile/2.0/srfi/srfi-38.scm	/^(define (patch! x)$/;"	f
path-pat	/usr/share/guile/2.0/web/uri.scm	/^(define path-pat$/;"	f
pathify	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define (pathify . nodes)$/;"	f
pdel	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-method (pdel (o <js-object>) (p <string>) v)$/;"	f
pdel	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-method (pdel (o <js-object>) p)$/;"	f
peek	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (peek . stuff)$/;"	f
peek-next-char	/usr/share/guile/2.0/sxml/upstream/input-parse.scm	/^(define-opt (peek-next-char (optional (port (current-input-port))))$/;"	f
perfect-funcq	/usr/share/guile/2.0/ice-9/poe.scm	/^(define (perfect-funcq size base-func)$/;"	f
peval	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define* (peval exp #:optional (cenv (current-module)) (env vlist-null)$/;"	f
pget	/usr/share/guile/2.0/language/ecmascript/array.scm	/^(define-method (pget (o <js-array-object>) p)$/;"	f
pget	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-method (pget (o <js-object>) (p <string>))$/;"	f
pget	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-method (pget (o <js-object>) p)$/;"	f
pget	/usr/share/guile/2.0/language/ecmascript/function.scm	/^(define-method (pget (o <applicable>) p)$/;"	f
pget	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (pget (o <js-module-object>) (p <string>))$/;"	f
pget	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (pget (o <js-module-object>) (p <symbol>))$/;"	f
pi->xml	/usr/share/guile/2.0/sxml/simple.scm	/^(define (pi->xml tag str port)$/;"	f
pick	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (pick p l)$/;"	f
pick-mappings	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (pick-mappings p l)$/;"	f
pipe-guardian	/usr/share/guile/2.0/ice-9/popen.scm	/^(define pipe-guardian (make-guardian))$/;"	f
pk	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define pk peek)$/;"	f
pmatch	/usr/share/guile/2.0/system/base/pmatch.scm	/^(define-syntax-rule (pmatch e cs ...)$/;"	f
pmatch/source	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define-syntax-rule (pmatch\/source x clause ...)$/;"	f
pmatch1	/usr/share/guile/2.0/system/base/pmatch.scm	/^(define-syntax pmatch1$/;"	f
point++n!	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (point++n! gb n s gap-ofs aft-ofs) ; n>0; warning: reckless$/;"	f
point+-n!	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (point+-n! gb n s gap-ofs aft-ofs) ; n<0; warning: reckless$/;"	f
poll	/usr/share/guile/2.0/ice-9/poll.scm	/^(define* (poll poll-set #:optional (timeout -1))$/;"	f
poll-coop-repl-server	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (poll-coop-repl-server coop-server)$/;"	f
poll-set-add!	/usr/share/guile/2.0/ice-9/poll.scm	/^(define (poll-set-add! set fd-or-port events)$/;"	f
poll-set-events	/usr/share/guile/2.0/ice-9/poll.scm	/^(define (poll-set-events set idx)$/;"	f
poll-set-find-port	/usr/share/guile/2.0/ice-9/poll.scm	/^(define (poll-set-find-port set port)$/;"	f
poll-set-port	/usr/share/guile/2.0/ice-9/poll.scm	/^(define (poll-set-port set idx)$/;"	f
poll-set-remove!	/usr/share/guile/2.0/ice-9/poll.scm	/^(define (poll-set-remove! set idx)$/;"	f
poll-set-revents	/usr/share/guile/2.0/ice-9/poll.scm	/^(define (poll-set-revents set idx)$/;"	f
pollfd-offset	/usr/share/guile/2.0/ice-9/poll.scm	/^(define-syntax-rule (pollfd-offset n)$/;"	f
pop-ref!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (pop-ref! env)$/;"	f
port->fdes	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (port->fdes port)$/;"	f
port->stream	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (port->stream port read)$/;"	f
port->stream	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define* (port->stream #:optional (port (current-input-port)))$/;"	f
port-eof?	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (port-eof? port)$/;"	f
port-has-port-position?	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (port-has-port-position? port)$/;"	f
port-has-set-port-position!?	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (port-has-set-port-position!? port)$/;"	f
port-pat	/usr/share/guile/2.0/web/uri.scm	/^(define port-pat$/;"	f
port-position	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (port-position port)$/;"	f
port-source-location	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (port-source-location port)$/;"	f
port-transcoder	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (port-transcoder port)$/;"	f
port/pid-table	/usr/share/guile/2.0/ice-9/popen.scm	/^(define port\/pid-table (make-weak-key-hash-table 31))$/;"	f
port/pid-table-mutex	/usr/share/guile/2.0/ice-9/popen.scm	/^(define port\/pid-table-mutex (make-mutex))$/;"	f
positive-exact-integer?	/usr/share/guile/2.0/web/uri.scm	/^(define (positive-exact-integer? port)$/;"	f
positive-integer?	/usr/share/guile/2.0/system/vm/traps.scm	/^(define (positive-integer? x)$/;"	f
positive?	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander positive? (x)$/;"	f
post-order	/usr/share/guile/2.0/sxml/transform.scm	/^(define post-order pre-post-order)$/;"	f
post-order	/usr/share/guile/2.0/sxml/upstream/SXML-tree-trans.scm	/^(define post-order pre-post-order)$/;"	f
post-order!	/usr/share/guile/2.0/language/tree-il.scm	/^(define (post-order! f x)$/;"	f
postprocess	/usr/share/guile/2.0/texinfo.scm	/^(define (postprocess tree)$/;"	f
ppat	/usr/share/guile/2.0/system/base/pmatch.scm	/^(define-syntax ppat$/;"	f
pput	/usr/share/guile/2.0/language/ecmascript/array.scm	/^(define-method (pput (o <js-array-object>) p v)$/;"	f
pput	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-method (pput (o <js-object>) (p <string>) v)$/;"	f
pput	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-method (pput (o <js-object>) p v)$/;"	f
pput	/usr/share/guile/2.0/language/ecmascript/function.scm	/^(define-method (pput (o <applicable>) p v)$/;"	f
pput	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (pput (o <js-module-object>) (p <string>) v)$/;"	f
pput	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (pput (o <js-module-object>) (p <symbol>) v)$/;"	f
pragma	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor pragma '())$/;"	f
pragma	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor pragma '())$/;"	f
pre-order!	/usr/share/guile/2.0/language/tree-il.scm	/^(define (pre-order! f x)$/;"	f
pre-post-order	/usr/share/guile/2.0/sxml/transform.scm	/^(define (pre-post-order tree bindings)$/;"	f
pre-post-order	/usr/share/guile/2.0/sxml/upstream/SXML-tree-trans.scm	/^(define (pre-post-order tree bindings)$/;"	f
pre-unwind-handler-dispatch	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (pre-unwind-handler-dispatch key . args)$/;"	f
prefix?	/usr/share/guile/2.0/scripts/snarf-guile-m4-docs.scm	/^(define (prefix? line sub)$/;"	f
pretty-print	/usr/share/guile/2.0/ice-9/pretty-print.scm	/^(define* (pretty-print obj #:optional port*$/;"	f
pretty-print	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (pretty-print repl (form))$/;"	f
prim	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define-syntax prim$/;"	f
primitive-eval	/usr/share/guile/2.0/ice-9/eval.scm	/^(define primitive-eval$/;"	f
print-application	/usr/share/guile/2.0/system/vm/trace.scm	/^(define (print-application frame depth width prefix max-indent)$/;"	f
print-condition	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (print-condition c port)$/;"	f
print-elapsed	/usr/share/guile/2.0/web/server.scm	/^(define (print-elapsed who)$/;"	f
print-frame	/usr/share/guile/2.0/system/repl/debug.scm	/^(define* (print-frame frame #:optional (port (current-output-port))$/;"	f
print-frames	/usr/share/guile/2.0/system/repl/debug.scm	/^(define* (print-frames frames$/;"	f
print-glil	/usr/share/guile/2.0/language/glil.scm	/^(define (print-glil x port)$/;"	f
print-inferior-struct	/usr/share/guile/2.0/system/base/types.scm	/^(define print-inferior-struct$/;"	f
print-info	/usr/share/guile/2.0/language/assembly/disassemble.scm	/^(define (print-info addr info extra src)$/;"	f
print-locals	/usr/share/guile/2.0/system/repl/debug.scm	/^(define* (print-locals frame #:optional (port (current-output-port))$/;"	f
print-registers	/usr/share/guile/2.0/system/repl/debug.scm	/^(define* (print-registers frame #:optional (port (current-output-port))$/;"	f
print-return	/usr/share/guile/2.0/system/vm/trace.scm	/^(define* (print-return frame depth width prefix max-indent)$/;"	f
print-tree-il	/usr/share/guile/2.0/language/tree-il.scm	/^(define (print-tree-il exp port)$/;"	f
priv:string->date	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (priv:string->date date index format-string str-len port template-string)$/;"	f
priv:time-tai->time-utc!	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (priv:time-tai->time-utc! time-in time-out caller)$/;"	f
priv:time-utc->time-tai!	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (priv:time-utc->time-tai! time-in time-out caller)$/;"	f
proc-ref?	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define (proc-ref? exp proc special-name env)$/;"	f
procedure	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (procedure repl)$/;"	f
procedure-arguments	/usr/share/guile/2.0/ice-9/session.scm	/^(define (procedure-arguments proc)$/;"	f
procedure-callee-rev-vars	/usr/share/guile/2.0/system/xref.scm	/^(define (procedure-callee-rev-vars proc)$/;"	f
procedure-callees	/usr/share/guile/2.0/system/xref.scm	/^(define (procedure-callees prog)$/;"	f
procedure-callers	/usr/share/guile/2.0/system/xref.scm	/^(define (procedure-callers var)$/;"	f
procedure-data	/usr/share/guile/2.0/statprof.scm	/^(define procedure-data #f)$/;"	f
procedure-execution-count	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (procedure-execution-count data proc)$/;"	f
procedure-sources	/usr/share/guile/2.0/system/xref.scm	/^(define (procedure-sources proc)$/;"	f
procedure=?	/usr/share/guile/2.0/statprof.scm	/^(define procedure=?$/;"	f
process	/usr/share/guile/2.0/scripts/read-scheme-source.scm	/^(define (process file nb!)$/;"	f
process-args	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (process-args args)$/;"	f
process-backquote	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (process-backquote loc expr)$/;"	f
process-define-module	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (process-define-module args)$/;"	f
process-future!	/usr/share/guile/2.0/ice-9/futures.scm	/^(define (process-future! future)$/;"	f
process-futures	/usr/share/guile/2.0/ice-9/futures.scm	/^(define (process-futures)$/;"	f
process-input-char	/usr/share/guile/2.0/language/brainfuck/parse.scm	/^(define (process-input-char chr p)$/;"	f
process-let-bindings	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (process-let-bindings loc bindings)$/;"	f
process-multiline-directive	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define (process-multiline-directive l)$/;"	f
process-one-future	/usr/share/guile/2.0/ice-9/futures.scm	/^(define (process-one-future)$/;"	f
process-options	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define (process-options specs argument-ls stop-at-first-non-option)$/;"	f
process-options!	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (process-options! opt)$/;"	f
process-singleline	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define (process-singleline l)$/;"	f
process-stream	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define (process-stream port)$/;"	f
process-use-modules	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (process-use-modules module-interface-args)$/;"	f
process-use-modules	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define process-use-modules #f)$/;"	f
product-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax product-ec$/;"	f
profile	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (profile repl (form) . opts)$/;"	f
profile-level	/usr/share/guile/2.0/statprof.scm	/^(define profile-level 0)                ; for user start\/stop nesting.$/;"	f
profile-signal-handler	/usr/share/guile/2.0/statprof.scm	/^(define (profile-signal-handler sig)$/;"	f
progn	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial progn (loc args)$/;"	f
program-arguments-alist	/usr/share/guile/2.0/system/vm/program.scm	/^(define* (program-arguments-alist prog #:optional ip)$/;"	f
program-arity	/usr/share/guile/2.0/system/vm/program.scm	/^(define (program-arity prog ip)$/;"	f
program-bindings-by-index	/usr/share/guile/2.0/system/vm/program.scm	/^(define (program-bindings-by-index prog)$/;"	f
program-bindings-for-ip	/usr/share/guile/2.0/system/vm/program.scm	/^(define (program-bindings-for-ip prog ip)$/;"	f
program-callee-rev-vars	/usr/share/guile/2.0/system/xref.scm	/^(define (program-callee-rev-vars prog)$/;"	f
program-free-variables	/usr/share/guile/2.0/system/vm/program.scm	/^(define (program-free-variables prog)$/;"	f
program-lambda-list	/usr/share/guile/2.0/system/vm/program.scm	/^(define* (program-lambda-list prog #:optional ip)$/;"	f
program-last-ip	/usr/share/guile/2.0/system/vm/traps.scm	/^(define (program-last-ip prog)$/;"	f
program-name	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define (program-name)$/;"	f
program-sources*	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (program-sources* data proc)$/;"	f
program-sources-by-line	/usr/share/guile/2.0/system/vm/traps.scm	/^(define (program-sources-by-line proc file)$/;"	f
program-sources-pre-retire	/usr/share/guile/2.0/system/vm/program.scm	/^(define (program-sources-pre-retire proc)$/;"	f
promise	/usr/share/guile/2.0/srfi/srfi-45.scm	/^(define-record-type promise (make-promise val) promise?$/;"	f
promise-visit	/usr/share/guile/2.0/srfi/srfi-45.scm	/^(define* (promise-visit promise #:key on-eager on-lazy)$/;"	f
prompting-meta-read	/usr/share/guile/2.0/system/repl/repl.scm	/^(define (prompting-meta-read repl)$/;"	f
prop-attrs	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-method (prop-attrs (o <js-object>) p)$/;"	f
prop-attrs	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (prop-attrs (o <js-module-object>) (p <string>))$/;"	f
prop-attrs	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (prop-attrs (o <js-module-object>) (p <symbol>))$/;"	f
prop-has-attr?	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-method (prop-has-attr? (o <js-object>) p attr)$/;"	f
prop-keys	/usr/share/guile/2.0/language/ecmascript/base.scm	/^(define-method (prop-keys (o <js-object>))$/;"	f
prop-keys	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define-method (prop-keys (o <js-module-object>))$/;"	f
proper-list?	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (proper-list? x)$/;"	f
protoent:aliases	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (protoent:aliases obj) (vector-ref obj 1))$/;"	f
protoent:name	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (protoent:name obj) (vector-ref obj 0))$/;"	f
protoent:proto	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (protoent:proto obj) (vector-ref obj 2))$/;"	f
provide	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (provide sym)$/;"	f
provided?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (provided? feature)$/;"	f
proxy-authenticate	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor proxy-authenticate #f)$/;"	f
proxy-authorization	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor proxy-authorization #f)$/;"	f
pset-size	/usr/share/guile/2.0/ice-9/poll.scm	/^(define (pset-size set)$/;"	f
punify	/usr/share/guile/2.0/scripts/punify.scm	/^(define (punify . args)$/;"	f
punify-one	/usr/share/guile/2.0/scripts/punify.scm	/^(define (punify-one file)$/;"	f
pure-funcq	/usr/share/guile/2.0/ice-9/poe.scm	/^(define (pure-funcq base-func)$/;"	f
purify-module!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (purify-module! module)$/;"	f
push-ref!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (push-ref! o env)$/;"	f
put	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define put set-object-property!)$/;"	f
put	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define put set-object-property!)$/;"	f
put	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define put set-object-property!)$/;"	f
put-char	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (put-char port char)$/;"	f
put-datum	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (put-datum port datum)$/;"	f
put-string	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define* (put-string port s #:optional start count)$/;"	f
puts	/usr/share/guile/2.0/system/repl/common.scm	/^(define (puts x) (display x) (newline))$/;"	f
q	/usr/share/guile/2.0/scripts/use2dot.scm	/^(define (q s)                           ; quote$/;"	f
q-empty-check	/usr/share/guile/2.0/ice-9/q.scm	/^(define (q-empty-check q) (if (q-empty? q) (throw 'q-empty q)))$/;"	f
q-empty?	/usr/share/guile/2.0/ice-9/q.scm	/^(define (q-empty? obj) (null? (car obj)))$/;"	f
q-front	/usr/share/guile/2.0/ice-9/q.scm	/^(define (q-front q) (q-empty-check q) (caar q))$/;"	f
q-length	/usr/share/guile/2.0/ice-9/q.scm	/^(define (q-length q) (length (car q)))$/;"	f
q-pop!	/usr/share/guile/2.0/ice-9/q.scm	/^(define (q-pop! q)$/;"	f
q-push!	/usr/share/guile/2.0/ice-9/q.scm	/^(define (q-push! q obj)$/;"	f
q-rear	/usr/share/guile/2.0/ice-9/q.scm	/^(define (q-rear q) (q-empty-check q) (cadr q))$/;"	f
q-remove!	/usr/share/guile/2.0/ice-9/q.scm	/^(define (q-remove! q obj)$/;"	f
q?	/usr/share/guile/2.0/ice-9/q.scm	/^(define (q? obj)$/;"	f
quasiquote	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define quasiquote$/;"	f
quasiquote	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define-syntax quasiquote$/;"	f
quasisyntax	/usr/share/guile/2.0/ice-9/quasisyntax.scm	/^(define-syntax quasisyntax$/;"	f
query-pat	/usr/share/guile/2.0/web/uri.scm	/^(define query-pat$/;"	f
quit	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (quit . args)$/;"	f
quit	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (quit repl)$/;"	f
quotation-symbols	/usr/share/guile/2.0/language/elisp/parser.scm	/^(define quotation-symbols '((quote . quote)$/;"	f
quote	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial quote (loc args)$/;"	f
quoted?	/usr/share/guile/2.0/scripts/read-scheme-source.scm	/^(define (quoted? sym form)$/;"	f
r6rs-open	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (r6rs-open filename mode buffer-mode transcoder)$/;"	f
raise	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define raise (@ (srfi srfi-34) raise))$/;"	f
raise	/usr/share/guile/2.0/srfi/srfi-34.scm	/^(define (raise obj)$/;"	f
raise-syntax-error	/usr/share/guile/2.0/sxml/match.scm	/^(define (raise-syntax-error x msg obj sub)$/;"	f
random-integer	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define random-integer (random-source-make-integers default-random-source))$/;"	f
random-real	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define random-real (random-source-make-reals default-random-source))$/;"	f
random-source-make-integers	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define (random-source-make-integers s)$/;"	f
random-source-make-reals	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define random-source-make-reals$/;"	f
random-source-pseudo-randomize!	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define (random-source-pseudo-randomize! s i j)$/;"	f
random-source-randomize!	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define (random-source-randomize! s)$/;"	f
random-source-state-ref	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define (random-source-state-ref s)$/;"	f
random-source-state-set!	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define (random-source-state-set! s state)$/;"	f
range	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor range #f)$/;"	f
range?	/usr/share/guile/2.0/system/vm/traps.scm	/^(define (range? x)$/;"	f
rassoc	/usr/share/guile/2.0/ice-9/list.scm	/^(define (rassoc key alist . =)$/;"	f
rassq	/usr/share/guile/2.0/ice-9/list.scm	/^(define (rassq key alist)$/;"	f
rassv	/usr/share/guile/2.0/ice-9/list.scm	/^(define (rassv key alist)$/;"	f
re-export	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (re-export name ...)$/;"	f
re-export-syntax	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (re-export-syntax name ...)$/;"	f
read-TODO	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define (read-TODO file)$/;"	f
read-alist-file	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define (read-alist-file file)$/;"	f
read-and-compile	/usr/share/guile/2.0/system/base/compile.scm	/^(define* (read-and-compile port #:key$/;"	f
read-and-eval	/usr/share/guile/2.0/ice-9/eval-string.scm	/^(define* (read-and-eval port #:key (lang (current-language)))$/;"	f
read-and-parse	/usr/share/guile/2.0/system/base/compile.scm	/^(define (read-and-parse lang port cenv)$/;"	f
read-api-alist-file	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define (read-api-alist-file file)$/;"	f
read-args	/usr/share/guile/2.0/system/vm/inspect.scm	/^(define (read-args prompt)$/;"	f
read-arguments	/usr/share/guile/2.0/texinfo.scm	/^(define (read-arguments port stop-char)$/;"	f
read-brainfuck	/usr/share/guile/2.0/language/brainfuck/parse.scm	/^(define (read-brainfuck p)$/;"	f
read-c-struct	/usr/share/guile/2.0/system/foreign.scm	/^(define (read-c-struct bv offset types)$/;"	f
read-char-data	/usr/share/guile/2.0/texinfo.scm	/^(define read-char-data$/;"	f
read-chunk	/usr/share/guile/2.0/web/http.scm	/^(define (read-chunk port)$/;"	f
read-chunk-body	/usr/share/guile/2.0/web/http.scm	/^(define (read-chunk-body port size)$/;"	f
read-chunk-header	/usr/share/guile/2.0/web/http.scm	/^(define (read-chunk-header port)$/;"	f
read-client	/usr/share/guile/2.0/web/server.scm	/^(define (read-client impl server)$/;"	f
read-command	/usr/share/guile/2.0/system/repl/command.scm	/^(define (read-command repl)$/;"	f
read-command	/usr/share/guile/2.0/texinfo.scm	/^(define (read-command port)$/;"	f
read-command-arguments	/usr/share/guile/2.0/system/repl/command.scm	/^(define (read-command-arguments c repl)$/;"	f
read-command-token	/usr/share/guile/2.0/texinfo.scm	/^(define (read-command-token port)$/;"	f
read-comment	/usr/share/guile/2.0/system/repl/repl.scm	/^(define (read-comment lang port ch)$/;"	f
read-continuation-line	/usr/share/guile/2.0/web/http.scm	/^(define (read-continuation-line port val)$/;"	f
read-delimited	/usr/share/guile/2.0/ice-9/rdelim.scm	/^(define* (read-delimited delims #:optional (port (current-input-port))$/;"	f
read-delimited!	/usr/share/guile/2.0/ice-9/rdelim.scm	/^(define* (read-delimited! delims buf #:optional$/;"	f
read-directives	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define read-directives$/;"	f
read-disable	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-option-interface$/;"	f
read-ecmascript	/usr/share/guile/2.0/language/ecmascript/parse.scm	/^(define (read-ecmascript port)$/;"	f
read-ecmascript/1	/usr/share/guile/2.0/language/ecmascript/parse.scm	/^(define (read-ecmascript\/1 port)$/;"	f
read-elisp	/usr/share/guile/2.0/language/elisp/parser.scm	/^(define (read-elisp port)$/;"	f
read-eof-breaks	/usr/share/guile/2.0/texinfo.scm	/^(define read-eof-breaks '(*eof* #\\return #\\newline))$/;"	f
read-eof-line	/usr/share/guile/2.0/texinfo.scm	/^(define (read-eof-line port)$/;"	f
read-eval?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define read-eval? (make-fluid #f))$/;"	f
read-hash-procedures	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define-syntax read-hash-procedures$/;"	f
read-hash-procedures-warning	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (read-hash-procedures-warning)$/;"	f
read-header	/usr/share/guile/2.0/web/http.scm	/^(define (read-header port)$/;"	f
read-headers	/usr/share/guile/2.0/web/http.scm	/^(define (read-headers port)$/;"	f
read-hook	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-once read-hook #f)$/;"	f
read-identifier	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (read-identifier port loc)$/;"	f
read-include-file-name	/usr/share/guile/2.0/texinfo.scm	/^(define (read-include-file-name port)$/;"	f
read-internal-doctype-as-string	/usr/share/guile/2.0/sxml/simple.scm	/^(define (read-internal-doctype-as-string port)$/;"	f
read-leap-second-table	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (read-leap-second-table filename)$/;"	f
read-line	/usr/share/guile/2.0/ice-9/rdelim.scm	/^(define* (read-line #:optional (port (current-input-port))$/;"	f
read-line!	/usr/share/guile/2.0/ice-9/rdelim.scm	/^(define* (read-line! string #:optional (port current-input-port))$/;"	f
read-line*	/usr/share/guile/2.0/web/http.scm	/^(define (read-line* port)$/;"	f
read-module	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (read-module name)$/;"	f
read-numeric	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (read-numeric port loc)$/;"	f
read-punctuation	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define read-punctuation$/;"	f
read-regexp	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (read-regexp port loc)$/;"	f
read-request	/usr/share/guile/2.0/web/request.scm	/^(define* (read-request port #:optional (meta '()))$/;"	f
read-request-body	/usr/share/guile/2.0/web/request.scm	/^(define (read-request-body r)$/;"	f
read-request-line	/usr/share/guile/2.0/web/http.scm	/^(define (read-request-line port)$/;"	f
read-response	/usr/share/guile/2.0/web/response.scm	/^(define (read-response port)$/;"	f
read-response-body	/usr/share/guile/2.0/web/response.scm	/^(define (read-response-body r)$/;"	f
read-response-line	/usr/share/guile/2.0/web/http.scm	/^(define (read-response-line port)$/;"	f
read-rfc822	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define (read-rfc822 . args)$/;"	f
read-rfc822-silently	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define (read-rfc822-silently port)$/;"	f
read-scheme-datum-comment	/usr/share/guile/2.0/system/repl/repl.scm	/^(define (read-scheme-datum-comment port)$/;"	f
read-scheme-line-comment	/usr/share/guile/2.0/system/repl/repl.scm	/^(define (read-scheme-line-comment port)$/;"	f
read-scheme-source	/usr/share/guile/2.0/scripts/read-scheme-source.scm	/^(define (read-scheme-source . files)$/;"	f
read-scheme-source-silently	/usr/share/guile/2.0/scripts/read-scheme-source.scm	/^(define (read-scheme-source-silently . files)$/;"	f
read-slash	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (read-slash port loc div?)$/;"	f
read-string	/usr/share/guile/2.0/ice-9/lineio.scm	/^(define (read-string line-buffering-input-port)$/;"	f
read-string	/usr/share/guile/2.0/ice-9/rdelim.scm	/^(define* (read-string #:optional (port (current-input-port)) (count #f))$/;"	f
read-string	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (read-string port loc)$/;"	f
read-string	/usr/share/guile/2.0/sxml/upstream/input-parse.scm	/^(define-opt (read-string n (optional (port (current-input-port))) )$/;"	f
read-string!	/usr/share/guile/2.0/ice-9/rdelim.scm	/^(define* (read-string! buf #:optional$/;"	f
read-tai-utc-data	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (read-tai-utc-data filename)$/;"	f
read-text-line	/usr/share/guile/2.0/sxml/ssax/input-parse.scm	/^(define-opt (read-text-line (optional (port (current-input-port))) )$/;"	f
read-text-line	/usr/share/guile/2.0/sxml/upstream/input-parse.scm	/^(define-opt (read-text-line (optional (port (current-input-port))) )$/;"	f
read-text-outline	/usr/share/guile/2.0/scripts/read-text-outline.scm	/^(define (read-text-outline . args)$/;"	f
read-text-outline-silently	/usr/share/guile/2.0/scripts/read-text-outline.scm	/^(define read-text-outline-silently$/;"	f
read-until	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (read-until delims port loc)$/;"	f
read-verbatim-body	/usr/share/guile/2.0/texinfo.scm	/^(define (read-verbatim-body port str-handler seed)$/;"	f
read-with-shared-structure	/usr/share/guile/2.0/srfi/srfi-38.scm	/^(define* (read-with-shared-structure #:optional (port (current-input-port)))$/;"	f
readable	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-macro (readable exp)$/;"	f
readable-expression	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (readable-expression obj)$/;"	f
readable?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (readable? obj)$/;"	f
readables	/usr/share/guile/2.0/oop/goops/save.scm	/^(define readables (make-weak-key-hash-table 61))$/;"	f
reader-ctors	/usr/share/guile/2.0/srfi/srfi-10.scm	/^(define reader-ctors (make-hash-table 31))$/;"	f
reader-loop	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (reader-loop coop-server coop-repl)$/;"	f
readline	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-public (readline . args)$/;"	f
readline-port	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-public readline-port$/;"	f
readline-repl-reader	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-once readline-repl-reader$/;"	f
real-character	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define (real-character chr)$/;"	f
realloc	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (realloc gb inc)$/;"	f
reap-pipes	/usr/share/guile/2.0/ice-9/popen.scm	/^(define (reap-pipes)$/;"	f
rec	/usr/share/guile/2.0/srfi/srfi-31.scm	/^(define-syntax rec$/;"	f
receive	/usr/share/guile/2.0/ice-9/receive.scm	/^(define-syntax-rule (receive vars vals . body)$/;"	f
receiver-waiting	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define receiver-waiting '(receiver-waiting))$/;"	f
receiver-waiting?	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (receiver-waiting? (ch <data-channel>))$/;"	f
record-accessor	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (record-accessor rtd field-name)$/;"	f
record-case	/usr/share/guile/2.0/system/base/syntax.scm	/^(define-syntax record-case$/;"	f
record-constructor	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (record-constructor rtd #:optional field-names)$/;"	f
record-effort!	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (record-effort! c)$/;"	f
record-full-stacks?	/usr/share/guile/2.0/statprof.scm	/^(define record-full-stacks? #f)         ; if #t, stash away the stacks$/;"	f
record-modifier	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (record-modifier rtd field-name)$/;"	f
record-predicate	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (record-predicate rtd)$/;"	f
record-size!	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (record-size! c)$/;"	f
record-type-descriptor	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (record-type-descriptor obj)$/;"	f
record-type-fields	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (record-type-fields obj)$/;"	f
record-type-name	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (record-type-name obj)$/;"	f
record-type-vtable	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define record-type-vtable$/;"	f
record-type?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (record-type? obj)$/;"	f
record?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (record? obj)$/;"	f
recursive-local-define	/usr/share/guile/2.0/ice-9/ls.scm	/^(define (recursive-local-define name value)$/;"	f
reduce	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (reduce p l)$/;"	f
reduce	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (reduce f ridentity lst)$/;"	f
reduce-init	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (reduce-init p init l)$/;"	f
reduce-right	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (reduce-right f ridentity lst)$/;"	f
ref	/usr/share/guile/2.0/texinfo/html.scm	/^(define (ref tag args)$/;"	f
ref	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (ref tag args)$/;"	f
ref-resolvers	/usr/share/guile/2.0/texinfo/html.scm	/^(define ref-resolvers $/;"	f
reference-variable	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (reference-variable loc sym module)$/;"	f
reference-variable	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define (reference-variable module sym)$/;"	f
referer	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor referer #f)$/;"	f
refine-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax refine-compare$/;"	f
regexp-match?	/usr/share/guile/2.0/ice-9/regex.scm	/^(define (regexp-match? match)$/;"	f
regexp-quote	/usr/share/guile/2.0/ice-9/regex.scm	/^(define (regexp-quote string)$/;"	f
regexp-substitute	/usr/share/guile/2.0/ice-9/regex.scm	/^(define (regexp-substitute port match . items)$/;"	f
regexp-substitute/global	/usr/share/guile/2.0/ice-9/regex.scm	/^(define (regexp-substitute\/global port regexp string . items)$/;"	f
register-future!	/usr/share/guile/2.0/ice-9/futures.scm	/^(define (register-future! future)$/;"	f
register-modules	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (register-modules dynobj)$/;"	f
register-pretty-printer	/usr/share/gdb/auto-load/libguile-2.0.so.22.7.2-gdb.scm	/^(define* (register-pretty-printer #:optional objfile)$/;"	f
registered-modules	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define registered-modules '())$/;"	f
registers	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (registers repl)$/;"	f
release-port-handle	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (release-port-handle port)$/;"	f
reload	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (reload repl . args)$/;"	f
reload-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (reload-module m)$/;"	f
remaining-prof-time	/usr/share/guile/2.0/statprof.scm	/^(define remaining-prof-time #f)         ; time remaining when prof suspended.$/;"	f
remove-class-accessors!	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (remove-class-accessors! (c <class>))$/;"	f
remove-if	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (remove-if pred l)$/;"	f
remove-if-not	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (remove-if-not pred l)$/;"	f
remove-method-in-classes!	/usr/share/guile/2.0/oop/goops.scm	/^(define (remove-method-in-classes! m)$/;"	f
remove-name-help-handler!	/usr/share/guile/2.0/ice-9/session.scm	/^(define (remove-name-help-handler! proc)$/;"	f
remove-trap-wrapper!	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (remove-trap-wrapper! trap-state wrapper)$/;"	f
remove-value-help-handler!	/usr/share/guile/2.0/ice-9/session.scm	/^(define (remove-value-help-handler! proc)$/;"	f
repl	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (repl read evaler print)$/;"	f
repl-compile	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-compile repl form)$/;"	f
repl-compile-options	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-compile-options repl)$/;"	f
repl-default-option-set!	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-default-option-set! key val)$/;"	f
repl-default-options	/usr/share/guile/2.0/system/repl/common.scm	/^(define repl-default-options$/;"	f
repl-default-prompt-set!	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-default-prompt-set! prompt)$/;"	f
repl-eval	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-eval repl form)$/;"	f
repl-expand	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-expand repl form)$/;"	f
repl-next-resumer	/usr/share/guile/2.0/system/repl/command.scm	/^(define (repl-next-resumer msg)$/;"	f
repl-optimize	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-optimize repl form)$/;"	f
repl-option-ref	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-option-ref repl key)$/;"	f
repl-option-set!	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-option-set! repl key val)$/;"	f
repl-parse	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-parse repl form)$/;"	f
repl-pop-continuation-resumer	/usr/share/guile/2.0/system/repl/command.scm	/^(define (repl-pop-continuation-resumer repl msg)$/;"	f
repl-prepare-eval-thunk	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-prepare-eval-thunk repl form)$/;"	f
repl-print	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-print repl val)$/;"	f
repl-prompt	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-prompt repl)$/;"	f
repl-read	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-read repl)$/;"	f
repl-reader	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define repl-reader$/;"	f
repl-welcome	/usr/share/guile/2.0/system/repl/common.scm	/^(define (repl-welcome repl)$/;"	f
replace-range	/usr/share/guile/2.0/sxml/transform.scm	/^(define (replace-range beg-pred end-pred forest)$/;"	f
replace-range	/usr/share/guile/2.0/sxml/upstream/SXML-tree-trans.scm	/^(define (replace-range beg-pred end-pred forest)$/;"	f
replace-titles	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define (replace-titles sdocbook-fragment)$/;"	f
report-error	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (report-error loc . args)$/;"	f
request	/usr/share/guile/2.0/web/client.scm	/^(define* (request uri #:key$/;"	f
request-absolute-uri	/usr/share/guile/2.0/web/request.scm	/^(define* (request-absolute-uri r #:optional default-host default-port)$/;"	f
require-extension	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax require-extension$/;"	f
reserved-chars	/usr/share/guile/2.0/web/uri.scm	/^(define reserved-chars$/;"	f
reset	/usr/share/guile/2.0/ice-9/control.scm	/^(define-syntax-rule (reset . body)$/;"	f
reset*	/usr/share/guile/2.0/ice-9/control.scm	/^(define (reset* thunk)$/;"	f
reset-parsed-entity-definitions!	/usr/share/guile/2.0/sxml/ssax.scm	/^(define (reset-parsed-entity-definitions!)$/;"	f
resolve-interface	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (resolve-interface name #:key$/;"	f
resolve-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (resolve-module . args)$/;"	f
resolve-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (resolve-module name . args)$/;"	f
resolve-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define resolve-module$/;"	f
resolve-primitives!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define (resolve-primitives! x mod)$/;"	f
resolve-r6rs-interface	/usr/share/guile/2.0/ice-9/r6rs-libraries.scm	/^(define (resolve-r6rs-interface import-spec)$/;"	f
resolve-ref	/usr/share/guile/2.0/texinfo/html.scm	/^(define (resolve-ref node manual)$/;"	f
respond	/usr/share/doc/guile-2.0-dev/examples/web/debug-sxml.scm	/^(define* (respond #:optional body #:key$/;"	f
response-body-port	/usr/share/guile/2.0/web/response.scm	/^(define* (response-body-port r #:key (decode? #t) (keep-alive? #t))$/;"	f
response-must-not-include-body?	/usr/share/guile/2.0/web/response.scm	/^(define (response-must-not-include-body? r)$/;"	f
response-reason-phrase	/usr/share/guile/2.0/web/response.scm	/^(define (response-reason-phrase response)$/;"	f
restore	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-macro (restore class slots . exps)$/;"	f
retry-after	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor retry-after #f)$/;"	f
return	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define (return expr)$/;"	f
reverse-collect-str-drop-ws	/usr/share/guile/2.0/texinfo.scm	/^(define (reverse-collect-str-drop-ws fragments)$/;"	f
reverse-hashq	/usr/share/guile/2.0/system/repl/debug.scm	/^(define (reverse-hashq h)$/;"	f
reverse-hashq	/usr/share/guile/2.0/system/vm/inspect.scm	/^(define (reverse-hashq h)$/;"	f
reverse-list->vector	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define* (reverse-list->vector lst #:optional (start 0) (end (length lst)))$/;"	f
reverse-string-append	/usr/share/guile/2.0/ice-9/pretty-print.scm	/^(define (reverse-string-append l)$/;"	f
reverse-vector->list	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define reverse-vector->list$/;"	f
reverse-without-nops	/usr/share/guile/2.0/language/brainfuck/parse.scm	/^(define (reverse-without-nops lst)$/;"	f
right-justify-string	/usr/share/guile/2.0/texinfo/string-utils.scm	/^(define* (right-justify-string str #:optional (width 80) (chr #\\space))$/;"	f
rnrs	/usr/share/guile/2.0/rnrs/bytevectors.scm	/^(define-module (rnrs bytevectors)$/;"	f
root-modules	/usr/share/guile/2.0/ice-9/session.scm	/^(define (root-modules)$/;"	f
round-up	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define (round-up n)$/;"	f
rules	/usr/share/guile/2.0/texinfo/html.scm	/^(define rules$/;"	f
run-coop-repl-server	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (run-coop-repl-server coop-server server-socket)$/;"	f
run-repl	/usr/share/guile/2.0/system/repl/repl.scm	/^(define (run-repl repl)$/;"	f
run-repl*	/usr/share/guile/2.0/system/repl/repl.scm	/^(define (run-repl* repl prompting-meta-read)$/;"	f
run-server	/usr/share/guile/2.0/system/repl/server.scm	/^(define* (run-server #:optional (server-socket (make-tcp-server-socket)))$/;"	f
run-server	/usr/share/guile/2.0/web/server.scm	/^(define* (run-server handler #:optional (impl 'http) (open-params '())$/;"	f
run-server*	/usr/share/guile/2.0/system/repl/server.scm	/^(define (run-server* server-socket serve-client)$/;"	f
run-strip	/usr/share/guile/2.0/ice-9/runq.scm	/^(define (run-strip thunk) (catch #t thunk (lambda ign (warn 'runq-strip thunk ign) #f)))$/;"	f
run-test	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define-syntax run-test$/;"	f
run-test	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define-syntax run-test$/;"	f
runq-control	/usr/share/guile/2.0/ice-9/runq.scm	/^(define (runq-control q msg . args)$/;"	f
runtime	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define runtime '(language elisp runtime))$/;"	f
runtime-error	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (runtime-error loc msg . args)$/;"	f
runtime-error	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define runtime-error macro-error)$/;"	f
s!	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define s!       (record-modifier gap-buffer 's))$/;"	f
s16	/usr/share/guile/2.0/srfi/srfi-4.scm	/^(define-bytevector-type s16 s16-native 2)$/;"	f
s16vector-ref	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander s16vector-ref (vec i)$/;"	f
s16vector-set!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander s16vector-set! (vec i x)$/;"	f
s32	/usr/share/guile/2.0/srfi/srfi-4.scm	/^(define-bytevector-type s32 s32-native 4)$/;"	f
s32vector-ref	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander s32vector-ref (vec i)$/;"	f
s32vector-set!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander s32vector-set! (vec i x)$/;"	f
s64	/usr/share/guile/2.0/srfi/srfi-4.scm	/^(define-bytevector-type s64 s64-native 8)$/;"	f
s64vector-ref	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander s64vector-ref (vec i)$/;"	f
s64vector-set!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander s64vector-set! (vec i x)$/;"	f
s8	/usr/share/guile/2.0/srfi/srfi-4.scm	/^(define-bytevector-type s8 s8 1)$/;"	f
s8vector-ref	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander s8vector-ref (vec i)$/;"	f
s8vector-set!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander s8vector-set! (vec i x)$/;"	f
s:	/usr/share/guile/2.0/ice-9/gap-buffer.scm	/^(define s:       (record-accessor gap-buffer 's))$/;"	f
safe-class-name	/usr/share/guile/2.0/oop/goops/describe.scm	/^(define (safe-class-name class)$/;"	f
safe-class-name	/usr/share/guile/2.0/system/repl/describe.scm	/^(define (safe-class-name class)$/;"	f
safe-environment	/usr/share/guile/2.0/ice-9/safe.scm	/^(define (safe-environment n)$/;"	f
safe-name	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define (safe-name module)$/;"	f
safe-r5rs-interface	/usr/share/guile/2.0/ice-9/safe.scm	/^(define safe-r5rs-interface (resolve-interface '(ice-9 safe-r5rs)))$/;"	f
sample-count	/usr/share/guile/2.0/statprof.scm	/^(define sample-count #f)                ; total count of sampler calls.$/;"	f
sample-stack-procs	/usr/share/guile/2.0/statprof.scm	/^(define (sample-stack-procs stack)$/;"	f
sampling-frequency	/usr/share/guile/2.0/statprof.scm	/^(define sampling-frequency #f)          ; in (seconds . microseconds)$/;"	f
sanitize-request	/usr/share/guile/2.0/web/client.scm	/^(define (sanitize-request request body)$/;"	f
sanitize-response	/usr/share/guile/2.0/web/server.scm	/^(define (sanitize-response request response body)$/;"	f
sans-final-newline	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (sans-final-newline str)$/;"	f
sans-leading-whitespace	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (sans-leading-whitespace s)$/;"	f
sans-surrounding-whitespace	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (sans-surrounding-whitespace s)$/;"	f
sans-trailing-whitespace	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (sans-trailing-whitespace s)$/;"	f
save-module-excursion	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (save-module-excursion thunk)$/;"	f
save-objects	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (save-objects (alist <pair>) (file <output-port>) . rest)$/;"	f
save-objects	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (save-objects (alist <pair>) (file <string>) . rest)$/;"	f
save-stack	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (save-stack . args)$/;"	f
save-stack	/usr/share/guile/2.0/ice-9/save-stack.scm	/^(define (save-stack . narrowing)$/;"	f
save-value-history	/usr/share/guile/2.0/ice-9/history.scm	/^(define save-value-history$/;"	f
sc-expand	/usr/share/guile/2.0/ice-9/syncase.scm	/^(define sc-expand macroexpand)$/;"	f
scan	/usr/share/guile/2.0/scripts/frisk.scm	/^(define (scan default-module files)$/;"	f
scan	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define (scan re command match)$/;"	f
scan-C!	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define (scan-C! ht sofile)$/;"	f
scan-Scheme!	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define (scan-Scheme! ht guile)$/;"	f
scan-api	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define (scan-api . args)$/;"	f
scan-file-for-free-variables	/usr/share/guile/2.0/scripts/lint.scm	/^(define (scan-file-for-free-variables filename)$/;"	f
scan-file-for-module-name	/usr/share/guile/2.0/scripts/lint.scm	/^(define (scan-file-for-module-name filename)$/;"	f
scandir	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define* (scandir name #:optional (select? (const #t))$/;"	f
scheme	/usr/share/guile/2.0/language/scheme/spec.scm	/^(define-language scheme$/;"	f
scheme-file-suffix	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define scheme-file-suffix$/;"	f
scheme-list?	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (scheme-list? x)$/;"	f
scheme-pat	/usr/share/guile/2.0/web/uri.scm	/^(define scheme-pat$/;"	f
scheme-report-environment	/usr/share/guile/2.0/ice-9/r5rs.scm	/^(define (scheme-report-environment n)$/;"	f
scheme-report-interface	/usr/share/guile/2.0/ice-9/r5rs.scm	/^(define scheme-report-interface (module-public-interface (current-module)))$/;"	f
scm->object	/usr/share/guile/2.0/system/base/types.scm	/^(define* (scm->object bits #:optional (backend %ffi-memory-backend))$/;"	f
scm-repl-print-unspecified	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define scm-repl-print-unspecified #f)$/;"	f
scm-repl-prompt	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define scm-repl-prompt "guile> ")$/;"	f
scm-repl-silent	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define scm-repl-silent #f)$/;"	f
scm-repl-verbose	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define scm-repl-verbose #f)$/;"	f
scm-style-repl	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (scm-style-repl)$/;"	f
scm-style-repl	/usr/share/guile/2.0/ice-9/scm-style-repl.scm	/^(define (scm-style-repl)$/;"	f
scm-value->string	/usr/share/gdb/auto-load/libguile-2.0.so.22.7.2-gdb.scm	/^(define scm-value->string$/;"	f
script-stexi-documentation	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (script-stexi-documentation scriptpath)$/;"	f
scripts	/usr/share/guile/2.0/scripts/api-diff.scm	/^(define-module (scripts api-diff)$/;"	f
scripts	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define-module (scripts autofrisk)$/;"	f
scripts	/usr/share/guile/2.0/scripts/compile.scm	/^(define-module (scripts compile)$/;"	f
scripts	/usr/share/guile/2.0/scripts/disassemble.scm	/^(define-module (scripts disassemble)$/;"	f
scripts	/usr/share/guile/2.0/scripts/display-commentary.scm	/^(define-module (scripts display-commentary)$/;"	f
scripts	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define-module (scripts doc-snarf)$/;"	f
scripts	/usr/share/guile/2.0/scripts/frisk.scm	/^(define-module (scripts frisk)$/;"	f
scripts	/usr/share/guile/2.0/scripts/generate-autoload.scm	/^(define-module (scripts generate-autoload)$/;"	f
scripts	/usr/share/guile/2.0/scripts/help.scm	/^(define-module (scripts help)$/;"	f
scripts	/usr/share/guile/2.0/scripts/lint.scm	/^(define-module (scripts lint)$/;"	f
scripts	/usr/share/guile/2.0/scripts/list.scm	/^(define-module (scripts list)$/;"	f
scripts	/usr/share/guile/2.0/scripts/punify.scm	/^(define-module (scripts punify)$/;"	f
scripts	/usr/share/guile/2.0/scripts/read-rfc822.scm	/^(define-module (scripts read-rfc822)$/;"	f
scripts	/usr/share/guile/2.0/scripts/read-scheme-source.scm	/^(define-module (scripts read-scheme-source)$/;"	f
scripts	/usr/share/guile/2.0/scripts/read-text-outline.scm	/^(define-module (scripts read-text-outline)$/;"	f
scripts	/usr/share/guile/2.0/scripts/scan-api.scm	/^(define-module (scripts scan-api)$/;"	f
scripts	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define-module (scripts snarf-check-and-output-texi)$/;"	f
scripts	/usr/share/guile/2.0/scripts/snarf-guile-m4-docs.scm	/^(define-module (scripts snarf-guile-m4-docs)$/;"	f
scripts	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define-module (scripts summarize-guile-TODO)$/;"	f
scripts	/usr/share/guile/2.0/scripts/use2dot.scm	/^(define-module (scripts use2dot)$/;"	f
sdocbook-flatten	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define (sdocbook-flatten sdocbook)$/;"	f
search-documentation-files	/usr/share/guile/2.0/ice-9/documentation.scm	/^(define (search-documentation-files name . files)$/;"	f
second	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define second cadr)$/;"	f
second-value	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (second-value expr)$/;"	f
seconds->time	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (seconds->time x)$/;"	f
section	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define section (make-underliner #\\=))$/;"	f
select-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define-syntax select-compare$/;"	f
select-items	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define (select-items p items)$/;"	f
select-kids	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (select-kids test-pred?)$/;"	f
select-kids	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (select-kids test-pred?)$/;"	f
sender-waiting?	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define-method (sender-waiting? (ch <data-channel>))$/;"	f
separate-fields-after-char	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (separate-fields-after-char ch str ret)$/;"	f
separate-fields-before-char	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (separate-fields-before-char ch str ret)$/;"	f
separate-fields-discarding-char	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (separate-fields-discarding-char ch str ret)$/;"	f
separators-without-slash	/usr/share/guile/2.0/web/http.scm	/^(define separators-without-slash$/;"	f
serialization-mutex	/usr/share/guile/2.0/ice-9/serialize.scm	/^(define serialization-mutex (make-mutex))$/;"	f
serialize	/usr/share/guile/2.0/ice-9/serialize.scm	/^(define-macro (serialize . forms)$/;"	f
serialize	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (serialize exp lp command type formals args accum)$/;"	f
serialize-text-args	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (serialize-text-args lp formals args)$/;"	f
serializers	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define serializers$/;"	f
serve-client	/usr/share/guile/2.0/system/repl/server.scm	/^(define (serve-client client addr)$/;"	f
serve-one-client	/usr/share/guile/2.0/web/server.scm	/^(define (serve-one-client handler impl server state)$/;"	f
servent:aliases	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (servent:aliases obj) (vector-ref obj 1))$/;"	f
servent:name	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (servent:name obj) (vector-ref obj 0))$/;"	f
servent:port	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (servent:port obj) (vector-ref obj 2))$/;"	f
servent:proto	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (servent:proto obj) (vector-ref obj 3))$/;"	f
server	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor server #f)$/;"	f
server-impl	/usr/share/guile/2.0/web/server.scm	/^(define-record-type server-impl$/;"	f
set-autoloaded!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-autoloaded! p m done?)$/;"	f
set-batch-mode?!	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (set-batch-mode?! arg)$/;"	f
set-block-next-free!	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define-inlinable (set-block-next-free! block next-free)$/;"	f
set-buffered-input-continuation?!	/usr/share/guile/2.0/ice-9/buffered-input.scm	/^(define (set-buffered-input-continuation?! port val)$/;"	f
set-char-bit	/usr/share/guile/2.0/language/elisp/lexer.scm	/^(define (set-char-bit chr bit)$/;"	f
set-difference	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (set-difference l1 l2)$/;"	f
set-exception-printer!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define set-exception-printer! #f)$/;"	f
set-field	/usr/share/guile/2.0/srfi/srfi-9/gnu.scm	/^(define-syntax-rule (set-field s (getter ...) expr)$/;"	f
set-fields	/usr/share/guile/2.0/srfi/srfi-9/gnu.scm	/^(define-syntax-rule (set-fields s . rest)$/;"	f
set-http-proxy-port?!	/usr/share/guile/2.0/web/http.scm	/^(define (set-http-proxy-port?! port flag)$/;"	f
set-mapping-data!	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define set-mapping-data! (record-modifier mapping-type 'data))$/;"	f
set-mapping-hooks!	/usr/share/guile/2.0/ice-9/mapping.scm	/^(define set-mapping-hooks! (record-modifier mapping-type 'hooks))$/;"	f
set-module-public-interface!	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(set! set-module-public-interface!$/;"	s
set-operand-residual-value!	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (set-operand-residual-value! op val)$/;"	f
set-poll-set-events!	/usr/share/guile/2.0/ice-9/poll.scm	/^(define (set-poll-set-events! set idx events)$/;"	f
set-poll-set-revents!	/usr/share/guile/2.0/ice-9/poll.scm	/^(define (set-poll-set-revents! set idx revents)$/;"	f
set-port-position!	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (set-port-position! port offset)$/;"	f
set-readline-input-port!	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-public (set-readline-input-port! p)$/;"	f
set-readline-output-port!	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-public (set-readline-output-port! p)$/;"	f
set-readline-prompt!	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-public (set-readline-prompt! p . rest)$/;"	f
set-readline-read-hook!	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-public (set-readline-read-hook! h)$/;"	f
set-record-type-printer!	/usr/share/guile/2.0/srfi/srfi-9/gnu.scm	/^(define (set-record-type-printer! type proc)$/;"	f
set-repl-prompt!	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (set-repl-prompt! v)$/;"	f
set-symbol-property!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-symbol-property! sym prop val)$/;"	f
set-system-module!	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (set-system-module! m s)$/;"	f
set-tm:gmtoff	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-tm:gmtoff obj val) (vector-set! obj 9 val))$/;"	f
set-tm:hour	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-tm:hour obj val) (vector-set! obj 2 val))$/;"	f
set-tm:isdst	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-tm:isdst obj val) (vector-set! obj 8 val))$/;"	f
set-tm:mday	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-tm:mday obj val) (vector-set! obj 3 val))$/;"	f
set-tm:min	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-tm:min obj val) (vector-set! obj 1 val))$/;"	f
set-tm:mon	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-tm:mon obj val) (vector-set! obj 4 val))$/;"	f
set-tm:sec	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-tm:sec obj val) (vector-set! obj 0 val))$/;"	f
set-tm:wday	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-tm:wday obj val) (vector-set! obj 6 val))$/;"	f
set-tm:yday	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-tm:yday obj val) (vector-set! obj 7 val))$/;"	f
set-tm:year	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-tm:year obj val) (vector-set! obj 5 val))$/;"	f
set-tm:zone	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (set-tm:zone obj val) (vector-set! obj 10 val))$/;"	f
set-variable!	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (set-variable! loc sym module value)$/;"	f
set-variable!	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define (set-variable! module sym value)$/;"	f
setenv	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (setenv name value)$/;"	f
setgrent	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (setgrent) (setgr #t))$/;"	f
sethostent	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (sethostent . stayopen) $/;"	f
setnetent	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (setnetent . stayopen) $/;"	f
setprotoent	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (setprotoent . stayopen) $/;"	f
setpwent	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (setpwent) (setpw #t))$/;"	f
setq	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial setq (loc args)$/;"	f
setservent	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (setservent . stayopen) $/;"	f
setter	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method ((setter object-info) o env x)$/;"	f
setter	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define setter$/;"	f
seventh	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (seventh x) (caddr (cddddr x)))$/;"	f
shallow-clone	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (shallow-clone (self <object>))$/;"	f
shell-usage	/usr/share/guile/2.0/ice-9/command-line.scm	/^(define* (shell-usage name fatal? #:optional fmt . args)$/;"	f
shift	/usr/share/guile/2.0/ice-9/control.scm	/^(define-syntax-rule (shift var . body)$/;"	f
shift	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define shift ash)$/;"	f
shift*	/usr/share/guile/2.0/ice-9/control.scm	/^(define (shift* fc)$/;"	f
short-opt-rx	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define short-opt-rx           (make-regexp "^-([a-zA-Z]+)(.*)"))$/;"	f
show	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (show repl . args)$/;"	f
show-help	/usr/share/guile/2.0/scripts/help.scm	/^(define* (show-help mod #:optional (port (current-output-port)))$/;"	f
show-summary	/usr/share/guile/2.0/scripts/help.scm	/^(define* (show-summary mod #:optional (port (current-output-port)))$/;"	f
show-usage	/usr/share/guile/2.0/scripts/help.scm	/^(define* (show-usage mod #:optional (port (current-output-port)))$/;"	f
show-version	/usr/share/guile/2.0/scripts/compile.scm	/^(define (show-version)$/;"	f
show-warning-help	/usr/share/guile/2.0/scripts/compile.scm	/^(define (show-warning-help)$/;"	f
sid	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define sid  86400)                ; seconds in a day$/;"	f
sihd	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define sihd 43200)                ; seconds in a half day$/;"	f
simple-expression?	/usr/share/guile/2.0/language/tree-il/fix-letrec.scm	/^(define (simple-expression? x bound-vars simple-primcall?)$/;"	f
singly-valued-expression?	/usr/share/guile/2.0/language/tree-il/cse.scm	/^(define (singly-valued-expression? x ctx)$/;"	f
singly-valued-expression?	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (singly-valued-expression? exp)$/;"	f
singly-valued-primitive?	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define (singly-valued-primitive? prim)$/;"	f
sixth	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (sixth x) (cadr (cddddr x)))$/;"	f
skip-horizontal-whitespace	/usr/share/guile/2.0/texinfo.scm	/^(define (skip-horizontal-whitespace port)$/;"	f
skip-until	/usr/share/guile/2.0/sxml/upstream/input-parse.scm	/^(define-opt (skip-until arg (optional (port (current-input-port))) )$/;"	f
skip-while	/usr/share/guile/2.0/sxml/upstream/input-parse.scm	/^(define-opt (skip-while skip-chars (optional (port (current-input-port))) )$/;"	f
skip-whitespace	/usr/share/guile/2.0/texinfo.scm	/^(define (skip-whitespace port)$/;"	f
skip-whitespace	/usr/share/guile/2.0/web/http.scm	/^(define* (skip-whitespace str #:optional (start 0) (end (string-length str)))$/;"	f
slot-definition-accessor	/usr/share/guile/2.0/oop/goops.scm	/^(define (slot-definition-accessor s)$/;"	f
slot-definition-allocation	/usr/share/guile/2.0/oop/goops.scm	/^(define (slot-definition-allocation s)$/;"	f
slot-definition-getter	/usr/share/guile/2.0/oop/goops.scm	/^(define (slot-definition-getter s)$/;"	f
slot-definition-init-form	/usr/share/guile/2.0/oop/goops.scm	/^(define (slot-definition-init-form s)$/;"	f
slot-definition-init-keyword	/usr/share/guile/2.0/oop/goops.scm	/^(define (slot-definition-init-keyword s)$/;"	f
slot-definition-init-thunk	/usr/share/guile/2.0/oop/goops.scm	/^(define (slot-definition-init-thunk s)$/;"	f
slot-definition-init-value	/usr/share/guile/2.0/oop/goops.scm	/^(define (slot-definition-init-value s)$/;"	f
slot-definition-name	/usr/share/guile/2.0/oop/goops.scm	/^(define slot-definition-name car)$/;"	f
slot-definition-options	/usr/share/guile/2.0/oop/goops.scm	/^(define slot-definition-options cdr)$/;"	f
slot-definition-setter	/usr/share/guile/2.0/oop/goops.scm	/^(define (slot-definition-setter s)$/;"	f
slot-init-function	/usr/share/guile/2.0/oop/goops.scm	/^(define (slot-init-function class slot-name)$/;"	f
slot-missing	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (slot-missing (c <class>) (o <object>) s value)$/;"	f
slot-missing	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (slot-missing (c <class>) (o <object>) s)$/;"	f
slot-missing	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (slot-missing (c <class>) s)$/;"	f
slot-ref	/usr/share/guile/2.0/ice-9/match.scm	/^(define-syntax slot-ref$/;"	f
slot-set!	/usr/share/guile/2.0/ice-9/match.scm	/^(define-syntax slot-set!$/;"	f
slot-unbound	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (slot-unbound (c <class>) (o <object>) s)$/;"	f
slot-unbound	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (slot-unbound (c <class>) s)$/;"	f
slot-unbound	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (slot-unbound (o <object>))$/;"	f
snarf	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (snarf input-file lang)$/;"	f
snarf-check-and-output-texi	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define (snarf-check-and-output-texi . flags)$/;"	f
snarf-file	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (snarf-file input output texinfo? lang)$/;"	f
snarf-guile-m4-docs	/usr/share/guile/2.0/scripts/snarf-guile-m4-docs.scm	/^(define (snarf-guile-m4-docs . args)$/;"	f
sockaddr:addr	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (sockaddr:addr obj) (vector-ref obj 1))$/;"	f
sockaddr:fam	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (sockaddr:fam obj) (vector-ref obj 0))$/;"	f
sockaddr:flowinfo	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (sockaddr:flowinfo obj) (vector-ref obj 3))$/;"	f
sockaddr:path	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (sockaddr:path obj) (vector-ref obj 1))$/;"	f
sockaddr:port	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (sockaddr:port obj) (vector-ref obj 2))$/;"	f
sockaddr:scopeid	/usr/share/guile/2.0/ice-9/networking.scm	/^(define (sockaddr:scopeid obj) (vector-ref obj 4))$/;"	f
sockets-lock	/usr/share/guile/2.0/system/repl/server.scm	/^(define sockets-lock (make-mutex))$/;"	f
some	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (some pred l . rest)$/;"	f
sort-applicable-methods	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (sort-applicable-methods (gf <generic>) methods args)$/;"	f
sort-defs	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (sort-defs ordering a b)$/;"	f
source	/usr/share/guile/2.0/ice-9/session.scm	/^(define (source obj)$/;"	f
source->ip-range	/usr/share/guile/2.0/system/vm/traps.scm	/^(define (source->ip-range proc file line)$/;"	f
source->string	/usr/share/guile/2.0/language/assembly/disassemble.scm	/^(define (source->string src)$/;"	f
source-closures	/usr/share/guile/2.0/system/xref.scm	/^(define* (source-closures file line #:key (canonicalization 'relative))$/;"	f
source-closures-or-procedures	/usr/share/guile/2.0/system/vm/traps.scm	/^(define (source-closures-or-procedures file line)$/;"	f
source-location	/usr/share/guile/2.0/system/base/lalr.upstream.scm	/^(define-record-type source-location$/;"	f
source-location->source-properties	/usr/share/guile/2.0/system/base/lalr.scm	/^(define (source-location->source-properties loc)$/;"	f
source-procedures	/usr/share/guile/2.0/system/xref.scm	/^(define* (source-procedures file line #:key (canonicalization 'relative))$/;"	f
source-string	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (source-string source)$/;"	f
source:addr	/usr/share/guile/2.0/system/vm/program.scm	/^(define (source:addr source)$/;"	f
source:column	/usr/share/guile/2.0/system/vm/program.scm	/^(define (source:column source)$/;"	f
source:file	/usr/share/guile/2.0/system/vm/program.scm	/^(define (source:file source)$/;"	f
source:line	/usr/share/guile/2.0/system/vm/program.scm	/^(define (source:line source)$/;"	f
source:line-for-user	/usr/share/guile/2.0/system/vm/program.scm	/^(define (source:line-for-user source)$/;"	f
space-significant?	/usr/share/guile/2.0/texinfo.scm	/^(define (space-significant? command)$/;"	f
span	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (span pred lst)$/;"	f
span!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (span! pred list)$/;"	f
spawn-coop-repl-server	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define* (spawn-coop-repl-server$/;"	f
spawn-server	/usr/share/guile/2.0/system/repl/server.scm	/^(define* (spawn-server #:optional (server-socket (make-tcp-server-socket)))$/;"	f
split-after-char	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (split-after-char char str ret)$/;"	f
split-after-char-last	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (split-after-char-last char str ret)$/;"	f
split-after-predicate	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (split-after-predicate pred str ret)$/;"	f
split-and-decode-uri-path	/usr/share/guile/2.0/web/uri.scm	/^(define (split-and-decode-uri-path path)$/;"	f
split-and-trim	/usr/share/guile/2.0/web/http.scm	/^(define* (split-and-trim str #:optional (delim #\\,)$/;"	f
split-arg-list	/usr/share/guile/2.0/ice-9/getopt-long.scm	/^(define (split-arg-list argument-list)$/;"	f
split-at	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (split-at lst i)$/;"	f
split-at!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (split-at! lst i)$/;"	f
split-before-char	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (split-before-char char str ret)$/;"	f
split-before-char-last	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (split-before-char-last char str ret)$/;"	f
split-before-predicate	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (split-before-predicate pred str ret)$/;"	f
split-by-single-words	/usr/share/guile/2.0/texinfo/string-utils.scm	/^(define (split-by-single-words str)$/;"	f
split-c-module-name	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (split-c-module-name str)$/;"	f
split-discarding-char	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (split-discarding-char char str ret)$/;"	f
split-discarding-char-last	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (split-discarding-char-last char str ret)$/;"	f
split-discarding-predicate	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (split-discarding-predicate pred str ret)$/;"	f
split-header-names	/usr/share/guile/2.0/web/http.scm	/^(define (split-header-names str)$/;"	f
split-lambda-arguments	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (split-lambda-arguments loc args)$/;"	f
split-let-bindings	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (split-let-bindings bindings module)$/;"	f
split-prefixed	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (split-prefixed string prefix)$/;"	f
split-real	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (split-real r)$/;"	f
spread	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define (spread n amount)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define-module (srfi srfi-1)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-10.scm	/^(define-module (srfi srfi-10)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-11.scm	/^(define-module (srfi srfi-11)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-111.scm	/^(define-module (srfi srfi-111)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-13.scm	/^(define-module (srfi srfi-13))$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-14.scm	/^(define-module (srfi srfi-14))$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-16.scm	/^(define-module (srfi srfi-16)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define-module (srfi srfi-17)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define-module (srfi srfi-18)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define-module (srfi srfi-19)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-2.scm	/^(define-module (srfi srfi-2)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-26.scm	/^(define-module (srfi srfi-26)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-27.scm	/^(define-module (srfi srfi-27)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-31.scm	/^(define-module (srfi srfi-31)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-34.scm	/^(define-module (srfi srfi-34)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define-module (srfi srfi-35)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-37.scm	/^(define-module (srfi srfi-37)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-38.scm	/^(define-module (srfi srfi-38)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-39.scm	/^(define-module (srfi srfi-39)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-4.scm	/^(define-module (srfi srfi-4)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-4/gnu.scm	/^(define-module (srfi srfi-4 gnu)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-module (srfi srfi-41)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-42.scm	/^(define-module (srfi srfi-42)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define-module (srfi srfi-43)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-45.scm	/^(define-module (srfi srfi-45)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-6.scm	/^(define-module (srfi srfi-6)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-60.scm	/^(define-module (srfi srfi-60)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-64.scm	/^(define-module (srfi srfi-64)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-67.scm	/^(define-module (srfi srfi-67)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define-module (srfi srfi-69)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-8.scm	/^(define-module (srfi srfi-8)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-88.scm	/^(define-module (srfi srfi-88)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define-module (srfi srfi-9)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-9/gnu.scm	/^(define-module (srfi srfi-9 gnu)$/;"	f
srfi	/usr/share/guile/2.0/srfi/srfi-98.scm	/^(define-module (srfi srfi-98)$/;"	f
srfi-18-exception-handler	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (srfi-18-exception-handler key . args)$/;"	f
srfi-18-exception-preserver	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (srfi-18-exception-preserver obj)$/;"	f
srfi-37:option	/usr/share/guile/2.0/srfi/srfi-37.scm	/^(define-record-type srfi-37:option$/;"	f
srfi-69:hash-table	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define-record-type srfi-69:hash-table$/;"	f
ssax:Prefix-XML	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define ssax:Prefix-XML (string->symbol "xml"))$/;"	f
ssax:S-chars	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define ssax:S-chars (map ascii->char '(32 10 9 13)))$/;"	f
ssax:assert-token	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:assert-token token kind gi error-cont)$/;"	f
ssax:complete-start-tag	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define ssax:complete-start-tag$/;"	f
ssax:define-labeled-arg-macro	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define-syntax ssax:define-labeled-arg-macro$/;"	f
ssax:handle-parsed-entity	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:handle-parsed-entity port name entities$/;"	f
ssax:largest-unres-name	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define ssax:largest-unres-name (cons $/;"	f
ssax:make-elem-parser	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define-syntax ssax:make-elem-parser$/;"	f
ssax:make-parser/positional-args	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define-syntax ssax:make-parser\/positional-args$/;"	f
ssax:make-pi-parser	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define-syntax ssax:make-pi-parser$/;"	f
ssax:ncname-starting-char?	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:ncname-starting-char? a-char)$/;"	f
ssax:predefined-parsed-entities	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define ssax:predefined-parsed-entities$/;"	f
ssax:read-NCName	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:read-NCName port)$/;"	f
ssax:read-QName	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:read-QName port)$/;"	f
ssax:read-attributes	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define ssax:read-attributes  ; ssax:read-attributes port entities$/;"	f
ssax:read-cdata-body	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define ssax:read-cdata-body $/;"	f
ssax:read-char-data	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define ssax:read-char-data$/;"	f
ssax:read-char-ref	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:read-char-ref port)$/;"	f
ssax:read-external-id	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:read-external-id port)$/;"	f
ssax:read-markup-token	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define ssax:read-markup-token ; procedure ssax:read-markup-token port$/;"	f
ssax:read-pi-body-as-string	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:read-pi-body-as-string port)$/;"	f
ssax:resolve-name	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:resolve-name port unres-name namespaces apply-default-ns?)$/;"	f
ssax:reverse-collect-str	/usr/share/guile/2.0/sxml/simple.scm	/^(define (ssax:reverse-collect-str fragments)$/;"	f
ssax:reverse-collect-str	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:reverse-collect-str fragments)$/;"	f
ssax:reverse-collect-str-drop-ws	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:reverse-collect-str-drop-ws fragments)$/;"	f
ssax:scan-Misc	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:scan-Misc port)$/;"	f
ssax:skip-S	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:skip-S port)$/;"	f
ssax:skip-internal-dtd	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:skip-internal-dtd port)      $/;"	f
ssax:skip-pi	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:skip-pi port)      $/;"	f
ssax:uri-string->symbol	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:uri-string->symbol uri-str)$/;"	f
ssax:warn	/usr/share/guile/2.0/sxml/ssax.scm	/^(define (ssax:warn port . args)$/;"	f
ssax:xml->sxml	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (ssax:xml->sxml port namespace-prefix-assig)$/;"	f
stack->procedures	/usr/share/guile/2.0/statprof.scm	/^(define (stack->procedures stack)$/;"	f
stack->vector	/usr/share/guile/2.0/system/repl/debug.scm	/^(define (stack->vector stack)$/;"	f
stack-catch	/usr/share/guile/2.0/ice-9/stack-catch.scm	/^(define (stack-catch key thunk handler)$/;"	f
stack-saved?	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define-syntax stack-saved?$/;"	f
stack-saved?	/usr/share/guile/2.0/ice-9/save-stack.scm	/^(define stack-saved? #f)$/;"	f
stacks	/usr/share/guile/2.0/statprof.scm	/^(define stacks '())$/;"	f
standard-define-class	/usr/share/guile/2.0/oop/goops.scm	/^(define-syntax-rule (standard-define-class arg ...)$/;"	f
standard-error-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (standard-error-port)$/;"	f
standard-get	/usr/share/guile/2.0/oop/goops.scm	/^(define-standard-accessor-method ((standard-get n) o)$/;"	f
standard-input-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (standard-input-port)$/;"	f
standard-output-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (standard-output-port)$/;"	f
standard-set	/usr/share/guile/2.0/oop/goops.scm	/^(define-standard-accessor-method ((standard-set n) o v)$/;"	f
start-coop-repl	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (start-coop-repl coop-server)$/;"	f
start-repl	/usr/share/guile/2.0/system/repl/repl.scm	/^(define* (start-repl #:optional (lang (current-language)) #:key debug)$/;"	f
start-repl*	/usr/share/guile/2.0/system/repl/repl.scm	/^(define (start-repl* lang debug prompting-meta-read)$/;"	f
start-repl-client	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (start-repl-client coop-server client)$/;"	f
start-stack	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (start-stack tag exp)$/;"	f
stat&flag-proc	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define (stat&flag-proc dir-readable? . control-flags)$/;"	f
stat-dir-readable?-proc	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define (stat-dir-readable?-proc uid gid)$/;"	f
stat:atime	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:atime f) (vector-ref f 8))$/;"	f
stat:atimensec	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:atimensec f) (vector-ref f 15))$/;"	f
stat:blksize	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:blksize f) (vector-ref f 11))$/;"	f
stat:blocks	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:blocks f) (vector-ref f 12))$/;"	f
stat:ctime	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:ctime f) (vector-ref f 10))$/;"	f
stat:ctimensec	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:ctimensec f) (vector-ref f 17))$/;"	f
stat:dev	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:dev f) (vector-ref f 0))$/;"	f
stat:gid	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:gid f) (vector-ref f 5))$/;"	f
stat:ino	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:ino f) (vector-ref f 1))$/;"	f
stat:mode	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:mode f) (vector-ref f 2))$/;"	f
stat:mtime	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:mtime f) (vector-ref f 9))$/;"	f
stat:mtimensec	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:mtimensec f) (vector-ref f 16))$/;"	f
stat:nlink	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:nlink f) (vector-ref f 3))$/;"	f
stat:perms	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:perms f) (vector-ref f 14))$/;"	f
stat:rdev	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:rdev f) (vector-ref f 6))$/;"	f
stat:size	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:size f) (vector-ref f 7))$/;"	f
stat:type	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:type f) (vector-ref f 13))$/;"	f
stat:uid	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (stat:uid f) (vector-ref f 4))$/;"	f
statistics	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (statistics repl)$/;"	f
statprof	/usr/share/guile/2.0/statprof.scm	/^(define* (statprof thunk #:key (loop 1) (hz 100) (count-calls? #f)$/;"	f
statprof	/usr/share/guile/2.0/statprof.scm	/^(define-module (statprof)$/;"	f
statprof-accumulated-time	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-accumulated-time)$/;"	f
statprof-active?	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-active?)$/;"	f
statprof-call-data->stats	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-call-data->stats call-data)$/;"	f
statprof-call-data-calls	/usr/share/guile/2.0/statprof.scm	/^(define statprof-call-data-calls call-data-call-count)$/;"	f
statprof-call-data-cum-samples	/usr/share/guile/2.0/statprof.scm	/^(define statprof-call-data-cum-samples call-data-cum-sample-count)$/;"	f
statprof-call-data-name	/usr/share/guile/2.0/statprof.scm	/^(define statprof-call-data-name call-data-name)$/;"	f
statprof-call-data-self-samples	/usr/share/guile/2.0/statprof.scm	/^(define statprof-call-data-self-samples call-data-self-sample-count)$/;"	f
statprof-display	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-display . port)$/;"	f
statprof-display-anomolies	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-display-anomolies)$/;"	f
statprof-fetch-call-tree	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-fetch-call-tree)$/;"	f
statprof-fetch-stacks	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-fetch-stacks)$/;"	f
statprof-fold-call-data	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-fold-call-data proc init)$/;"	f
statprof-proc-call-data	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-proc-call-data proc)$/;"	f
statprof-reset	/usr/share/guile/2.0/statprof.scm	/^(define* (statprof-reset sample-seconds sample-microseconds count-calls?$/;"	f
statprof-sample-count	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-sample-count)$/;"	f
statprof-start	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-start)$/;"	f
statprof-stats-%-time-in-proc	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-stats-%-time-in-proc stats) (vector-ref stats 1))$/;"	f
statprof-stats-calls	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-stats-calls stats) (vector-ref stats 4))$/;"	f
statprof-stats-cum-secs-in-proc	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-stats-cum-secs-in-proc stats) (vector-ref stats 2))$/;"	f
statprof-stats-cum-secs-per-call	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-stats-cum-secs-per-call stats) (vector-ref stats 6))$/;"	f
statprof-stats-proc-name	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-stats-proc-name stats) (vector-ref stats 0))$/;"	f
statprof-stats-self-secs-in-proc	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-stats-self-secs-in-proc stats) (vector-ref stats 3))$/;"	f
statprof-stats-self-secs-per-call	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-stats-self-secs-per-call stats) (vector-ref stats 5))$/;"	f
statprof-stop	/usr/share/guile/2.0/statprof.scm	/^(define (statprof-stop)$/;"	f
stats-sorter	/usr/share/guile/2.0/statprof.scm	/^(define (stats-sorter x y)$/;"	f
std-tie-breaker	/usr/share/guile/2.0/oop/goops.scm	/^(define (std-tie-breaker get-supers)$/;"	f
step	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (step repl)$/;"	f
step-instruction	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (step-instruction repl)$/;"	f
stexi->chapter	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (stexi->chapter stexi)$/;"	f
stexi->plain-text	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (stexi->plain-text tree)$/;"	f
stexi->shtml	/usr/share/guile/2.0/texinfo/html.scm	/^(define (stexi->shtml tree)$/;"	f
stexi->sxml	/usr/share/guile/2.0/texinfo.scm	/^(define (stexi->sxml tree)$/;"	f
stexi->texi	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (stexi->texi tree)$/;"	f
stexi-extract-index	/usr/share/guile/2.0/texinfo/indexing.scm	/^(define (stexi-extract-index tree manual-name kind)$/;"	f
stop-server-and-clients!	/usr/share/guile/2.0/system/repl/server.scm	/^(define (stop-server-and-clients!)$/;"	f
store-repl-cont	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define (store-repl-cont cont coop-repl)$/;"	f
stream	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax stream$/;"	f
stream->list	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream->list stream)$/;"	f
stream->list	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define stream->list$/;"	f
stream->list&length	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream->list&length stream)$/;"	f
stream->reversed-list	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream->reversed-list stream)$/;"	f
stream->reversed-list&length	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream->reversed-list&length stream)$/;"	f
stream->vector	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream->vector stream)$/;"	f
stream-append	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-append . strms)$/;"	f
stream-car	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream-car stream)$/;"	f
stream-car	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-car strm)$/;"	f
stream-cdr	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream-cdr stream)$/;"	f
stream-cdr	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-cdr strm)$/;"	f
stream-concat	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-concat strms)$/;"	f
stream-cons	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (stream-cons obj strm)$/;"	f
stream-constant	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define stream-constant$/;"	f
stream-delay	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (stream-delay exp)$/;"	f
stream-do	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax* (stream-do x)$/;"	f
stream-drop	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-drop n strm)$/;"	f
stream-drop-while	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-drop-while pred? strm)$/;"	f
stream-eager	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-eager x)$/;"	f
stream-filter	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-filter pred? strm)$/;"	f
stream-fold	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream-fold f init stream . rest)$/;"	f
stream-fold	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-fold proc base strm)$/;"	f
stream-fold-aux	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-inlinable (stream-fold-aux proc base strm limit)$/;"	f
stream-fold-many	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream-fold-many f r streams)$/;"	f
stream-fold-one	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream-fold-one f r stream)$/;"	f
stream-for-each	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream-for-each f stream . rest)$/;"	f
stream-for-each	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define stream-for-each$/;"	f
stream-for-each-many	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream-for-each-many f streams)$/;"	f
stream-for-each-one	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream-for-each-one f stream)$/;"	f
stream-force	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-force promise)$/;"	f
stream-from	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define* (stream-from first #:optional (step 1))$/;"	f
stream-iterate	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-iterate proc base)$/;"	f
stream-lambda	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (stream-lambda formals body0 body1 ...)$/;"	f
stream-lazy	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (stream-lazy exp)$/;"	f
stream-length	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-length strm)$/;"	f
stream-let	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (stream-let tag ((name val) ...) body1 body2 ...)$/;"	f
stream-map	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream-map f stream . rest)$/;"	f
stream-map	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define stream-map$/;"	f
stream-match	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax* (stream-match x)$/;"	f
stream-null	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define stream-null (stream-eager %stream-null))$/;"	f
stream-null?	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (stream-null? stream)$/;"	f
stream-null?	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-null? obj)$/;"	f
stream-of	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (stream-of expr rest ...)$/;"	f
stream-of-aux	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax stream-of-aux$/;"	f
stream-pair?	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-pair? obj)$/;"	f
stream-pare	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-record-type stream-pare (make-stream-pare kar kdr) stream-pare?$/;"	f
stream-promise	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-record-type stream-promise (make-stream-promise val) stream-promise?$/;"	f
stream-promise-visit	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define* (stream-promise-visit promise #:key on-eager on-lazy)$/;"	f
stream-range	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define* (stream-range first past #:optional step)$/;"	f
stream-ref	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-ref strm n)$/;"	f
stream-reverse	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-reverse strm)$/;"	f
stream-scan	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-scan proc base strm)$/;"	f
stream-take	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-take n strm)$/;"	f
stream-take-while	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-take-while pred? strm)$/;"	f
stream-unfold	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-unfold mapper pred? generator base)$/;"	f
stream-unfolds	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-unfolds gen seed)$/;"	f
stream-value	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-record-type stream-value (make-stream-value tag proc) stream-value?$/;"	f
stream-zip	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define (stream-zip strm . rest)$/;"	f
stream?	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define stream? stream-promise?)$/;"	f
string->bytevector	/usr/share/guile/2.0/ice-9/iconv.scm	/^(define* (string->bytevector str encoding$/;"	f
string->date	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (string->date input-string template-string)$/;"	f
string->escaped-xml	/usr/share/guile/2.0/sxml/simple.scm	/^(define string->escaped-xml$/;"	f
string->header	/usr/share/guile/2.0/web/http.scm	/^(define (string->header name)$/;"	f
string->keyword	/usr/share/guile/2.0/srfi/srfi-88.scm	/^(define (string->keyword s)$/;"	f
string->stexi	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define (string->stexi str)$/;"	f
string->uri	/usr/share/guile/2.0/web/uri.scm	/^(define (string->uri string)$/;"	f
string->uri*	/usr/share/guile/2.0/web/uri.scm	/^(define (string->uri* string)$/;"	f
string->wrapped-lines	/usr/share/guile/2.0/texinfo/string-utils.scm	/^(define (string->wrapped-lines str . kwargs)$/;"	f
string-any	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define string-any$/;"	f
string-append-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax string-append-ec$/;"	f
string-ci-hash	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define string-ci-hash string-hash-ci)$/;"	f
string-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax string-ec$/;"	f
string-every	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define string-every$/;"	f
string-indent	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (string-indent str)$/;"	f
string-match	/usr/share/guile/2.0/ice-9/regex.scm	/^(define (string-match pattern str . args)$/;"	f
string-match?	/usr/share/guile/2.0/web/http.scm	/^(define-syntax string-match?$/;"	f
string-prefix-predicate	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define (string-prefix-predicate pred?)$/;"	f
string-prefix=?	/usr/share/guile/2.0/ice-9/string-fun.scm	/^(define string-prefix=? (string-prefix-predicate string=?))$/;"	f
string-ref	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define string-ref$/;"	f
string-whitespace?	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define (string-whitespace? str)$/;"	f
string-whitespace?	/usr/share/guile/2.0/texinfo.scm	/^(define (string-whitespace? str)$/;"	f
stringify	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define (stringify exp)$/;"	f
strip-extensions	/usr/share/guile/2.0/scripts/help.scm	/^(define (strip-extensions path)$/;"	f
strip-extensions	/usr/share/guile/2.0/scripts/list.scm	/^(define (strip-extensions path)$/;"	f
strip-sequence	/usr/share/guile/2.0/ice-9/runq.scm	/^(define (strip-sequence . strips)$/;"	f
struct-layout	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (struct-layout s)$/;"	f
struct-layout-for-condition	/usr/share/guile/2.0/srfi/srfi-35.scm	/^(define (struct-layout-for-condition field-names)$/;"	f
struct-nfields	/usr/share/guile/2.0/language/tree-il.scm	/^(define (struct-nfields x)$/;"	f
sub-delims	/usr/share/guile/2.0/web/uri.scm	/^(define sub-delims$/;"	f
submodules	/usr/share/guile/2.0/ice-9/session.scm	/^(define (submodules mod)$/;"	f
subsection	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define subsection (make-underliner #\\-))$/;"	f
substring-fill!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (substring-fill! str start end fill)$/;"	f
substring-move-left!	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define substring-move-left!$/;"	f
substring-move-right!	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define substring-move-right!$/;"	f
subsubsection	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define subsubsection (make-underliner #\\.))$/;"	f
subtract-duration	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (subtract-duration time1 duration)$/;"	f
subtract-duration!	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (subtract-duration! t duration)$/;"	f
sum-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax sum-ec$/;"	f
summarize-guile-TODO	/usr/share/guile/2.0/scripts/summarize-guile-TODO.scm	/^(define (summarize-guile-TODO . args)$/;"	f
supported-languages	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define supported-languages$/;"	f
sxml	/usr/share/guile/2.0/sxml/apply-templates.scm	/^(define-module (sxml apply-templates)$/;"	f
sxml	/usr/share/guile/2.0/sxml/fold.scm	/^(define-module (sxml fold)$/;"	f
sxml	/usr/share/guile/2.0/sxml/match.scm	/^(define-module (sxml match)$/;"	f
sxml	/usr/share/guile/2.0/sxml/simple.scm	/^(define-module (sxml simple)$/;"	f
sxml	/usr/share/guile/2.0/sxml/ssax.scm	/^(define-module (sxml ssax)$/;"	f
sxml	/usr/share/guile/2.0/sxml/ssax/input-parse.scm	/^(define-module (sxml ssax input-parse)$/;"	f
sxml	/usr/share/guile/2.0/sxml/transform.scm	/^(define-module (sxml transform)$/;"	f
sxml	/usr/share/guile/2.0/sxml/xpath.scm	/^(define-module (sxml xpath)$/;"	f
sxml->node-name	/usr/share/guile/2.0/texinfo.scm	/^(define (sxml->node-name sxml)$/;"	f
sxml->string	/usr/share/guile/2.0/sxml/simple.scm	/^(define (sxml->string sxml)$/;"	f
sxml->xml	/usr/share/guile/2.0/sxml/simple.scm	/^(define* (sxml->xml tree #:optional (port (current-output-port)))$/;"	f
sxpath	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (sxpath path)$/;"	f
sxpath	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (sxpath path)$/;"	f
symbol	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (symbol . args)$/;"	f
symbol-append	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (symbol-append . args)$/;"	f
symbol-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define (symbol-compare x y)$/;"	f
symbol-prefix-proc	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (symbol-prefix-proc prefix)$/;"	f
symbol-property	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (symbol-property sym prop)$/;"	f
symbol-property-remove!	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (symbol-property-remove! sym prop)$/;"	f
symbol-trim-both	/usr/share/guile/2.0/system/base/syntax.scm	/^(define (symbol-trim-both sym pred)$/;"	f
sync-q!	/usr/share/guile/2.0/ice-9/q.scm	/^(define (sync-q! q)$/;"	f
syntax->datum	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define syntax->datum #f)$/;"	f
syntax-error	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define syntax-error$/;"	f
syntax-error	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define-syntax syntax-error$/;"	f
syntax-error	/usr/share/guile/2.0/language/ecmascript/parse.scm	/^(define* (syntax-error message #:optional token)$/;"	f
syntax-error	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (syntax-error what loc form . args)$/;"	f
syntax-object->datum	/usr/share/guile/2.0/ice-9/syncase.scm	/^(define syntax-object->datum syntax->datum)$/;"	f
syntax-object->datum	/usr/share/guile/2.0/sxml/match.scm	/^(define-syntax-rule (syntax-object->datum stx)$/;"	f
syntax-object-of	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define-syntax syntax-object-of$/;"	f
syntax-rules	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define syntax-rules$/;"	f
syntax-rules	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define-syntax syntax-rules$/;"	f
syntax-source	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define syntax-source #f)$/;"	f
syntax-violation	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define syntax-violation #f)$/;"	f
system	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-module (system syntax))$/;"	f
system	/usr/share/guile/2.0/system/base/ck.scm	/^(define-module (system base ck)$/;"	f
system	/usr/share/guile/2.0/system/base/compile.scm	/^(define-module (system base compile)$/;"	f
system	/usr/share/guile/2.0/system/base/lalr.scm	/^(define-module (system base lalr)$/;"	f
system	/usr/share/guile/2.0/system/base/language.scm	/^(define-module (system base language)$/;"	f
system	/usr/share/guile/2.0/system/base/message.scm	/^(define-module (system base message)$/;"	f
system	/usr/share/guile/2.0/system/base/pmatch.scm	/^(define-module (system base pmatch)$/;"	f
system	/usr/share/guile/2.0/system/base/syntax.scm	/^(define-module (system base syntax)$/;"	f
system	/usr/share/guile/2.0/system/base/target.scm	/^(define-module (system base target)$/;"	f
system	/usr/share/guile/2.0/system/base/types.scm	/^(define-module (system base types)$/;"	f
system	/usr/share/guile/2.0/system/foreign.scm	/^(define-module (system foreign)$/;"	f
system	/usr/share/guile/2.0/system/repl/command.scm	/^(define-module (system repl command)$/;"	f
system	/usr/share/guile/2.0/system/repl/common.scm	/^(define-module (system repl common)$/;"	f
system	/usr/share/guile/2.0/system/repl/coop-server.scm	/^(define-module (system repl coop-server)$/;"	f
system	/usr/share/guile/2.0/system/repl/debug.scm	/^(define-module (system repl debug)$/;"	f
system	/usr/share/guile/2.0/system/repl/describe.scm	/^(define-module (system repl describe)$/;"	f
system	/usr/share/guile/2.0/system/repl/error-handling.scm	/^(define-module (system repl error-handling)$/;"	f
system	/usr/share/guile/2.0/system/repl/repl.scm	/^(define-module (system repl repl)$/;"	f
system	/usr/share/guile/2.0/system/repl/server.scm	/^(define-module (system repl server)$/;"	f
system	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define-module (system vm coverage)$/;"	f
system	/usr/share/guile/2.0/system/vm/frame.scm	/^(define-module (system vm frame)$/;"	f
system	/usr/share/guile/2.0/system/vm/inspect.scm	/^(define-module (system vm inspect)$/;"	f
system	/usr/share/guile/2.0/system/vm/instruction.scm	/^(define-module (system vm instruction)$/;"	f
system	/usr/share/guile/2.0/system/vm/objcode.scm	/^(define-module (system vm objcode)$/;"	f
system	/usr/share/guile/2.0/system/vm/program.scm	/^(define-module (system vm program)$/;"	f
system	/usr/share/guile/2.0/system/vm/trace.scm	/^(define-module (system vm trace)$/;"	f
system	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define-module (system vm trap-state)$/;"	f
system	/usr/share/guile/2.0/system/vm/traps.scm	/^(define-module (system vm traps)$/;"	f
system	/usr/share/guile/2.0/system/vm/vm.scm	/^(define-module (system vm vm)$/;"	f
system	/usr/share/guile/2.0/system/xref.scm	/^(define-module (system xref)$/;"	f
system-error-errno	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (system-error-errno args)$/;"	f
t-value	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (t-value loc)$/;"	f
t-value	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define t-value #t)$/;"	f
table	/usr/share/guile/2.0/texinfo/html.scm	/^(define (table tag args . body)$/;"	f
table	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (table tag args . body)$/;"	f
table-environ	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (table-environ exp lp command type formals args accum)$/;"	f
tag-handlers	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define tag-handlers$/;"	f
tag-replacements	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define tag-replacements$/;"	f
tag-replacements	/usr/share/guile/2.0/texinfo/html.scm	/^(define tag-replacements$/;"	f
tai-epoch-in-jd	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define tai-epoch-in-jd 4881175\/2) ; julian day number for 'the epoch'$/;"	f
take	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define take list-head)$/;"	f
take!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (take! lst i)$/;"	f
take-after	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (take-after pred?)$/;"	f
take-after	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (take-after pred?)$/;"	f
take-right	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (take-right lis k)$/;"	f
take-right	/usr/share/guile/2.0/system/base/lalr.upstream.scm	/^(define (take-right l n)$/;"	f
take-until	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define (take-until pred?)$/;"	f
take-until	/usr/share/guile/2.0/sxml/xpath.scm	/^(define (take-until pred?)$/;"	f
take-until-settitle	/usr/share/guile/2.0/texinfo.scm	/^(define (take-until-settitle port)$/;"	f
take-while	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (take-while pred ls)$/;"	f
take-while!	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (take-while! pred lst)$/;"	f
tape-size	/usr/share/guile/2.0/language/brainfuck/compile-scheme.scm	/^(define tape-size 30000)$/;"	f
tape-size	/usr/share/guile/2.0/language/brainfuck/compile-tree-il.scm	/^(define tape-size 30000)$/;"	f
target-cpu	/usr/share/guile/2.0/system/base/target.scm	/^(define (target-cpu)$/;"	f
target-endianness	/usr/share/guile/2.0/system/base/target.scm	/^(define (target-endianness)$/;"	f
target-os	/usr/share/guile/2.0/system/base/target.scm	/^(define (target-os)$/;"	f
target-type	/usr/share/guile/2.0/system/base/target.scm	/^(define (target-type)$/;"	f
target-vendor	/usr/share/guile/2.0/system/base/target.scm	/^(define (target-vendor)$/;"	f
target-word-size	/usr/share/guile/2.0/system/base/target.scm	/^(define (target-word-size)$/;"	f
te	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor te '())$/;"	f
templatize	/usr/share/doc/guile-2.0-dev/examples/web/debug-sxml.scm	/^(define* (templatize #:key (title "No title") (body '((p "No body"))))$/;"	f
tenth	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (tenth x) (cadr (cddddr (cddddr x))))$/;"	f
terminal-width	/usr/share/guile/2.0/system/repl/debug.scm	/^(define terminal-width$/;"	f
terminated-thread-exception	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define terminated-thread-exception (list 'terminated-thread-exception))$/;"	f
terminated-thread-exception?	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (terminated-thread-exception? obj) $/;"	f
test-apply	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-apply first . rest)$/;"	f
test-expect-fail	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define-syntax test-expect-fail$/;"	f
test-group	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define-syntax test-group$/;"	f
test-group-with-cleanup	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define-syntax test-group-with-cleanup$/;"	f
test-log-to-file	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define test-log-to-file #t)$/;"	f
test-match-all	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define-syntax test-match-all$/;"	f
test-match-any	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define-syntax test-match-any$/;"	f
test-match-name	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-match-name name)$/;"	f
test-match-nth	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define-syntax test-match-nth$/;"	f
test-on-bad-count-simple	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-on-bad-count-simple runner count expected-count)$/;"	f
test-on-bad-end-name-simple	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-on-bad-end-name-simple runner begin-name end-name)$/;"	f
test-on-final-simple	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-on-final-simple runner)$/;"	f
test-on-group-begin-simple	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-on-group-begin-simple runner suite-name count)$/;"	f
test-on-group-end-simple	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-on-group-end-simple runner)$/;"	f
test-on-test-begin-simple	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-on-test-begin-simple runner)$/;"	f
test-on-test-end-simple	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-on-test-end-simple runner)$/;"	f
test-passed?	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-passed? . rest)$/;"	f
test-read-eval-string	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-read-eval-string string)$/;"	f
test-result-clear	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-result-clear runner)$/;"	f
test-result-kind	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-result-kind . rest)$/;"	f
test-result-ref	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define-syntax test-result-ref$/;"	f
test-result-remove	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-result-remove runner pname)$/;"	f
test-result-set!	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-result-set! runner pname value)$/;"	f
test-runner-create	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-runner-create)$/;"	f
test-runner-get	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-runner-get)$/;"	f
test-runner-group-path	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-runner-group-path runner)$/;"	f
test-runner-null	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-runner-null)$/;"	f
test-runner-reset	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-runner-reset runner)$/;"	f
test-runner-simple	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-runner-simple)$/;"	f
test-runner-test-name	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define (test-runner-test-name runner)$/;"	f
test-skip	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define-syntax test-skip$/;"	f
test-with-runner	/usr/share/guile/2.0/srfi/srfi-64/testing.scm	/^(define-syntax test-with-runner$/;"	f
texi->stexi	/usr/share/guile/2.0/texinfo.scm	/^(define (texi->stexi port)$/;"	f
texi-command-depth	/usr/share/guile/2.0/texinfo.scm	/^(define (texi-command-depth command max-depth)$/;"	f
texi-command-specs	/usr/share/guile/2.0/texinfo.scm	/^(define texi-command-specs$/;"	f
texi-fragment->stexi	/usr/share/guile/2.0/texinfo.scm	/^(define (texi-fragment->stexi string-or-port)$/;"	f
texi-quote	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define (texi-quote s)$/;"	f
texinfo	/usr/share/guile/2.0/texinfo.scm	/^(define-module (texinfo)$/;"	f
texinfo	/usr/share/guile/2.0/texinfo/docbook.scm	/^(define-module (texinfo docbook)$/;"	f
texinfo	/usr/share/guile/2.0/texinfo/html.scm	/^(define-module (texinfo html)$/;"	f
texinfo	/usr/share/guile/2.0/texinfo/indexing.scm	/^(define-module (texinfo indexing)$/;"	f
texinfo	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (texinfo tag args . body)$/;"	f
texinfo	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define-module (texinfo plain-text)$/;"	f
texinfo	/usr/share/guile/2.0/texinfo/reflection.scm	/^(define-module (texinfo reflection)$/;"	f
texinfo	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define-module (texinfo serialize)$/;"	f
texinfo	/usr/share/guile/2.0/texinfo/string-utils.scm	/^(define-module (texinfo string-utils)$/;"	f
text-content-type?	/usr/share/guile/2.0/web/response.scm	/^(define (text-content-type? type)$/;"	f
textual-port?	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (textual-port? port)$/;"	f
the-environment	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define-syntax the-environment$/;"	f
the-eof-object	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define the-eof-object (call-with-input-string "" (lambda (p) (read-char p))))$/;"	f
the-last-stack	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define-syntax the-last-stack$/;"	f
the-last-stack	/usr/share/guile/2.0/ice-9/save-stack.scm	/^(define the-last-stack (make-fluid))$/;"	f
the-readline-port	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-once the-readline-port #f)$/;"	f
the-root-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define the-root-module$/;"	f
the-scm-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define the-scm-module$/;"	f
the-timer	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define the-timer (make <timer-channel>))$/;"	f
the-trap-state	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (the-trap-state)$/;"	f
third	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define third caddr)$/;"	f
third-value	/usr/share/guile/2.0/srfi/srfi-41.scm	/^(define-syntax-rule (third-value expr)$/;"	f
thread->exception	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define thread->exception (make-object-property))$/;"	f
thread-exception-handlers	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define thread-exception-handlers (make-weak-key-hash-table))$/;"	f
thread-handler	/usr/share/guile/2.0/ice-9/threads.scm	/^(define (thread-handler tag . args)$/;"	f
thread-join!	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (thread-join! thread . args) $/;"	f
thread-name	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (thread-name thread)$/;"	f
thread-sleep!	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (thread-sleep! timeout)$/;"	f
thread-specific	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (thread-specific thread)$/;"	f
thread-specific-set!	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (thread-specific-set! thread obj)$/;"	f
thread-start!	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (thread-start! thread)$/;"	f
thread-start-conds	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define thread-start-conds (make-weak-key-hash-table))$/;"	f
thread-terminate!	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (thread-terminate! thread)$/;"	f
thread-yield!	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (thread-yield!) (yield) *unspecified*)$/;"	f
throw-bad-struct	/usr/share/guile/2.0/srfi/srfi-9.scm	/^(define (throw-bad-struct s who)$/;"	f
throw-key	/usr/share/guile/2.0/srfi/srfi-34.scm	/^(define throw-key 'srfi-34)$/;"	f
time	/usr/share/guile/2.0/ice-9/time.scm	/^(define-macro (time exp)$/;"	f
time	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define-record-type time$/;"	f
time	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (time repl (form))$/;"	f
time->julian-day-number	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time->julian-day-number seconds tz-offset)$/;"	f
time->seconds	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (time->seconds time) $/;"	f
time-difference	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-difference time1 time2)$/;"	f
time-difference!	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-difference! time1 time2)$/;"	f
time-duration	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define time-duration 'time-duration)$/;"	f
time-error	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-error caller type value)$/;"	f
time-monotonic	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define time-monotonic 'time-monotonic)$/;"	f
time-monotonic->date	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-monotonic->date time . tz-offset)$/;"	f
time-monotonic->julian-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-monotonic->julian-day time)$/;"	f
time-monotonic->modified-julian-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-monotonic->modified-julian-day time)$/;"	f
time-monotonic->time-tai	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-monotonic->time-tai time-in)$/;"	f
time-monotonic->time-tai!	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-monotonic->time-tai! time-in)$/;"	f
time-monotonic->time-utc	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-monotonic->time-utc time-in)$/;"	f
time-monotonic->time-utc!	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-monotonic->time-utc! time-in)$/;"	f
time-normalize!	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-normalize! t)$/;"	f
time-proc	/usr/share/guile/2.0/ice-9/time.scm	/^(define (time-proc proc)$/;"	f
time-process	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define time-process 'time-process)$/;"	f
time-resolution	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-resolution . clock-type)$/;"	f
time-tai	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define time-tai 'time-tai)$/;"	f
time-tai->date	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-tai->date time  . tz-offset)$/;"	f
time-tai->julian-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-tai->julian-day time)$/;"	f
time-tai->modified-julian-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-tai->modified-julian-day time)$/;"	f
time-tai->time-monotonic	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-tai->time-monotonic time-in)$/;"	f
time-tai->time-monotonic!	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-tai->time-monotonic! time-in)$/;"	f
time-tai->time-utc	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-tai->time-utc time-in)$/;"	f
time-tai->time-utc!	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-tai->time-utc! time-in)$/;"	f
time-thread	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define time-thread 'time-thread)$/;"	f
time-utc	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define time-utc 'time-utc)$/;"	f
time-utc->date	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-utc->date time . tz-offset)$/;"	f
time-utc->julian-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-utc->julian-day time)$/;"	f
time-utc->modified-julian-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-utc->modified-julian-day time)$/;"	f
time-utc->time-monotonic	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-utc->time-monotonic time-in)$/;"	f
time-utc->time-monotonic!	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-utc->time-monotonic! time-in)$/;"	f
time-utc->time-tai	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-utc->time-tai time-in)$/;"	f
time-utc->time-tai!	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time-utc->time-tai! time-in)$/;"	f
time<=?	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time<=? t1 t2)$/;"	f
time<?	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time<? t1 t2)$/;"	f
time=?	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time=? t1 t2)$/;"	f
time>=?	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time>=? t1 t2)$/;"	f
time>?	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (time>? t1 t2)$/;"	f
time?	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (time? obj)$/;"	f
timeofday->us	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define (timeofday->us t)$/;"	f
timer-cv	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define timer-cv (make-condition-variable))$/;"	f
timer-init	/usr/share/guile/2.0/oop/goops/dispatch.scm	/^(define timer-init 30)$/;"	f
timer-mutex	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define timer-mutex (make-mutex))$/;"	f
tm:gmtoff	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tm:gmtoff obj) (vector-ref obj 9))$/;"	f
tm:hour	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tm:hour obj) (vector-ref obj 2))$/;"	f
tm:isdst	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tm:isdst obj) (vector-ref obj 8))$/;"	f
tm:mday	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tm:mday obj) (vector-ref obj 3))$/;"	f
tm:min	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tm:min obj) (vector-ref obj 1))$/;"	f
tm:mon	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tm:mon obj) (vector-ref obj 4))$/;"	f
tm:sec	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tm:sec obj) (vector-ref obj 0))$/;"	f
tm:wday	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tm:wday obj) (vector-ref obj 6))$/;"	f
tm:yday	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tm:yday obj) (vector-ref obj 7))$/;"	f
tm:year	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tm:year obj) (vector-ref obj 5))$/;"	f
tm:zone	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tm:zone obj) (vector-ref obj 10))$/;"	f
tms:clock	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tms:clock obj) (vector-ref obj 0))$/;"	f
tms:cstime	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tms:cstime obj) (vector-ref obj 4))$/;"	f
tms:cutime	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tms:cutime obj) (vector-ref obj 3))$/;"	f
tms:stime	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tms:stime obj) (vector-ref obj 2))$/;"	f
tms:utime	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (tms:utime obj) (vector-ref obj 1))$/;"	f
token-head	/usr/share/guile/2.0/texinfo.scm	/^(define token-head cdr)$/;"	f
token-kind	/usr/share/guile/2.0/texinfo.scm	/^(define token-kind car)$/;"	f
token?	/usr/share/guile/2.0/texinfo.scm	/^(define token? pair?)$/;"	f
tokenize	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (tokenize port)$/;"	f
tokenize/1	/usr/share/guile/2.0/language/ecmascript/tokenize.scm	/^(define (tokenize\/1 port)$/;"	f
top-label-regexp	/usr/share/guile/2.0/web/uri.scm	/^(define top-label-regexp$/;"	f
top-repl	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (top-repl)$/;"	f
top-repl	/usr/share/guile/2.0/ice-9/top-repl.scm	/^(define (top-repl)$/;"	f
top-sort	/usr/share/guile/2.0/oop/goops.scm	/^(define (top-sort elements constraints tie-breaker)$/;"	f
toplevel-define!	/usr/share/guile/2.0/oop/goops.scm	/^(define (toplevel-define! name val)$/;"	f
toplevel-define!	/usr/share/guile/2.0/oop/goops/stklos.scm	/^(define (toplevel-define! name val)$/;"	f
touch	/usr/share/guile/2.0/ice-9/futures.scm	/^(define (touch future)$/;"	f
trace	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (trace repl (form) . opts)$/;"	f
trace-calls-in-procedure	/usr/share/guile/2.0/system/vm/trace.scm	/^(define* (trace-calls-in-procedure proc #:key (width 80) (vm (the-vm))$/;"	f
trace-calls-to-procedure	/usr/share/guile/2.0/system/vm/trace.scm	/^(define* (trace-calls-to-procedure proc #:key (width 80) (vm (the-vm))$/;"	f
trace-instructions-in-procedure	/usr/share/guile/2.0/system/vm/trace.scm	/^(define* (trace-instructions-in-procedure proc #:key (width 80) (vm (the-vm))$/;"	f
tracepoint	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (tracepoint repl (form))$/;"	f
trailer	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor trailer '())$/;"	f
trailer	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor trailer '())$/;"	f
transcoded-port	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (transcoded-port port transcoder)$/;"	f
transcoder	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define-record-type (transcoder %make-transcoder transcoder?)$/;"	f
transfer!	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define* (transfer! from to #:optional$/;"	f
transfer-encoding	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor transfer-encoding '())$/;"	f
transfer-encoding	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor transfer-encoding '())$/;"	f
transform-record	/usr/share/guile/2.0/system/base/syntax.scm	/^(define-macro (transform-record type-and-common record . clauses)$/;"	f
transform-string	/usr/share/guile/2.0/texinfo/string-utils.scm	/^(define* (transform-string str match? replace #:optional (start #f) (end #f))$/;"	f
transform-usage-lambda	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (transform-usage-lambda cases)$/;"	f
trap-at-procedure-call	/usr/share/guile/2.0/system/vm/traps.scm	/^(define* (trap-at-procedure-call proc handler #:key (vm (the-vm))$/;"	f
trap-at-procedure-ip-in-range	/usr/share/guile/2.0/system/vm/traps.scm	/^(define* (trap-at-procedure-ip-in-range proc range handler$/;"	f
trap-at-source-location	/usr/share/guile/2.0/system/vm/traps.scm	/^(define* (trap-at-source-location file user-line handler$/;"	f
trap-calls-in-dynamic-extent	/usr/share/guile/2.0/system/vm/traps.scm	/^(define* (trap-calls-in-dynamic-extent proc apply-handler return-handler$/;"	f
trap-calls-to-procedure	/usr/share/guile/2.0/system/vm/traps.scm	/^(define* (trap-calls-to-procedure proc apply-handler return-handler$/;"	f
trap-enabled?	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (trap-enabled? idx #:optional (trap-state (the-trap-state)))$/;"	f
trap-frame-finish	/usr/share/guile/2.0/system/vm/traps.scm	/^(define* (trap-frame-finish frame return-handler abort-handler$/;"	f
trap-in-dynamic-extent	/usr/share/guile/2.0/system/vm/traps.scm	/^(define* (trap-in-dynamic-extent proc enter-handler return-handler abort-handler$/;"	f
trap-in-procedure	/usr/share/guile/2.0/system/vm/traps.scm	/^(define* (trap-in-procedure proc enter-handler exit-handler$/;"	f
trap-instructions-in-dynamic-extent	/usr/share/guile/2.0/system/vm/traps.scm	/^(define* (trap-instructions-in-dynamic-extent proc next-handler$/;"	f
trap-instructions-in-procedure	/usr/share/guile/2.0/system/vm/traps.scm	/^(define* (trap-instructions-in-procedure proc next-handler exit-handler$/;"	f
trap-matching-instructions	/usr/share/guile/2.0/system/vm/traps.scm	/^(define* (trap-matching-instructions frame-pred handler$/;"	f
trap-name	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (trap-name idx #:optional (trap-state (the-trap-state)))$/;"	f
trap-state->trace-level	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (trap-state->trace-level trap-state)$/;"	f
trap-state-for-vm	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (trap-state-for-vm vm)$/;"	f
trap-wrapper<?	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (trap-wrapper<? t1 t2)$/;"	f
traps	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (traps repl)$/;"	f
tree-il	/usr/share/guile/2.0/language/tree-il/spec.scm	/^(define-language tree-il$/;"	f
tree-il->scheme	/usr/share/guile/2.0/language/tree-il.scm	/^(define* (tree-il->scheme e #:optional (env #f) (opts '()))$/;"	f
tree-il-any	/usr/share/guile/2.0/language/tree-il/canonicalize.scm	/^(define (tree-il-any proc exp)$/;"	f
tree-il-any	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (tree-il-any proc exp)$/;"	f
tree-il-fold	/usr/share/guile/2.0/language/tree-il.scm	/^(define (tree-il-fold leaf down up seed tree)$/;"	f
tree-il-hash	/usr/share/guile/2.0/language/tree-il.scm	/^(define (tree-il-hash exp)$/;"	f
tree-il=?	/usr/share/guile/2.0/language/tree-il.scm	/^(define (tree-il=? a b)$/;"	f
tree1	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define tree1 $/;"	f
tree3	/usr/share/guile/2.0/sxml/upstream/SXPath-old.scm	/^(define tree3$/;"	f
trim-brackets	/usr/share/guile/2.0/system/base/syntax.scm	/^(define (trim-brackets sym)$/;"	f
trim-whitespace	/usr/share/guile/2.0/texinfo.scm	/^(define (trim-whitespace str trim-left? trim-right?)$/;"	f
trim-whitespace	/usr/share/guile/2.0/web/http.scm	/^(define* (trim-whitespace str #:optional (start 0) (end (string-length str)))$/;"	f
triplet-cpu	/usr/share/guile/2.0/system/base/target.scm	/^(define (triplet-cpu t)$/;"	f
triplet-os	/usr/share/guile/2.0/system/base/target.scm	/^(define (triplet-os t)$/;"	f
triplet-pointer-size	/usr/share/guile/2.0/system/base/target.scm	/^(define (triplet-pointer-size triplet)$/;"	f
triplet-vendor	/usr/share/guile/2.0/system/base/target.scm	/^(define (triplet-vendor t)$/;"	f
truncate-values	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (truncate-values x)$/;"	f
truncated-print	/usr/share/guile/2.0/ice-9/pretty-print.scm	/^(define* (truncated-print x #:optional port*$/;"	f
try-load-module	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (try-load-module name version)$/;"	f
try-module-autoload	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (try-module-autoload module-name #:optional version)$/;"	f
try-module-dynamic-link	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (try-module-dynamic-link module-name)$/;"	f
try-module-linked	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (try-module-linked module-name)$/;"	f
try-name-help	/usr/share/guile/2.0/ice-9/session.scm	/^(define (try-name-help name)$/;"	f
try-using-libtool-name	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (try-using-libtool-name libdir libname)$/;"	f
try-using-sharlib-name	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (try-using-sharlib-name libdir libname)$/;"	f
try-value-help	/usr/share/guile/2.0/ice-9/session.scm	/^(define (try-value-help name value)$/;"	f
turn-on-debugging	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (turn-on-debugging)$/;"	f
type-name-from-descriptor	/usr/share/gdb/auto-load/libguile-2.0.so.22.7.2-gdb.scm	/^(define (type-name-from-descriptor descriptor-array type-number)$/;"	f
type-number->name	/usr/share/guile/2.0/system/base/types.scm	/^(define-inlinable (type-number->name backend kind number)$/;"	f
typeof	/usr/share/guile/2.0/language/ecmascript/impl.scm	/^(define (typeof x)$/;"	f
types-check?	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (types-check? primitive-name args)$/;"	f
tz-printer	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (tz-printer offset port)$/;"	f
u16	/usr/share/guile/2.0/srfi/srfi-4.scm	/^(define-bytevector-type u16 u16-native 2)$/;"	f
u16vector-ref	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander u16vector-ref (vec i)$/;"	f
u16vector-set!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander u16vector-set! (vec i x)$/;"	f
u32	/usr/share/guile/2.0/srfi/srfi-4.scm	/^(define-bytevector-type u32 u32-native 4)$/;"	f
u32vector-ref	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander u32vector-ref (vec i)$/;"	f
u32vector-set!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander u32vector-set! (vec i x)$/;"	f
u64	/usr/share/guile/2.0/srfi/srfi-4.scm	/^(define-bytevector-type u64 u64-native 8)$/;"	f
u64vector-ref	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander u64vector-ref (vec i)$/;"	f
u64vector-set!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander u64vector-set! (vec i x)$/;"	f
u8	/usr/share/guile/2.0/srfi/srfi-4.scm	/^(define-bytevector-type u8 u8 1)$/;"	f
u8	/usr/share/guile/2.0/srfi/srfi-4/gnu.scm	/^(define-any->vector u8 s8 u16 s16 u32 s32 u64 s64 f32 f64 c32 c64)$/;"	f
u8vector-ref	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander u8vector-ref (vec i)$/;"	f
u8vector-set!	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander u8vector-set! (vec i x)$/;"	f
ucscode->string	/usr/share/guile/2.0/sxml/ssax.scm	/^(define (ucscode->string codepoint)$/;"	f
unbound-variable-analysis	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define unbound-variable-analysis$/;"	f
uncaught-exception	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define uncaught-exception (list 'uncaught-exception))$/;"	f
uncaught-exception-reason	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (uncaught-exception-reason exc)$/;"	f
uncaught-exception?	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (uncaught-exception? obj) $/;"	f
unfold	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define* (unfold p f g seed #:optional (tail-gen (lambda (x) '())))$/;"	f
unfold-right	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define* (unfold-right p f g seed #:optional (tail '()))$/;"	f
unglob	/usr/share/guile/2.0/scripts/autofrisk.scm	/^(define (unglob pattern)$/;"	f
union	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (union l1 l2)$/;"	f
uniq	/usr/share/guile/2.0/ice-9/common-list.scm	/^(define (uniq l)$/;"	f
unique	/usr/share/guile/2.0/scripts/help.scm	/^(define (unique l)$/;"	f
unique	/usr/share/guile/2.0/scripts/list.scm	/^(define (unique l)$/;"	f
unknown-getter	/usr/share/guile/2.0/srfi/srfi-9/gnu.scm	/^(define-syntax unknown-getter$/;"	f
unless	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (unless test stmt stmt* ...)$/;"	f
unless	/usr/share/guile/2.0/language/assembly/disassemble.scm	/^(define-macro (unless test . body)$/;"	f
unless	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define-macro (unless cond . body)$/;"	f
unmemoize-expr	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (unmemoize-expr . args)$/;"	f
unparse-glil	/usr/share/guile/2.0/language/glil.scm	/^(define (unparse-glil glil)$/;"	f
unparse-tree-il	/usr/share/guile/2.0/language/tree-il.scm	/^(define (unparse-tree-il tree-il)$/;"	f
unquote	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define unquote$/;"	f
unquote	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define-syntax unquote$/;"	f
unquote-cell?	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (unquote-cell? expr)$/;"	f
unquote-splicing	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define unquote-splicing$/;"	f
unquote-splicing	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define-syntax unquote-splicing$/;"	f
unquote-splicing-cell?	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (unquote-splicing-cell? expr)$/;"	f
unquote-splicing?	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (unquote-splicing? sym)$/;"	f
unquote?	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (unquote? sym)$/;"	f
unread-string	/usr/share/guile/2.0/ice-9/lineio.scm	/^(define (unread-string str line-buffering-input-port)$/;"	f
unreserved-chars	/usr/share/guile/2.0/web/uri.scm	/^(define unreserved-chars$/;"	f
unsetenv	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (unsetenv name)$/;"	f
unspecified?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (unspecified? v) (eq? v *unspecified*))$/;"	f
unsupported-binding	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define (unsupported-binding name)$/;"	f
unsyntax	/usr/share/guile/2.0/ice-9/quasisyntax.scm	/^(define-syntax unsyntax$/;"	f
unsyntax-splicing	/usr/share/guile/2.0/ice-9/quasisyntax.scm	/^(define-syntax unsyntax-splicing$/;"	f
untaint-modules	/usr/share/guile/2.0/system/xref.scm	/^(define (untaint-modules)$/;"	f
untaint-sources	/usr/share/guile/2.0/system/xref.scm	/^(define (untaint-sources)$/;"	f
unused-toplevel-analysis	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define unused-toplevel-analysis$/;"	f
unused-variable-analysis	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define unused-variable-analysis$/;"	f
unzip1	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (unzip1 l)$/;"	f
unzip2	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (unzip2 l)$/;"	f
unzip3	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (unzip3 l)$/;"	f
unzip4	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (unzip4 l)$/;"	f
unzip5	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (unzip5 l)$/;"	f
up	/usr/share/guile/2.0/system/repl/command.scm	/^(define-stack-command (up repl #:optional (count 1))$/;"	f
up-ls	/usr/share/guile/2.0/scripts/frisk.scm	/^(define up-ls (make-object-property))   ; list$/;"	f
up-ls+!	/usr/share/guile/2.0/scripts/frisk.scm	/^(define (up-ls+! m new) (set! (up-ls m) (cons new (up-ls m))))$/;"	f
update-direct-method!	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (update-direct-method! (m  <method>)$/;"	f
update-direct-subclass!	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (update-direct-subclass! (c <class>)$/;"	f
update-instance-for-different-class	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (update-instance-for-different-class (old-instance <object>)$/;"	f
upgrade	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor upgrade '())$/;"	f
upgrade	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor upgrade '())$/;"	f
upgrade-accessor	/usr/share/guile/2.0/oop/goops.scm	/^(define (upgrade-accessor generic setter)$/;"	f
uref	/usr/share/guile/2.0/texinfo/html.scm	/^(define (uref tag args)$/;"	f
uref	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (uref tag args)$/;"	f
uri->string	/usr/share/guile/2.0/web/uri.scm	/^(define (uri->string uri)$/;"	f
uri-decode	/usr/share/guile/2.0/web/uri.scm	/^(define* (uri-decode str #:key (encoding "utf-8"))$/;"	f
uri-encode	/usr/share/guile/2.0/web/uri.scm	/^(define* (uri-encode str #:key (encoding "utf-8")$/;"	f
uri-error	/usr/share/guile/2.0/web/uri.scm	/^(define (uri-error message . args)$/;"	f
uri-pat	/usr/share/guile/2.0/web/uri.scm	/^(define uri-pat$/;"	f
uri-regexp	/usr/share/guile/2.0/web/uri.scm	/^(define uri-regexp$/;"	f
urlify	/usr/share/guile/2.0/texinfo/html.scm	/^(define (urlify str)$/;"	f
us->timeofday	/usr/share/guile/2.0/ice-9/occam-channel.scm	/^(define (us->timeofday n)$/;"	f
use-modules	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax use-modules$/;"	f
use-srfis	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (use-srfis srfis)$/;"	f
use-syntax	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (use-syntax spec ...)$/;"	f
use-value-history	/usr/share/guile/2.0/ice-9/history.scm	/^(define (use-value-history x)$/;"	f
use2dot	/usr/share/guile/2.0/scripts/use2dot.scm	/^(define (use2dot . args)$/;"	f
user-agent	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor user-agent #f)$/;"	f
user-error	/usr/share/guile/2.0/system/repl/common.scm	/^(define (user-error msg . args)$/;"	f
userinfo-pat	/usr/share/guile/2.0/web/uri.scm	/^(define userinfo-pat$/;"	f
using-readline?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define using-readline?$/;"	f
utf-16-codec	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (utf-16-codec)$/;"	f
utf-8-codec	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (utf-8-codec)$/;"	f
utsname:machine	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (utsname:machine obj) (vector-ref obj 4))$/;"	f
utsname:nodename	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (utsname:nodename obj) (vector-ref obj 1))$/;"	f
utsname:release	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (utsname:release obj) (vector-ref obj 2))$/;"	f
utsname:sysname	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (utsname:sysname obj) (vector-ref obj 0))$/;"	f
utsname:version	/usr/share/guile/2.0/ice-9/posix.scm	/^(define (utsname:version obj) (vector-ref obj 3))$/;"	f
valid-header?	/usr/share/guile/2.0/web/http.scm	/^(define (valid-header? sym val)$/;"	f
valid-host?	/usr/share/guile/2.0/web/uri.scm	/^(define (valid-host? host)$/;"	f
valid-quality?	/usr/share/guile/2.0/web/http.scm	/^(define (valid-quality? q)$/;"	f
valid-symbol-list-arg?	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (valid-symbol-list-arg? value)$/;"	f
validate-arity	/usr/share/guile/2.0/language/tree-il/analyze.scm	/^(define (validate-arity proc application lexical?)$/;"	f
validate-challenges	/usr/share/guile/2.0/web/http.scm	/^(define (validate-challenges val)$/;"	f
validate-credentials	/usr/share/guile/2.0/web/http.scm	/^(define (validate-credentials val)$/;"	f
validate-headers	/usr/share/guile/2.0/web/request.scm	/^(define (validate-headers headers)$/;"	f
validate-headers	/usr/share/guile/2.0/web/response.scm	/^(define (validate-headers headers)$/;"	f
validate-media-type	/usr/share/guile/2.0/web/http.scm	/^(define (validate-media-type str)$/;"	f
validate-opaque-string	/usr/share/guile/2.0/web/http.scm	/^(define (validate-opaque-string val)$/;"	f
validate-param-list	/usr/share/guile/2.0/web/http.scm	/^(define* (validate-param-list list #:optional$/;"	f
validate-quality-list	/usr/share/guile/2.0/web/http.scm	/^(define (validate-quality-list l)$/;"	f
validate-target	/usr/share/guile/2.0/system/base/target.scm	/^(define (validate-target target)$/;"	f
validate-uri	/usr/share/guile/2.0/web/uri.scm	/^(define (validate-uri scheme userinfo host port path query fragment)$/;"	f
value	/usr/share/guile/2.0/language/value/spec.scm	/^(define-language value$/;"	f
value	/usr/share/guile/2.0/srfi/srfi-45.scm	/^(define-record-type value (make-value tag proc) value?$/;"	f
value-history-enabled?	/usr/share/guile/2.0/ice-9/history.scm	/^(define (value-history-enabled?)$/;"	f
value-slot	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define value-slot (@ (language elisp runtime) value-slot-module))$/;"	f
value-slot-module	/usr/share/guile/2.0/language/elisp/runtime.scm	/^(define value-slot-module '(language elisp runtime value-slot))$/;"	f
var	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (var tag . body)$/;"	f
vars&inits	/usr/share/guile/2.0/ice-9/optargs.scm	/^(define (vars&inits bindings)$/;"	f
vars->bind-list	/usr/share/guile/2.0/language/tree-il/compile-glil.scm	/^(define (vars->bind-list ids vars allocation proc)$/;"	f
vary	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor vary '())$/;"	f
vector->list	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector->list$/;"	f
vector->stream	/usr/share/guile/2.0/ice-9/streams.scm	/^(define (vector->stream v)$/;"	f
vector-any	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-any$/;"	f
vector-append	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-append$/;"	f
vector-binary-search	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-binary-search$/;"	f
vector-compare	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define vector-compare$/;"	f
vector-compare-as-list	/usr/share/guile/2.0/srfi/srfi-67/compare.scm	/^(define vector-compare-as-list$/;"	f
vector-concatenate	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define (vector-concatenate vs)$/;"	f
vector-copy	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-copy$/;"	f
vector-copy!	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define-vector-copier! vector-copy!$/;"	f
vector-count	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-count$/;"	f
vector-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax vector-ec$/;"	f
vector-empty?	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define (vector-empty? vec)$/;"	f
vector-every	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-every$/;"	f
vector-fill!	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-fill!$/;"	f
vector-fold	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-fold$/;"	f
vector-fold-right	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-fold-right$/;"	f
vector-fold2	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (vector-fold2 proc vect s0 s1)$/;"	f
vector-for-each	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-for-each$/;"	f
vector-index	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-index$/;"	f
vector-index-right	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-index-right$/;"	f
vector-map	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-map$/;"	f
vector-map!	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-map!$/;"	f
vector-of-length-ec	/usr/share/guile/2.0/srfi/srfi-42/ec.scm	/^(define-syntax vector-of-length-ec$/;"	f
vector-ref	/usr/share/guile/2.0/srfi/srfi-17.scm	/^(define vector-ref$/;"	f
vector-reverse!	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-reverse!$/;"	f
vector-reverse-copy	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-reverse-copy$/;"	f
vector-reverse-copy!	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define-vector-copier! vector-reverse-copy!$/;"	f
vector-skip	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-skip$/;"	f
vector-skip-right	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-skip-right$/;"	f
vector-swap!	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define (vector-swap! vec i j)$/;"	f
vector-unfold	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-unfold$/;"	f
vector-unfold-right	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector-unfold-right$/;"	f
vector=	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define vector=$/;"	f
vectors-ref	/usr/share/guile/2.0/srfi/srfi-43.scm	/^(define (vectors-ref vs i)$/;"	f
verbatim	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (verbatim tag . body)$/;"	f
verify-tree-il	/usr/share/guile/2.0/language/tree-il/debug.scm	/^(define (verify-tree-il exp)$/;"	f
version	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (version repl)$/;"	f
version-etc	/usr/share/guile/2.0/ice-9/command-line.scm	/^(define* (version-etc package version #:key$/;"	f
version-matches?	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (version-matches? version-ref target)$/;"	f
vhash-assoc	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define* (vhash-assoc key vhash #:optional (equal? equal?) (hash hash))$/;"	f
vhash-assq	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vhash-assq key vhash)$/;"	f
vhash-assv	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vhash-assv key vhash)$/;"	f
vhash-cons	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define* (vhash-cons key value vhash #:optional (hash hash))$/;"	f
vhash-consq	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define vhash-consq (cut vhash-cons <> <> <> hashq))$/;"	f
vhash-consv	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define vhash-consv (cut vhash-cons <> <> <> hashv))$/;"	f
vhash-delete	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define* (vhash-delete key vhash #:optional (equal? equal?) (hash hash))$/;"	f
vhash-delq	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define vhash-delq (cut vhash-delete <> <> eq? hashq))$/;"	f
vhash-delv	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define vhash-delv (cut vhash-delete <> <> eqv? hashv))$/;"	f
vhash-fold	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vhash-fold proc init vhash)$/;"	f
vhash-fold*	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define* (vhash-fold* proc init key vhash$/;"	f
vhash-fold-right	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vhash-fold-right proc init vhash)$/;"	f
vhash-fold-right2	/usr/share/guile/2.0/language/glil/compile-assembly.scm	/^(define (vhash-fold-right2 proc vhash s0 s1)$/;"	f
vhash-foldq*	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vhash-foldq* proc init key vhash)$/;"	f
vhash-foldv*	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vhash-foldv* proc init key vhash)$/;"	f
vhash?	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vhash? obj)$/;"	f
via	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor via '())$/;"	f
via	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor via '())$/;"	f
visit-operand	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define* (visit-operand op counter ctx #:optional effort-limit size-limit)$/;"	f
visited	/usr/share/guile/2.0/system/base/types.scm	/^(define-syntax visited$/;"	f
visited?-proc	/usr/share/guile/2.0/ice-9/ftw.scm	/^(define (visited?-proc size)$/;"	f
visiting?	/usr/share/guile/2.0/oop/goops/save.scm	/^(define visiting? visiting)$/;"	f
vlist->list	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist->list vlist)$/;"	f
vlist-any	/usr/share/guile/2.0/language/tree-il/peval.scm	/^(define (vlist-any proc vlist)$/;"	f
vlist-append	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-append . vlists)$/;"	f
vlist-cons	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-cons item vlist)$/;"	f
vlist-delete	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define* (vlist-delete x vlist #:optional (equal? equal?))$/;"	f
vlist-drop	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-drop vlist count)$/;"	f
vlist-filter	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-filter pred vlist)$/;"	f
vlist-fold	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-fold proc init vlist)$/;"	f
vlist-fold-right	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-fold-right proc init vlist)$/;"	f
vlist-for-each	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-for-each proc vlist)$/;"	f
vlist-head	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-head vlist)$/;"	f
vlist-length	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-length vlist)$/;"	f
vlist-map	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-map proc vlist)$/;"	f
vlist-null	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define vlist-null$/;"	f
vlist-null?	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-null? vlist)$/;"	f
vlist-ref	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-ref vlist index)$/;"	f
vlist-reverse	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-reverse vlist)$/;"	f
vlist-tail	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-tail vlist)$/;"	f
vlist-take	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define (vlist-take vlist count)$/;"	f
vlist-unfold	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define* (vlist-unfold p f g seed$/;"	f
vlist-unfold-right	/usr/share/guile/2.0/ice-9/vlist.scm	/^(define* (vlist-unfold-right p f g seed #:optional (tail vlist-null))$/;"	f
vm-frame	/usr/share/gdb/auto-load/libguile-2.0.so.22.7.2-gdb.scm	/^(define* (vm-frame fp #:optional (backend %gdb-memory-backend))$/;"	f
vm-frame-pointer	/usr/share/gdb/auto-load/libguile-2.0.so.22.7.2-gdb.scm	/^(define (vm-frame-pointer)$/;"	f
vm-stack-pointer	/usr/share/gdb/auto-load/libguile-2.0.so.22.7.2-gdb.scm	/^(define (vm-stack-pointer)$/;"	f
void	/usr/share/guile/2.0/sxml/match.scm	/^(define-syntax-rule (void)$/;"	f
vv	/usr/share/guile/2.0/scripts/use2dot.scm	/^(define (vv pairs)                      ; => ("var=val" ...)$/;"	f
warn	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define (warn . stuff)$/;"	f
warn-autoload-deprecation	/usr/share/guile/2.0/ice-9/deprecated.scm	/^(define (warn-autoload-deprecation modname)$/;"	f
warning	/usr/share/guile/2.0/system/base/message.scm	/^(define (warning type location . args)$/;"	f
warning	/usr/share/guile/2.0/web/request.scm	/^(define-request-accessor warning '())$/;"	f
warning	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor warning '())$/;"	f
warranty	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (warranty repl)$/;"	f
web	/usr/share/guile/2.0/web/client.scm	/^(define-module (web client)$/;"	f
web	/usr/share/guile/2.0/web/http.scm	/^(define-module (web http)$/;"	f
web	/usr/share/guile/2.0/web/request.scm	/^(define-module (web request)$/;"	f
web	/usr/share/guile/2.0/web/response.scm	/^(define-module (web response)$/;"	f
web	/usr/share/guile/2.0/web/server.scm	/^(define-module (web server)$/;"	f
web	/usr/share/guile/2.0/web/server/http.scm	/^(define-module (web server http)$/;"	f
web	/usr/share/guile/2.0/web/uri.scm	/^(define-module (web uri)$/;"	f
week-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (week-day day month year)$/;"	f
when	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (when test stmt stmt* ...)$/;"	f
when	/usr/share/guile/2.0/scripts/snarf-check-and-output-texi.scm	/^(define-macro (when cond . body)$/;"	f
while	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax while$/;"	f
while	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial while (loc args)$/;"	f
width	/usr/share/guile/2.0/system/repl/command.scm	/^(define-meta-command (width repl #:optional x)$/;"	f
with-added-symbols	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(define (with-added-symbols loc fluid syms body)$/;"	f
with-always-lexical	/usr/share/guile/2.0/language/elisp/compile-tree-il.scm	/^(defspecial with-always-lexical (loc args)$/;"	f
with-code-coverage	/usr/share/guile/2.0/system/vm/coverage.scm	/^(define (with-code-coverage vm thunk)$/;"	f
with-configuration-getter-and-setter	/usr/share/guile/2.0/ice-9/calling.scm	/^(defmacro with-configuration-getter-and-setter (vars-etc proc)$/;"	f
with-default-trap-handler	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define* (with-default-trap-handler handler thunk$/;"	f
with-delegating-configuration-getter-and-setter	/usr/share/guile/2.0/ice-9/calling.scm	/^(defmacro with-delegating-configuration-getter-and-setter (vars-etc delegate-get delegate-set proc)$/;"	f
with-delegating-getter-and-setter	/usr/share/guile/2.0/ice-9/calling.scm	/^(defmacro with-delegating-getter-and-setter (vars get-delegate set-delegate proc)$/;"	f
with-dynamic-bindings	/usr/share/guile/2.0/language/elisp/bindings.scm	/^(define (with-dynamic-bindings bindings syms proc)$/;"	f
with-error-handling	/usr/share/guile/2.0/system/repl/error-handling.scm	/^(define-syntax-rule (with-error-handling form)$/;"	f
with-error-to-file	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (with-error-to-file file thunk #:key (binary #f) (encoding #f))$/;"	f
with-error-to-file	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (with-error-to-file file thunk)$/;"	f
with-error-to-port	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (with-error-to-port port thunk)$/;"	f
with-error-to-string	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (with-error-to-string thunk)$/;"	f
with-exception-handler	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (with-exception-handler handler thunk)$/;"	f
with-exception-handler	/usr/share/guile/2.0/srfi/srfi-34.scm	/^(define (with-exception-handler handler thunk)$/;"	f
with-excursion-function	/usr/share/guile/2.0/ice-9/calling.scm	/^(defmacro with-excursion-function (vars proc)$/;"	f
with-excursion-getter-and-setter	/usr/share/guile/2.0/ice-9/calling.scm	/^(defmacro with-excursion-getter-and-setter (vars proc)$/;"	f
with-getter	/usr/share/guile/2.0/ice-9/calling.scm	/^(defmacro with-getter (vars proc)$/;"	f
with-getter-and-setter	/usr/share/guile/2.0/ice-9/calling.scm	/^(defmacro with-getter-and-setter (vars proc)$/;"	f
with-hashx-values	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define-macro (with-hashx-values bindings ht-var . body-forms)$/;"	f
with-i/o-decoding-error	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define-syntax with-i\/o-decoding-error$/;"	f
with-i/o-encoding-error	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define-syntax with-i\/o-encoding-error$/;"	f
with-i/o-filename-conditions	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (with-i\/o-filename-conditions filename thunk)$/;"	f
with-i/o-port-error	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define (with-i\/o-port-error port make-primary-condition thunk)$/;"	f
with-indent	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define-macro (with-indent n . body)$/;"	f
with-input-from-file	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (with-input-from-file$/;"	f
with-input-from-file	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (with-input-from-file file thunk)$/;"	f
with-input-from-port	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (with-input-from-port port thunk)$/;"	f
with-input-from-string	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (with-input-from-string string thunk)$/;"	f
with-itemizer	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define-macro (with-itemizer itemizer . body)$/;"	f
with-lexical-bindings	/usr/share/guile/2.0/language/elisp/bindings.scm	/^(define (with-lexical-bindings bindings syms targets proc)$/;"	f
with-mutex	/usr/share/guile/2.0/ice-9/futures.scm	/^(define-syntax-rule (with-mutex m e0 e1 ...)$/;"	f
with-mutex	/usr/share/guile/2.0/ice-9/threads.scm	/^(define-syntax-rule (with-mutex m e0 e1 ...)$/;"	f
with-output-to-code	/usr/share/guile/2.0/language/tree-il/compile-glil.scm	/^(define (with-output-to-code proc)$/;"	f
with-output-to-file	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define* (with-output-to-file file thunk #:key (binary #f) (encoding #f))$/;"	f
with-output-to-file	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (with-output-to-file file thunk)$/;"	f
with-output-to-port	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (with-output-to-port port thunk)$/;"	f
with-output-to-string	/usr/share/guile/2.0/ice-9/r4rs.scm	/^(define (with-output-to-string thunk)$/;"	f
with-parameters*	/usr/share/guile/2.0/srfi/srfi-39.scm	/^(define (with-parameters* params values thunk)$/;"	f
with-readline-completion-function	/usr/share/guile/2.0/ice-9/readline.scm	/^(define-public (with-readline-completion-function completer thunk)$/;"	f
with-return-prompt	/usr/share/guile/2.0/language/ecmascript/compile-tree-il.scm	/^(define (with-return-prompt body-thunk)$/;"	f
with-ssax-error-to-port	/usr/share/guile/2.0/sxml/ssax.scm	/^(define (with-ssax-error-to-port port thunk)$/;"	f
with-stack-and-prompt	/usr/share/guile/2.0/web/server.scm	/^(define (with-stack-and-prompt thunk)$/;"	f
with-statprof	/usr/share/guile/2.0/statprof.scm	/^(define-macro (with-statprof . args)$/;"	f
with-symbol-bindings	/usr/share/guile/2.0/language/elisp/bindings.scm	/^(define (with-symbol-bindings bindings syms targets proc)$/;"	f
with-syntax	/usr/share/guile/2.0/ice-9/psyntax-pp.scm	/^(define with-syntax$/;"	f
with-syntax	/usr/share/guile/2.0/ice-9/psyntax.scm	/^(define-syntax with-syntax$/;"	f
with-target	/usr/share/guile/2.0/system/base/target.scm	/^(define (with-target target thunk)$/;"	f
with-textual-input-conditions	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define-syntax with-textual-input-conditions$/;"	f
with-textual-output-conditions	/usr/share/guile/2.0/rnrs/io/ports.scm	/^(define-syntax with-textual-output-conditions$/;"	f
with-throw-handler	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define with-throw-handler #f)$/;"	f
within-nested-ellipses	/usr/share/guile/2.0/ice-9/local-eval.scm	/^(define (within-nested-ellipses id lvl)$/;"	f
without-keyword-args	/usr/share/guile/2.0/srfi/srfi-69.scm	/^(define (without-keyword-args rest-list)$/;"	f
wrap	/usr/share/guile/2.0/srfi/srfi-18.scm	/^(define (wrap thunk)$/;"	f
wrap	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (wrap . strings)$/;"	f
wrap	/usr/share/guile/2.0/texinfo/serialize.scm	/^(define (wrap strings)$/;"	f
wrap*	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (wrap* . strings)$/;"	f
wrap-heading	/usr/share/guile/2.0/texinfo/plain-text.scm	/^(define (wrap-heading . strings)$/;"	f
wrapper-at-index	/usr/share/guile/2.0/system/vm/trap-state.scm	/^(define (wrapper-at-index trap-state idx)$/;"	f
write	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (write (class <class>) file)$/;"	f
write	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (write (gf <generic>) file)$/;"	f
write	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (write (o <method>) file)$/;"	f
write	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (write (o <object>) file)$/;"	f
write	/usr/share/guile/2.0/oop/goops.scm	/^(define-method (write o file)$/;"	f
write-array	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (write-array prefix o not-literal? file env)$/;"	f
write-c-struct	/usr/share/guile/2.0/system/foreign.scm	/^(define (write-c-struct bv offset types vals)$/;"	f
write-challenge	/usr/share/guile/2.0/web/http.scm	/^(define (write-challenge val port)$/;"	f
write-challenges	/usr/share/guile/2.0/web/http.scm	/^(define (write-challenges val port)$/;"	f
write-client	/usr/share/guile/2.0/web/server.scm	/^(define (write-client impl server client response body)$/;"	f
write-component	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-macro (write-component object patcher file env)$/;"	f
write-component-procedure	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (write-component-procedure o file env)$/;"	f
write-credentials	/usr/share/guile/2.0/web/http.scm	/^(define (write-credentials val port)$/;"	f
write-date	/usr/share/guile/2.0/web/http.scm	/^(define (write-date date port)$/;"	f
write-define!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (write-define! name val literal? file)$/;"	f
write-definition!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (write-definition! prefix o file env)$/;"	f
write-definitions!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (write-definitions! selector prefix file env)$/;"	f
write-empty-defines!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (write-empty-defines! file env)$/;"	f
write-entity-tag	/usr/share/guile/2.0/web/http.scm	/^(define (write-entity-tag val port)$/;"	f
write-entity-tag-list	/usr/share/guile/2.0/web/http.scm	/^(define (write-entity-tag-list val port)$/;"	f
write-glil	/usr/share/guile/2.0/language/glil/spec.scm	/^(define (write-glil exp . port)$/;"	f
write-header	/usr/share/guile/2.0/web/http.scm	/^(define (write-header sym val port)$/;"	f
write-header-list	/usr/share/guile/2.0/web/http.scm	/^(define (write-header-list val port)$/;"	f
write-headers	/usr/share/guile/2.0/web/http.scm	/^(define (write-headers headers port)$/;"	f
write-http-version	/usr/share/guile/2.0/web/http.scm	/^(define (write-http-version val port)$/;"	f
write-immediates!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (write-immediates! alist file)$/;"	f
write-key-value-list	/usr/share/guile/2.0/web/http.scm	/^(define* (write-key-value-list list port #:optional$/;"	f
write-let*-head!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (write-let*-head! file env)$/;"	f
write-list	/usr/share/guile/2.0/web/http.scm	/^(define (write-list l port write-item delim)$/;"	f
write-list-of-strings	/usr/share/guile/2.0/web/http.scm	/^(define (write-list-of-strings val port)$/;"	f
write-object	/usr/share/guile/2.0/oop/goops.scm	/^(define write-object (primitive-generic-generic write))$/;"	f
write-opaque-string	/usr/share/guile/2.0/web/http.scm	/^(define (write-opaque-string val port)$/;"	f
write-output	/usr/share/guile/2.0/scripts/doc-snarf.scm	/^(define (write-output entries output-file writer)$/;"	f
write-param-list	/usr/share/guile/2.0/web/http.scm	/^(define* (write-param-list list port #:optional$/;"	f
write-patches!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (write-patches! prefix file env)$/;"	f
write-program	/usr/share/guile/2.0/system/vm/program.scm	/^(define (write-program prog port)$/;"	f
write-punily	/usr/share/guile/2.0/scripts/punify.scm	/^(define (write-punily form)$/;"	f
write-qstring	/usr/share/guile/2.0/web/http.scm	/^(define (write-qstring str port)$/;"	f
write-quality	/usr/share/guile/2.0/web/http.scm	/^(define (write-quality q port)$/;"	f
write-quality-list	/usr/share/guile/2.0/web/http.scm	/^(define (write-quality-list l port)$/;"	f
write-readables!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (write-readables! alist file env)$/;"	f
write-readably	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (write-readably (o <array>) file env)$/;"	f
write-readably	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (write-readably (o <class>) file env)$/;"	f
write-readably	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (write-readably (o <generic>) file env)$/;"	f
write-readably	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (write-readably (o <method>) file env)$/;"	f
write-readably	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (write-readably (o <object>) file env)$/;"	f
write-readably	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (write-readably (o <pair>) file env)$/;"	f
write-readably	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (write-readably (o <top>) file env)$/;"	f
write-readably	/usr/share/guile/2.0/oop/goops/save.scm	/^(define-method (write-readably (o <vector>) file env)$/;"	f
write-rebindings!	/usr/share/guile/2.0/oop/goops/save.scm	/^(define (write-rebindings! prefix bindings file env)$/;"	f
write-request	/usr/share/guile/2.0/web/request.scm	/^(define (write-request r port)$/;"	f
write-request-body	/usr/share/guile/2.0/web/request.scm	/^(define (write-request-body r bv)$/;"	f
write-request-line	/usr/share/guile/2.0/web/http.scm	/^(define (write-request-line method uri version port)$/;"	f
write-response	/usr/share/guile/2.0/web/response.scm	/^(define (write-response r port)$/;"	f
write-response-body	/usr/share/guile/2.0/web/response.scm	/^(define (write-response-body r bv)$/;"	f
write-response-line	/usr/share/guile/2.0/web/http.scm	/^(define (write-response-line version code reason-phrase port)$/;"	f
write-tree-il	/usr/share/guile/2.0/language/tree-il/spec.scm	/^(define (write-tree-il exp . port)$/;"	f
write-uri	/usr/share/guile/2.0/web/http.scm	/^(define (write-uri uri port)$/;"	f
write-with-shared-structure	/usr/share/guile/2.0/srfi/srfi-38.scm	/^(define* (write-with-shared-structure obj$/;"	f
wrong-type-arg	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (wrong-type-arg caller arg)$/;"	f
www-authenticate	/usr/share/guile/2.0/web/response.scm	/^(define-response-accessor www-authenticate #f)$/;"	f
xcons	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (xcons d a)$/;"	f
xml->sxml	/usr/share/guile/2.0/sxml/simple.scm	/^(define* (xml->sxml #:optional (string-or-port (current-input-port)) #:key$/;"	f
xml-token-head	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define-syntax xml-token-head $/;"	f
xml-token-kind	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define-syntax xml-token-kind $/;"	f
xml-token?	/usr/share/guile/2.0/sxml/upstream/SSAX.scm	/^(define xml-token? pair?)$/;"	f
year-day	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (year-day day month year)$/;"	f
zero?	/usr/share/guile/2.0/language/tree-il/primitives.scm	/^(define-primitive-expander zero? (x)$/;"	f
zip	/usr/share/guile/2.0/srfi/srfi-1.scm	/^(define (zip clist1 . rest)$/;"	f
zone-reader	/usr/share/guile/2.0/srfi/srfi-19.scm	/^(define (zone-reader port)$/;"	f
λ	/usr/share/guile/2.0/ice-9/boot-9.scm	/^(define-syntax-rule (λ formals body ...)$/;"	f
